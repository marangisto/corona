#pragma once

////
//
//      STM32U5 GPDMA peripherals
//
///

// GPDMA1: GPDMA1

struct stm32u5xx_gpdma1_t
{
    volatile uint32_t GPDMA_SECCFGR; // GPDMA secure configuration register
    volatile uint32_t GPDMA_PRIVCFGR; // GPDMA privileged configuration register
    volatile uint32_t GPDMA_RCFGLOCKR; // GPDMA configuration lock register
    volatile uint32_t GPDMA_MISR; // GPDMA non-secure masked interrupt status register
    volatile uint32_t GPDMA_SMISR; // GPDMA secure masked interrupt status register
    reserved_t<0xf> _0x14;
    volatile uint32_t GPDMA_C0LBAR; // GPDMA channel 0 linked-list base address register
    reserved_t<0x2> _0x54;
    volatile uint32_t GPDMA_C0FCR; // GPDMA channel 0 flag clear register
    volatile uint32_t GPDMA_C0SR; // GPDMA channel 0 status register
    volatile uint32_t GPDMA_C0CR; // GPDMA channel 0 control register
    reserved_t<0xa> _0x68;
    volatile uint32_t GPDMA_C0TR1; // GPDMA channel 0 transfer register 1
    volatile uint32_t GPDMA_C0TR2; // GPDMA channel 0 transfer register 2
    volatile uint32_t GPDMA_C0BR1; // GPDMA channel 0 block register 1
    volatile uint32_t GPDMA_C0SAR; // GPDMA channel 0 source address register
    volatile uint32_t GPDMA_C0DAR; // GPDMA channel 0 destination address register
    reserved_t<0xa> _0xa4;
    volatile uint32_t GPDMA_C0LLR; // GPDMA channel 0 linked-list address register
    volatile uint32_t GPDMA_C1LBAR; // GPDMA channel 1 linked-list base address register
    reserved_t<0x2> _0xd4;
    volatile uint32_t GPDMA_C1FCR; // GPDMA channel 1 flag clear register
    volatile uint32_t GPDMA_C1SR; // GPDMA channel 1 status register
    volatile uint32_t GPDMA_C1CR; // GPDMA channel 1 control register
    reserved_t<0xa> _0xe8;
    volatile uint32_t GPDMA_C1TR1; // GPDMA channel 1 transfer register 1
    volatile uint32_t GPDMA_C1TR2; // GPDMA channel 1 transfer register 2
    volatile uint32_t GPDMA_C1BR1; // GPDMA channel 1 block register 1
    volatile uint32_t GPDMA_C1SAR; // GPDMA channel 1 source address register
    volatile uint32_t GPDMA_C1DAR; // GPDMA channel 1 destination address register
    reserved_t<0xa> _0x124;
    volatile uint32_t GPDMA_C1LLR; // GPDMA channel 1 linked-list address register
    volatile uint32_t GPDMA_C2LBAR; // GPDMA channel 2 linked-list base address register
    reserved_t<0x2> _0x154;
    volatile uint32_t GPDMA_C2FCR; // GPDMA channel 2 flag clear register
    volatile uint32_t GPDMA_C2SR; // GPDMA channel 2 status register
    volatile uint32_t GPDMA_C2CR; // GPDMA channel 2 control register
    reserved_t<0xa> _0x168;
    volatile uint32_t GPDMA_C2TR1; // GPDMA channel 2 transfer register 1
    volatile uint32_t GPDMA_C2TR2; // GPDMA channel 2 transfer register 2
    volatile uint32_t GPDMA_C2BR1; // GPDMA channel 2 block register 1
    volatile uint32_t GPDMA_C2SAR; // GPDMA channel 2 source address register
    volatile uint32_t GPDMA_C2DAR; // GPDMA channel 2 destination address register
    reserved_t<0xa> _0x1a4;
    volatile uint32_t GPDMA_C2LLR; // GPDMA channel 2 linked-list address register
    volatile uint32_t GPDMA_C3LBAR; // GPDMA channel 3 linked-list base address register
    reserved_t<0x2> _0x1d4;
    volatile uint32_t GPDMA_C3FCR; // GPDMA channel 3 flag clear register
    volatile uint32_t GPDMA_C3SR; // GPDMA channel 3 status register
    volatile uint32_t GPDMA_C3CR; // GPDMA channel 3 control register
    reserved_t<0xa> _0x1e8;
    volatile uint32_t GPDMA_C3TR1; // GPDMA channel 3 transfer register 1
    volatile uint32_t GPDMA_C3TR2; // GPDMA channel 3 transfer register 2
    volatile uint32_t GPDMA_C3BR1; // GPDMA channel 3 block register 1
    volatile uint32_t GPDMA_C3SAR; // GPDMA channel 3 source address register
    volatile uint32_t GPDMA_C3DAR; // GPDMA channel 3 destination address register
    reserved_t<0xa> _0x224;
    volatile uint32_t GPDMA_C3LLR; // GPDMA channel 3 linked-list address register
    volatile uint32_t GPDMA_C4LBAR; // GPDMA channel 4 linked-list base address register
    reserved_t<0x2> _0x254;
    volatile uint32_t GPDMA_C4FCR; // GPDMA channel 4 flag clear register
    volatile uint32_t GPDMA_C4SR; // GPDMA channel 4 status register
    volatile uint32_t GPDMA_C4CR; // GPDMA channel 4 control register
    reserved_t<0xa> _0x268;
    volatile uint32_t GPDMA_C4TR1; // GPDMA channel 4 transfer register 1
    volatile uint32_t GPDMA_C4TR2; // GPDMA channel 4 transfer register 2
    volatile uint32_t GPDMA_C4BR1; // GPDMA channel 4 block register 1
    volatile uint32_t GPDMA_C4SAR; // GPDMA channel 4 source address register
    volatile uint32_t GPDMA_C4DAR; // GPDMA channel 4 destination address register
    reserved_t<0xa> _0x2a4;
    volatile uint32_t GPDMA_C4LLR; // GPDMA channel 4 linked-list address register
    volatile uint32_t GPDMA_C5LBAR; // GPDMA channel 5 linked-list base address register
    reserved_t<0x2> _0x2d4;
    volatile uint32_t GPDMA_C5FCR; // GPDMA channel 5 flag clear register
    volatile uint32_t GPDMA_C5SR; // GPDMA channel 5 status register
    volatile uint32_t GPDMA_C5CR; // GPDMA channel 5 control register
    reserved_t<0xa> _0x2e8;
    volatile uint32_t GPDMA_C5TR1; // GPDMA channel 5 transfer register 1
    volatile uint32_t GPDMA_C5TR2; // GPDMA channel 5 transfer register 2
    volatile uint32_t GPDMA_C5BR1; // GPDMA channel 5 block register 1
    volatile uint32_t GPDMA_C5SAR; // GPDMA channel 5 source address register
    volatile uint32_t GPDMA_C5DAR; // GPDMA channel 5 destination address register
    reserved_t<0xa> _0x324;
    volatile uint32_t GPDMA_C5LLR; // GPDMA channel 5 linked-list address register
    volatile uint32_t GPDMA_C6LBAR; // GPDMA channel 6 linked-list base address register
    reserved_t<0x2> _0x354;
    volatile uint32_t GPDMA_C6FCR; // GPDMA channel 6 flag clear register
    volatile uint32_t GPDMA_C6SR; // GPDMA channel 6 status register
    volatile uint32_t GPDMA_C6CR; // GPDMA channel 6 control register
    reserved_t<0xa> _0x368;
    volatile uint32_t GPDMA_C6TR1; // GPDMA channel 6 transfer register 1
    volatile uint32_t GPDMA_C6TR2; // GPDMA channel 6 transfer register 2
    volatile uint32_t GPDMA_C6BR1; // GPDMA channel 6 block register 1
    volatile uint32_t GPDMA_C6SAR; // GPDMA channel 6 source address register
    volatile uint32_t GPDMA_C6DAR; // GPDMA channel 6 destination address register
    reserved_t<0xa> _0x3a4;
    volatile uint32_t GPDMA_C6LLR; // GPDMA channel 6 linked-list address register
    volatile uint32_t GPDMA_C7LBAR; // GPDMA channel 7 linked-list base address register
    reserved_t<0x2> _0x3d4;
    volatile uint32_t GPDMA_C7FCR; // GPDMA channel 7 flag clear register
    volatile uint32_t GPDMA_C7SR; // GPDMA channel 7 status register
    volatile uint32_t GPDMA_C7CR; // GPDMA channel 7 control register
    reserved_t<0xa> _0x3e8;
    volatile uint32_t GPDMA_C7TR1; // GPDMA channel 7 transfer register 1
    volatile uint32_t GPDMA_C7TR2; // GPDMA channel 7 transfer register 2
    volatile uint32_t GPDMA_C7BR1; // GPDMA channel 7 block register 1
    volatile uint32_t GPDMA_C7SAR; // GPDMA channel 7 source address register
    volatile uint32_t GPDMA_C7DAR; // GPDMA channel 7 destination address register
    reserved_t<0xa> _0x424;
    volatile uint32_t GPDMA_C7LLR; // GPDMA channel 7 linked-list address register
    volatile uint32_t GPDMA_C8LBAR; // GPDMA channel 8 linked-list base address register
    reserved_t<0x2> _0x454;
    volatile uint32_t GPDMA_C8FCR; // GPDMA channel 8 flag clear register
    volatile uint32_t GPDMA_C8SR; // GPDMA channel 8 status register
    volatile uint32_t GPDMA_C8CR; // GPDMA channel 8 control register
    reserved_t<0xa> _0x468;
    volatile uint32_t GPDMA_C8TR1; // GPDMA channel 8 transfer register 1
    volatile uint32_t GPDMA_C8TR2; // GPDMA channel 8 transfer register 2
    volatile uint32_t GPDMA_C8BR1; // GPDMA channel 8 block register 1
    volatile uint32_t GPDMA_C8SAR; // GPDMA channel 8 source address register
    volatile uint32_t GPDMA_C8DAR; // GPDMA channel 8 destination address register
    reserved_t<0xa> _0x4a4;
    volatile uint32_t GPDMA_C8LLR; // GPDMA channel 8 linked-list address register
    volatile uint32_t GPDMA_C9LBAR; // GPDMA channel 9 linked-list base address register
    reserved_t<0x2> _0x4d4;
    volatile uint32_t GPDMA_C9FCR; // GPDMA channel 9 flag clear register
    volatile uint32_t GPDMA_C9SR; // GPDMA channel 9 status register
    volatile uint32_t GPDMA_C9CR; // GPDMA channel 9 control register
    reserved_t<0xa> _0x4e8;
    volatile uint32_t GPDMA_C9TR1; // GPDMA channel 9 transfer register 1
    volatile uint32_t GPDMA_C9TR2; // GPDMA channel 9 transfer register 2
    volatile uint32_t GPDMA_C9BR1; // GPDMA channel 9 block register 1
    volatile uint32_t GPDMA_C9SAR; // GPDMA channel 9 source address register
    volatile uint32_t GPDMA_C9DAR; // GPDMA channel 9 destination address register
    reserved_t<0xa> _0x524;
    volatile uint32_t GPDMA_C9LLR; // GPDMA channel 9 linked-list address register
    volatile uint32_t GPDMA_C10LBAR; // GPDMA channel 10 linked-list base address register
    reserved_t<0x2> _0x554;
    volatile uint32_t GPDMA_C10FCR; // GPDMA channel 10 flag clear register
    volatile uint32_t GPDMA_C10SR; // GPDMA channel 10 status register
    volatile uint32_t GPDMA_C10CR; // GPDMA channel 10 control register
    reserved_t<0xa> _0x568;
    volatile uint32_t GPDMA_C10TR1; // GPDMA channel 10 transfer register 1
    volatile uint32_t GPDMA_C10TR2; // GPDMA channel 10 transfer register 2
    volatile uint32_t GPDMA_C10BR1; // GPDMA channel 10 block register 1
    volatile uint32_t GPDMA_C10SAR; // GPDMA channel 10 source address register
    volatile uint32_t GPDMA_C10DAR; // GPDMA channel 10 destination address register
    reserved_t<0xa> _0x5a4;
    volatile uint32_t GPDMA_C10LLR; // GPDMA channel 10 linked-list address register
    volatile uint32_t GPDMA_C11LBAR; // GPDMA channel 11 linked-list base address register
    reserved_t<0x2> _0x5d4;
    volatile uint32_t GPDMA_C11FCR; // GPDMA channel 11 flag clear register
    volatile uint32_t GPDMA_C11SR; // GPDMA channel 11 status register
    volatile uint32_t GPDMA_C11CR; // GPDMA channel 11 control register
    reserved_t<0xa> _0x5e8;
    volatile uint32_t GPDMA_C11TR1; // GPDMA channel 11 transfer register 1
    volatile uint32_t GPDMA_C11TR2; // GPDMA channel 11 transfer register 2
    volatile uint32_t GPDMA_C11BR1; // GPDMA channel 11 block register 1
    volatile uint32_t GPDMA_C11SAR; // GPDMA channel 11 source address register
    volatile uint32_t GPDMA_C11DAR; // GPDMA channel 11 destination address register
    reserved_t<0xa> _0x624;
    volatile uint32_t GPDMA_C11LLR; // GPDMA channel 11 linked-list address register
    volatile uint32_t GPDMA_C12LBAR; // GPDMA channel 12 linked-list base address register
    reserved_t<0x2> _0x654;
    volatile uint32_t GPDMA_C12FCR; // GPDMA channel 12 flag clear register
    volatile uint32_t GPDMA_C12SR; // GPDMA channel 12 status register
    volatile uint32_t GPDMA_C12CR; // GPDMA channel 12 control register
    reserved_t<0xa> _0x668;
    volatile uint32_t GPDMA_C12TR1; // GPDMA channel 12 transfer register 1
    volatile uint32_t GPDMA_C12TR2; // GPDMA channel 12 transfer register 2
    volatile uint32_t GPDMA_C12BR1; // GPDMA channel 12 alternate block register 1
    volatile uint32_t GPDMA_C12SAR; // GPDMA channel 12 source address register
    volatile uint32_t GPDMA_C12DAR; // GPDMA channel 12 destination address register
    volatile uint32_t GPDMA_C12TR3; // GPDMA channel 12 transfer register 3
    volatile uint32_t GPDMA_C12BR2; // GPDMA channel 12 block register 2
    reserved_t<0x8> _0x6ac;
    volatile uint32_t GPDMA_C12LLR; // GPDMA channel 12 alternate linked-list address register
    volatile uint32_t GPDMA_C13LBAR; // GPDMA channel 13 linked-list base address register
    reserved_t<0x2> _0x6d4;
    volatile uint32_t GPDMA_C13FCR; // GPDMA channel 13 flag clear register
    volatile uint32_t GPDMA_C13SR; // GPDMA channel 13 status register
    volatile uint32_t GPDMA_C13CR; // GPDMA channel 13 control register
    reserved_t<0xa> _0x6e8;
    volatile uint32_t GPDMA_C13TR1; // GPDMA channel 13 transfer register 1
    volatile uint32_t GPDMA_C13TR2; // GPDMA channel 13 transfer register 2
    volatile uint32_t GPDMA_C13BR1; // GPDMA channel 13 alternate block register 1
    volatile uint32_t GPDMA_C13SAR; // GPDMA channel 13 source address register
    volatile uint32_t GPDMA_C13DAR; // GPDMA channel 13 destination address register
    volatile uint32_t GPDMA_C13TR3; // GPDMA channel 13 transfer register 3
    volatile uint32_t GPDMA_C13BR2; // GPDMA channel 13 block register 2
    reserved_t<0x8> _0x72c;
    volatile uint32_t GPDMA_C13LLR; // GPDMA channel 13 alternate linked-list address register
    volatile uint32_t GPDMA_C14LBAR; // GPDMA channel 14 linked-list base address register
    reserved_t<0x2> _0x754;
    volatile uint32_t GPDMA_C14FCR; // GPDMA channel 14 flag clear register
    volatile uint32_t GPDMA_C14SR; // GPDMA channel 14 status register
    volatile uint32_t GPDMA_C14CR; // GPDMA channel 14 control register
    reserved_t<0xa> _0x768;
    volatile uint32_t GPDMA_C14TR1; // GPDMA channel 14 transfer register 1
    volatile uint32_t GPDMA_C14TR2; // GPDMA channel 14 transfer register 2
    volatile uint32_t GPDMA_C14BR1; // GPDMA channel 14 alternate block register 1
    volatile uint32_t GPDMA_C14SAR; // GPDMA channel 14 source address register
    volatile uint32_t GPDMA_C14DAR; // GPDMA channel 14 destination address register
    volatile uint32_t GPDMA_C14TR3; // GPDMA channel 14 transfer register 3
    volatile uint32_t GPDMA_C14BR2; // GPDMA channel 14 block register 2
    reserved_t<0x8> _0x7ac;
    volatile uint32_t GPDMA_C14LLR; // GPDMA channel 14 alternate linked-list address register
    volatile uint32_t GPDMA_C15LBAR; // GPDMA channel 15 linked-list base address register
    reserved_t<0x2> _0x7d4;
    volatile uint32_t GPDMA_C15FCR; // GPDMA channel 15 flag clear register
    volatile uint32_t GPDMA_C15SR; // GPDMA channel 15 status register
    volatile uint32_t GPDMA_C15CR; // GPDMA channel 15 control register
    reserved_t<0xa> _0x7e8;
    volatile uint32_t GPDMA_C15TR1; // GPDMA channel 15 transfer register 1
    volatile uint32_t GPDMA_C15TR2; // GPDMA channel 15 transfer register 2
    volatile uint32_t GPDMA_C15BR1; // GPDMA channel 15 alternate block register 1
    volatile uint32_t GPDMA_C15SAR; // GPDMA channel 15 source address register
    volatile uint32_t GPDMA_C15DAR; // GPDMA channel 15 destination address register
    volatile uint32_t GPDMA_C15TR3; // GPDMA channel 15 transfer register 3
    volatile uint32_t GPDMA_C15BR2; // GPDMA channel 15 block register 2
    reserved_t<0x8> _0x82c;
    volatile uint32_t GPDMA_C15LLR; // GPDMA channel 15 alternate linked-list address register

    static constexpr uint32_t GPDMA_SECCFGR_RESET_VALUE = 0x0; // Reset value
    static constexpr uint32_t GPDMA_SECCFGR_SEC0 = 0x1; // SEC0
    static constexpr uint32_t GPDMA_SECCFGR_SEC1 = 0x2; // SEC1
    static constexpr uint32_t GPDMA_SECCFGR_SEC2 = 0x4; // SEC2
    static constexpr uint32_t GPDMA_SECCFGR_SEC3 = 0x8; // SEC3
    static constexpr uint32_t GPDMA_SECCFGR_SEC4 = 0x10; // SEC4
    static constexpr uint32_t GPDMA_SECCFGR_SEC5 = 0x20; // SEC5
    static constexpr uint32_t GPDMA_SECCFGR_SEC6 = 0x40; // SEC6
    static constexpr uint32_t GPDMA_SECCFGR_SEC7 = 0x80; // SEC7
    static constexpr uint32_t GPDMA_SECCFGR_SEC8 = 0x100; // SEC8
    static constexpr uint32_t GPDMA_SECCFGR_SEC9 = 0x200; // SEC9
    static constexpr uint32_t GPDMA_SECCFGR_SEC10 = 0x400; // SEC10
    static constexpr uint32_t GPDMA_SECCFGR_SEC11 = 0x800; // SEC11
    static constexpr uint32_t GPDMA_SECCFGR_SEC12 = 0x1000; // SEC12
    static constexpr uint32_t GPDMA_SECCFGR_SEC13 = 0x2000; // SEC13
    static constexpr uint32_t GPDMA_SECCFGR_SEC14 = 0x4000; // SEC14
    static constexpr uint32_t GPDMA_SECCFGR_SEC15 = 0x8000; // SEC15

    static constexpr uint32_t GPDMA_PRIVCFGR_RESET_VALUE = 0x0; // Reset value
    static constexpr uint32_t GPDMA_PRIVCFGR_PRIV0 = 0x1; // PRIV0
    static constexpr uint32_t GPDMA_PRIVCFGR_PRIV1 = 0x2; // PRIV1
    static constexpr uint32_t GPDMA_PRIVCFGR_PRIV2 = 0x4; // PRIV2
    static constexpr uint32_t GPDMA_PRIVCFGR_PRIV3 = 0x8; // PRIV3
    static constexpr uint32_t GPDMA_PRIVCFGR_PRIV4 = 0x10; // PRIV4
    static constexpr uint32_t GPDMA_PRIVCFGR_PRIV5 = 0x20; // PRIV5
    static constexpr uint32_t GPDMA_PRIVCFGR_PRIV6 = 0x40; // PRIV6
    static constexpr uint32_t GPDMA_PRIVCFGR_PRIV7 = 0x80; // PRIV7
    static constexpr uint32_t GPDMA_PRIVCFGR_PRIV8 = 0x100; // PRIV8
    static constexpr uint32_t GPDMA_PRIVCFGR_PRIV9 = 0x200; // PRIV9
    static constexpr uint32_t GPDMA_PRIVCFGR_PRIV10 = 0x400; // PRIV10
    static constexpr uint32_t GPDMA_PRIVCFGR_PRIV11 = 0x800; // PRIV11
    static constexpr uint32_t GPDMA_PRIVCFGR_PRIV12 = 0x1000; // PRIV12
    static constexpr uint32_t GPDMA_PRIVCFGR_PRIV13 = 0x2000; // PRIV13
    static constexpr uint32_t GPDMA_PRIVCFGR_PRIV14 = 0x4000; // PRIV14
    static constexpr uint32_t GPDMA_PRIVCFGR_PRIV15 = 0x8000; // PRIV15

    static constexpr uint32_t GPDMA_RCFGLOCKR_RESET_VALUE = 0x0; // Reset value
    static constexpr uint32_t GPDMA_RCFGLOCKR_LOCK0 = 0x1; // LOCK0
    static constexpr uint32_t GPDMA_RCFGLOCKR_LOCK1 = 0x2; // LOCK1
    static constexpr uint32_t GPDMA_RCFGLOCKR_LOCK2 = 0x4; // LOCK2
    static constexpr uint32_t GPDMA_RCFGLOCKR_LOCK3 = 0x8; // LOCK3
    static constexpr uint32_t GPDMA_RCFGLOCKR_LOCK4 = 0x10; // LOCK4
    static constexpr uint32_t GPDMA_RCFGLOCKR_LOCK5 = 0x20; // LOCK5
    static constexpr uint32_t GPDMA_RCFGLOCKR_LOCK6 = 0x40; // LOCK6
    static constexpr uint32_t GPDMA_RCFGLOCKR_LOCK7 = 0x80; // LOCK7
    static constexpr uint32_t GPDMA_RCFGLOCKR_LOCK8 = 0x100; // LOCK8
    static constexpr uint32_t GPDMA_RCFGLOCKR_LOCK9 = 0x200; // LOCK9
    static constexpr uint32_t GPDMA_RCFGLOCKR_LOCK10 = 0x400; // LOCK10
    static constexpr uint32_t GPDMA_RCFGLOCKR_LOCK11 = 0x800; // LOCK11
    static constexpr uint32_t GPDMA_RCFGLOCKR_LOCK12 = 0x1000; // LOCK12
    static constexpr uint32_t GPDMA_RCFGLOCKR_LOCK13 = 0x2000; // LOCK13
    static constexpr uint32_t GPDMA_RCFGLOCKR_LOCK14 = 0x4000; // LOCK14
    static constexpr uint32_t GPDMA_RCFGLOCKR_LOCK15 = 0x8000; // LOCK15

    static constexpr uint32_t GPDMA_MISR_RESET_VALUE = 0x0; // Reset value
    static constexpr uint32_t GPDMA_MISR_MIS0 = 0x1; // MIS0
    static constexpr uint32_t GPDMA_MISR_MIS1 = 0x2; // MIS1
    static constexpr uint32_t GPDMA_MISR_MIS2 = 0x4; // MIS2
    static constexpr uint32_t GPDMA_MISR_MIS3 = 0x8; // MIS3
    static constexpr uint32_t GPDMA_MISR_MIS4 = 0x10; // MIS4
    static constexpr uint32_t GPDMA_MISR_MIS5 = 0x20; // MIS5
    static constexpr uint32_t GPDMA_MISR_MIS6 = 0x40; // MIS6
    static constexpr uint32_t GPDMA_MISR_MIS7 = 0x80; // MIS7
    static constexpr uint32_t GPDMA_MISR_MIS8 = 0x100; // MIS8
    static constexpr uint32_t GPDMA_MISR_MIS9 = 0x200; // MIS9
    static constexpr uint32_t GPDMA_MISR_MIS10 = 0x400; // MIS10
    static constexpr uint32_t GPDMA_MISR_MIS11 = 0x800; // MIS11
    static constexpr uint32_t GPDMA_MISR_MIS12 = 0x1000; // MIS12
    static constexpr uint32_t GPDMA_MISR_MIS13 = 0x2000; // MIS13
    static constexpr uint32_t GPDMA_MISR_MIS14 = 0x4000; // MIS14
    static constexpr uint32_t GPDMA_MISR_MIS15 = 0x8000; // MIS15

    static constexpr uint32_t GPDMA_SMISR_RESET_VALUE = 0x0; // Reset value
    static constexpr uint32_t GPDMA_SMISR_MIS0 = 0x1; // MIS0
    static constexpr uint32_t GPDMA_SMISR_MIS1 = 0x2; // MIS1
    static constexpr uint32_t GPDMA_SMISR_MIS2 = 0x4; // MIS2
    static constexpr uint32_t GPDMA_SMISR_MIS3 = 0x8; // MIS3
    static constexpr uint32_t GPDMA_SMISR_MIS4 = 0x10; // MIS4
    static constexpr uint32_t GPDMA_SMISR_MIS5 = 0x20; // MIS5
    static constexpr uint32_t GPDMA_SMISR_MIS6 = 0x40; // MIS6
    static constexpr uint32_t GPDMA_SMISR_MIS7 = 0x80; // MIS7
    static constexpr uint32_t GPDMA_SMISR_MIS8 = 0x100; // MIS8
    static constexpr uint32_t GPDMA_SMISR_MIS9 = 0x200; // MIS9
    static constexpr uint32_t GPDMA_SMISR_MIS10 = 0x400; // MIS10
    static constexpr uint32_t GPDMA_SMISR_MIS11 = 0x800; // MIS11
    static constexpr uint32_t GPDMA_SMISR_MIS12 = 0x1000; // MIS12
    static constexpr uint32_t GPDMA_SMISR_MIS13 = 0x2000; // MIS13
    static constexpr uint32_t GPDMA_SMISR_MIS14 = 0x4000; // MIS14
    static constexpr uint32_t GPDMA_SMISR_MIS15 = 0x8000; // MIS15


    static constexpr uint32_t GPDMA_C0LBAR_RESET_VALUE = 0x0; // Reset value
    typedef bit_field_t<16, 0xffff> GPDMA_C0LBAR_LBA; // linked-list base address of GPDMA channel x


    static constexpr uint32_t GPDMA_C0FCR_RESET_VALUE = 0x0; // Reset value
    static constexpr uint32_t GPDMA_C0FCR_TCF = 0x100; // transfer complete flag clear
    static constexpr uint32_t GPDMA_C0FCR_HTF = 0x200; // half transfer flag clear
    static constexpr uint32_t GPDMA_C0FCR_DTEF = 0x400; // data transfer error flag clear
    static constexpr uint32_t GPDMA_C0FCR_ULEF = 0x800; // update link transfer error flag clear
    static constexpr uint32_t GPDMA_C0FCR_USEF = 0x1000; // user setting error flag clear
    static constexpr uint32_t GPDMA_C0FCR_SUSPF = 0x2000; // completed suspension flag clear
    static constexpr uint32_t GPDMA_C0FCR_TOF = 0x4000; // trigger overrun flag clear

    static constexpr uint32_t GPDMA_C0SR_RESET_VALUE = 0x1; // Reset value
    static constexpr uint32_t GPDMA_C0SR_IDLEF = 0x1; // idle flag This idle flag is de-asserted by hardware when the channel is enabled (GPDMA_CxCR.EN=1) with a valid channel configuration (no USEF to be immediately reported). This idle flag is asserted after hard reset or by hardware when the channel is back in idle state (in suspended or disabled state).
    static constexpr uint32_t GPDMA_C0SR_TCF = 0x100; // transfer complete flag A transfer complete event is either a block transfer complete, a 2D/repeated block transfer complete, a LLI transfer complete including the upload of the next LLI if any, or the full linked-list completion, depending on the transfer complete event mode (GPDMA_CxTR2.TCEM[1:0]).
    static constexpr uint32_t GPDMA_C0SR_HTF = 0x200; // half transfer flag An half transfer event is either an half block transfer or an half 2D/repeated block transfer, depending on the transfer complete event mode (GPDMA_CxTR2.TCEM[1:0]). An half block transfer occurs when half of the bytes of the source block size (rounded up integer of GPDMA_CxBR1.BNDT[15:0]/2) has been transferred to the destination. An half 2D/repeated block transfer occurs when half of the repeated blocks (rounded up integer of (GPDMA_CxBR1.BRC[10:0]+1)/2)) has been transferred to the destination.
    static constexpr uint32_t GPDMA_C0SR_DTEF = 0x400; // data transfer error flag
    static constexpr uint32_t GPDMA_C0SR_ULEF = 0x800; // update link transfer error flag
    static constexpr uint32_t GPDMA_C0SR_USEF = 0x1000; // user setting error flag
    static constexpr uint32_t GPDMA_C0SR_SUSPF = 0x2000; // completed suspension flag
    static constexpr uint32_t GPDMA_C0SR_TOF = 0x4000; // trigger overrun flag
    typedef bit_field_t<16, 0xff> GPDMA_C0SR_FIFOL; // monitored FIFO level Number of available write beats in the FIFO, in units of the programmed destination data width (see GPDMA_CxTR1.DDW_LOG2[1:0], in units of bytes, half-words, or words). Note: After having suspended an active transfer, the user may need to read FIFOL[7:0], additionally to GPDMA_CxBR1.BDNT[15:0] and GPDMA_CxBR1.BRC[10:0], to know how many data have been transferred to the destination. Before reading, the user may wait for the transfer to be suspended (GPDMA_CxSR.SUSPF=1).

    static constexpr uint32_t GPDMA_C0CR_RESET_VALUE = 0x0; // Reset value
    static constexpr uint32_t GPDMA_C0CR_EN = 0x1; // enable Writing 1 into the field RESET (bit 1) causes the hardware to de-assert this bit, whatever is written into this bit 0. Else: this bit is de-asserted by hardware when there is a transfer error (master bus error or user setting error) or when there is a channel transfer complete (channel ready to be configured, e.g. if LSM=1 at the end of a single execution of the LLI). Else, this bit can be asserted by software. Writing 0 into this EN bit is ignored.
    static constexpr uint32_t GPDMA_C0CR_RESET = 0x2; // reset This bit is write only. Writing 0 has no impact. Writing 1 implies the reset of the following: the FIFO, the channel internal state, SUSP and EN bits (whatever is written receptively in bit 2 and bit 0). The reset is effective when the channel is in steady state, meaning one of the following: - active channel in suspended state (GPDMA_CxSR.SUSPF=1 and GPDMA_CxSR.IDLEF=GPDMA_CxCR.EN=1) - channel in disabled state (GPDMA_CxSR.IDLEF=1 and GPDMA_CxCR.EN=0). After writing a RESET, to continue using this channel, the user must explicitly reconfigure the channel including the hardware-modified configuration registers (GPDMA_CxBR1, GPDMA_CxSAR and GPDMA_CxDAR) before enabling again the channel (see the programming sequence in ).
    static constexpr uint32_t GPDMA_C0CR_SUSP = 0x4; // suspend Writing 1 into the field RESET (bit 1) causes the hardware to de-assert this bit, whatever is written into this bit 2. Else: Software must write 1 in order to suspend an active channel i.e. a channel with an on-going GPDMA transfer over its master ports. The software must write 0 in order to resume a suspended channel, following the programming sequence detailed in .
    static constexpr uint32_t GPDMA_C0CR_TCIE = 0x100; // transfer complete interrupt enable
    static constexpr uint32_t GPDMA_C0CR_HTIE = 0x200; // half transfer complete interrupt enable
    static constexpr uint32_t GPDMA_C0CR_DTEIE = 0x400; // data transfer error interrupt enable
    static constexpr uint32_t GPDMA_C0CR_ULEIE = 0x800; // update link transfer error interrupt enable
    static constexpr uint32_t GPDMA_C0CR_USEIE = 0x1000; // user setting error interrupt enable
    static constexpr uint32_t GPDMA_C0CR_SUSPIE = 0x2000; // completed suspension interrupt enable
    static constexpr uint32_t GPDMA_C0CR_TOIE = 0x4000; // trigger overrun interrupt enable
    static constexpr uint32_t GPDMA_C0CR_LSM = 0x10000; // Link step mode First the (possible 1D/repeated) block transfer is executed as defined by the current internal register file until GPDMA_CxBR1.BNDT[15:0]=0 and GPDMA_CxBR1.BRC[10:0]=0 if present. Secondly the next linked-list data structure is conditionally uploaded from memory as defined by GPDMA_CxLLR. Then channel execution is completed. Note: This bit must be written when EN=0. This bit is read-only when EN=1.
    static constexpr uint32_t GPDMA_C0CR_LAP = 0x20000; // linked-list allocated port This bit is used to allocate the master port for the update of the GPDMA linked-list registers from the memory. Note: This bit must be written when EN=0. This bit is read-only when EN=1.
    typedef bit_field_t<22, 0x3> GPDMA_C0CR_PRIO; // priority level of the channel x GPDMA transfer versus others Note: This bit must be written when EN=0. This bit is read-only when EN=1.


    static constexpr uint32_t GPDMA_C0TR1_RESET_VALUE = 0x0; // Reset value
    typedef bit_field_t<0, 0x3> GPDMA_C0TR1_SDW_LOG2; // binary logarithm of the source data width of a burst in bytes Note: Setting a 8-byte data width causes a user setting error to be reported and no transfer is issued. A source block size must be a multiple of the source data width (GPDMA_CxBR1.BNDT[2:0] versus SDW_LOG2[1:0]). Otherwise, a user setting error is reported and no transfer is issued. A source single transfer must have an aligned address with its data width (start address GPDMA_CxSAR[2:0] versus SDW_LOG2[1:0]). Otherwise, a user setting error is reported and none transfer is issued.
    static constexpr uint32_t GPDMA_C0TR1_SINC = 0x8; // source incrementing burst The source address, pointed by GPDMA_CxSAR, is kept constant after a burst beat/single transfer or is incremented by the offset value corresponding to a contiguous data after a burst beat/single transfer.
    typedef bit_field_t<4, 0x3f> GPDMA_C0TR1_SBL_1; // source burst length minus 1, between 0 and 63 The burst length unit is one data named beat within a burst. If SBL_1[5:0]=0, the burst can be named as single. Each data/beat has a width defined by the destination data width SDW_LOG2[1:0]. Note: If a burst transfer crossed a 1-Kbyte address boundary on a AHB transfer, the GPDMA modifies and shortens the programmed burst into singles or bursts of lower length, to be compliant with the AHB protocol. If a burst transfer is of length greater than the FIFO size of the channel x, the GPDMA modifies and shortens the programmed burst into singles or bursts of lower length, to be compliant with the FIFO size. Transfer performance is lower, with GPDMA re-arbitration between effective and lower bursts/singles, but the data integrity is guaranteed.
    typedef bit_field_t<11, 0x3> GPDMA_C0TR1_PAM; // padding/alignment mode If DDW_LOG2[1:0] = SDW_LOG2[1:0]: if the data width of a burst destination transfer is equal to the data width of a burst source transfer, these bits are ignored. Else: - Case 1: If destination data width &gt; source data width 1x: successive source data are FIFO queued and packed at the destination data width, in a left (LSB) to right (MSB) order (named little endian), before a destination transfer - Case 2: If destination data width &lt; source data width 1x: source data is FIFO queued and unpacked at the destination data width, to be transferred in a left (LSB) to right (MSB) order (named little endian) to the destination Note:
    static constexpr uint32_t GPDMA_C0TR1_SBX = 0x2000; // source byte exchange within the unaligned half-word of each source word If the source data width is shorter than a word, this bit is ignored. If the source data width is a word:
    static constexpr uint32_t GPDMA_C0TR1_SAP = 0x4000; // source allocated port This bit is used to allocate the master port for the source transfer Note: This bit must be written when EN=0. This bit is read-only when EN=1.
    static constexpr uint32_t GPDMA_C0TR1_SSEC = 0x8000; // security attribute of the GPDMA transfer from the source If GPDMA_SECCFGR.SECx=1 and the access is secure: This is a secure register bit. This bit can only be read by a secure software. This bit must be written by a secure software when GPDMA_SECCFGR.SECx=1. A secure write is ignored when GPDMA_SECCFGR.SECx=0. When GPDMA_SECCFGR.SECx is de-asserted, this SSEC bit is also de-asserted by hardware (on a secure reconfiguration of the channel as non-secure), and the GPDMA transfer from the source is non-secure.
    typedef bit_field_t<16, 0x3> GPDMA_C0TR1_DDW_LOG2; // binary logarithm of the destination data width of a burst, in bytes Note: Setting a 8-byte data width causes a user setting error to be reported and none transfer is issued. A destination burst transfer must have an aligned address with its data width (start address GPDMA_CxDAR[2:0] and address offset GPDMA_CxTR3.DAO[2:0], versus DDW_LOG2[1:0]). Otherwise a user setting error is reported and no transfer is issued.
    static constexpr uint32_t GPDMA_C0TR1_DINC = 0x80000; // destination incrementing burst The destination address, pointed by GPDMA_CxDAR, is kept constant after a burst beat/single transfer, or is incremented by the offset value corresponding to a contiguous data after a burst beat/single transfer.
    typedef bit_field_t<20, 0x3f> GPDMA_C0TR1_DBL_1; // destination burst length minus 1, between 0 and 63 The burst length unit is one data named beat within a burst. If DBL_1[5:0]=0, the burst can be named as single. Each data/beat has a width defined by the destination data width DDW_LOG2[1:0]. Note: If a burst transfer crossed a 1-Kbyte address boundary on a AHB transfer, the GPDMA modifies and shortens the programmed burst into singles or bursts of lower length, to be compliant with the AHB protocol. If a burst transfer is of length greater than the FIFO size of the channel x, the GPDMA modifies and shortens the programmed burst into singles or bursts of lower length, to be compliant with the FIFO size. Transfer performance is lower, with GPDMA re-arbitration between effective and lower bursts/singles, but the data integrity is guaranteed.
    static constexpr uint32_t GPDMA_C0TR1_DBX = 0x4000000; // destination byte exchange If the destination data size is a byte, this bit is ignored. If the destination data size is not a byte:
    static constexpr uint32_t GPDMA_C0TR1_DHX = 0x8000000; // destination half-word exchange If the destination data size is shorter than a word, this bit is ignored. If the destination data size is a word:
    static constexpr uint32_t GPDMA_C0TR1_DAP = 0x40000000; // destination allocated port This bit is used to allocate the master port for the destination transfer Note: This bit must be written when EN=0. This bit is read-only when EN=1.
    static constexpr uint32_t GPDMA_C0TR1_DSEC = 0x80000000; // security attribute of the GPDMA transfer to the destination If GPDMA_SECCFGR.SECx=1 and the access is secure: This is a secure register bit. This bit can only be read by a secure software. This bit must be written by a secure software when GPDMA_SECCFGR.SECx=1. A secure write is ignored when GPDMA_SECCFGR.SECx=0. When GPDMA_SECCFGR.SECx is de-asserted, this DSEC bit is also de-asserted by hardware (on a secure reconfiguration of the channel as non-secure), and the GPDMA transfer to the destination is non-secure.

    static constexpr uint32_t GPDMA_C0TR2_RESET_VALUE = 0x0; // Reset value
    typedef bit_field_t<0, 0x7f> GPDMA_C0TR2_REQSEL; // GPDMA hardware request selection These bits are ignored if channel x is activated (GPDMA_CxCR.EN asserted) with SWREQ=1 (software request for a memory-to-memory transfer). Else, the selected hardware request is internally taken into account as per . The user must not assign a same input hardware request (same REQSEL[6:0] value) to different active GPDMA channels (GPDMA_CxCR.EN=1 and GPDMA_CxTR2.SWREQ=0 for these channels). GPDMA is not intended to hardware support the case of simultaneous enabled channels incorrectly configured with a same hardware peripheral request signal, and there is no user setting error reporting.
    static constexpr uint32_t GPDMA_C0TR2_SWREQ = 0x200; // software request This bit is internally taken into account when GPDMA_CxCR.EN is asserted.
    static constexpr uint32_t GPDMA_C0TR2_DREQ = 0x400; // destination hardware request This bit is ignored if channel x is activated (GPDMA_CxCR.EN asserted) with SWREQ=1 (software request for a memory-to-memory transfer). Else: Note:
    static constexpr uint32_t GPDMA_C0TR2_BREQ = 0x800; // Block hardware request If the channel x is activated (GPDMA_CxCR.EN asserted) with SWREQ=1 (software request for a memory-to-memory transfer), this bit is ignored. Else:
    typedef bit_field_t<14, 0x3> GPDMA_C0TR2_TRIGM; // trigger mode These bits define the transfer granularity for its conditioning by the trigger. If the channel x is enabled (GPDMA_CxCR.EN asserted) with TRIGPOL[1:0]=00 or 11, these TRIGM[1:0] bits are ignored. Else, a GPDMA transfer is conditioned by at least one trigger hit: first burst read of a 2D/repeated block transfer is conditioned by one hit trigger. If the peripheral is programmed as a source (DREQ=0) of the LLI data transfer, each programmed burst read is conditioned. If the peripheral is programmed as a destination (DREQ=1) of the LLI data transfer, each programmed burst write is conditioned. The first memory burst read of a (possibly 2D/repeated) block, also named as the first ready FIFO-based source burst, is gated by the occurrence of both the hardware request and the first trigger hit. The GPDMA monitoring of a trigger for channel x is started when the channel is enabled/loaded with a new active trigger configuration: rising or falling edge on a selected trigger (TRIGPOL[1:0]=01 or respectively TRIGPOL[1:0]=10). The monitoring of this trigger is kept active during the triggered and uncompleted (data or link) transfer; and if a new trigger is detected then, this hit is internally memorized to grant the next transfer, as long as the defined rising or falling edge is not modified, and the TRIGSEL[5:0] is not modified, and the channel is enabled. Transferring a next LLIn+1 that updates the GPDMA_CxTR2 with a new value for any of TRIGSEL[5:0] or TRIGPOL[1:0], resets the monitoring, trashing the memorized hit of the formerly defined LLIn trigger. After a first new trigger hitn+1 is memorized, if another second trigger hitn+2 is detected and if the hitn triggered transfer is still not completed, hitn+2 is lost and not memorized.memorized. A trigger overrun flag is reported (GPDMA_CxSR.TOF=1), and an interrupt is generated if enabled (GPDMA_CxCR.TOIE=1). The channel is not automatically disabled by hardware due to a trigger overrun. Note: When the source block size is not a multiple of the source burst size and is a multiple of the source data width, then the last programmed source burst is not completed and is internally shorten to match the block size. In this case, if TRIGM[1:0]=11 and (SWREQ=1 or (SWREQ=0 and DREQ=0)), the shortened burst transfer (by singles or/and by bursts of lower length) is conditioned once by the trigger. When the programmed destination burst is internally shortened by singles or/and by bursts of lower length (versus FIFO size, versus block size, 1-Kbyte boundary address crossing): if the trigger is conditioning the programmed destination burst (if TRIGM[1:0]=11 and SWREQ=0 and DREQ=1), this shortened destination burst transfer is conditioned once by the trigger.
    typedef bit_field_t<16, 0x3f> GPDMA_C0TR2_TRIGSEL; // trigger event input selection These bits select the trigger event input of the GPDMA transfer (as per ), with an active trigger event if TRIGPOL[1:0]00.
    typedef bit_field_t<24, 0x3> GPDMA_C0TR2_TRIGPOL; // trigger event polarity These bits define the polarity of the selected trigger event input defined by TRIGSEL[5:0].
    typedef bit_field_t<30, 0x3> GPDMA_C0TR2_TCEM; // transfer complete event mode These bits define the transfer granularity for the transfer complete and half transfer complete events generation. Note: If the initial LLI0 data transfer is null/void (directly programmed by the internal register file with GPDMA_CxBR1.BNDT[15:0]=0), then neither the complete transfer event nor the half transfer event is generated. Note: If the initial LLI0 data transfer is null/void (directly programmed by the internal register file with GPDMA_CxBR1.BNDT[15:0]=0), then neither the complete transfer event nor the half transfer event is generated. Note: If the initial LLI0 data transfer is null/void (i.e. directly programmed by the internal register file with GPDMA_CxBR1.BNDT[15:0]=0), then the half transfer event is not generated, and the transfer complete event is generated when is completed the loading of the LLI1.

    static constexpr uint32_t GPDMA_C0BR1_RESET_VALUE = 0x0; // Reset value
    typedef bit_field_t<0, 0xffff> GPDMA_C0BR1_BNDT; // block number of data bytes to transfer from the source Block size transferred from the source. When the channel is enabled, this field becomes read-only and is decremented, indicating the remaining number of data items in the current source block to be transferred. BNDT[15:0] is programmed in number of bytes, maximum source block size is 64Kbytes -1. Once the last data transfer is completed (BNDT[15:0]=0): - if GPDMA_CxLLR.UB1=1, this field is updated by the LLI in the memory. - if GPDMA_CxLLR.UB1=0 and if there is at least one non null Uxx update bit, this field is internally restored to the programmed value. - if all GPDMA_CxLLR.Uxx=0 and if GPDMA_CxLLR.LA[15:0]=0, this field is internally restored to the programmed value (infinite/continuous last LLI). - if GPDMA_CxLLR=0, this field is kept as zero following the last LLI data transfer. Note: A non-null source block size must be a multiple of the source data width (BNDT[2:0] versus GPDMA_CxTR1.SDW_LOG2[1:0]). Else a user setting error is reported and no transfer is issued. When configured in packing mode (GPDMA_CxTR1.PAM[1]=1 and destination data width different from source data width), a non-null source block size must be a multiple of the destination data width (BNDT[2:0] versus GPDMA_CxTR1.DDW_LOG2[1:0]). Else a user setting error is reported and no transfer is issued.

    static constexpr uint32_t GPDMA_C0SAR_RESET_VALUE = 0x0; // Reset value
    typedef bit_field_t<0, 0xffffffff> GPDMA_C0SAR_SA; // source address This field is the pointer to the address from which the next data is read. During the channel activity, depending on the source addressing mode (GPDMA_CxTR1.SINC), this field is kept fixed or incremented by the data width (GPDMA_CxTR1.SDW_LOG2[1:0]) after each single source data, reflecting the next address from which data is read. During the channel activity, this address is updated after each completed source burst, consequently to: the programmed source burst; either in fixed addressing mode or in contiguous-data incremented mode. If contiguously incremented (GPDMA_CxTR1.SINC = 1), then the additional address offset value is the programmed burst size, as defined by GPDMA_CxTR1.SBL_1[5:0] and GPDMA_CxTR1.SDW_LOG2[21:0] the additional source incremented/decremented offset value as programmed by GPDMA_CxBR1.SDEC and GPDMA_CxTR3.SAO[12:0] once/if completed source block transfer, for a channel x with 2D addressing capability (x = 12 to 15). additional block repeat source incremented/decremented offset value as programmed by GPDMA_CxBR1.BRSDEC and GPDMA_CxBR2.BRSAO[15:0] In linked-list mode, after a LLI data transfer is completed, this register is automatically updated by GPDMA from the memory, provided the LLI is set with GPDMA_CxLLR.USA=1. Note: A source address must be aligned with the programmed data width of a source single (SA[2:0] versus GPDMA_CxTR1.SDW_LOG2[1:0]). Else, a user setting error is reported and no transfer is issued. When the source block size is not a multiple of the source burst size and is a multiple of the source data width, the last programmed source burst is not completed and is internally shorten to match the block size. In this case, the additional GPDMA_CxTR3.SAO[12:0] is not applied.

    static constexpr uint32_t GPDMA_C0DAR_RESET_VALUE = 0x0; // Reset value
    typedef bit_field_t<0, 0xffffffff> GPDMA_C0DAR_DA; // destination address This field is the pointer to the address from which the next data is written. During the channel activity, depending on the destination addressing mode (GPDMA_CxTR1.DINC), this field is kept fixed or incremented by the data width (GPDMA_CxTR1.DDW_LOG2[21:0]) after each single destination data, reflecting the next address from which data is written. During the channel activity, this address is updated after each completed destination burst, consequently to: the programmed destination burst; either in fixed addressing mode or in contiguous-data incremented mode. If contiguously incremented (GPDMA_CxTR1.DINC = 1), then the additional address offset value is the programmed burst size, as defined by GPDMA_CxTR1.DBL_1[5:0] and GPDMA_CxTR1.DDW_LOG2[1:0] the additional destination incremented/decremented offset value as programmed by GPDMA_CxBR1.DDEC and GPDMA_CxTR3.DAO[12:0] once/if completed destination block transfer, for a channel x with 2D addressing capability (x=12to15), the additional block repeat destination incremented/decremented offset value as programmed by GPDMA_CxBR1.BRDDEC and GPDMA_CxBR2.BRDAO[15:0] In linked-list mode, after a LLI data transfer is completed, this register is automatically updated by the GPDMA from the memory, provided the LLI is set with GPDMA_CxLLR.UDA=1. Note: A destination address must be aligned with the programmed data width of a destination burst (DA[2:0] versus GPDMA_CxTR1.DDW_LOG2[1:0]). Else, a user setting error is reported and no transfer is issued.


    static constexpr uint32_t GPDMA_C0LLR_RESET_VALUE = 0x0; // Reset value
    typedef bit_field_t<2, 0x3fff> GPDMA_C0LLR_LA; // pointer (16-bit low-significant address) to the next linked-list data structure If UT1=UT2=UB1=USA=UDA=ULL=0 and if LA[15:20]=0, the current LLI is the last one. The channel transfer is completed without any update of the linked-list GPDMA register file. Else, this field is the pointer to the memory address offset from which the next linked-list data structure is automatically fetched from, once the data transfer is completed, in order to conditionally update the linked-list GPDMA internal register file (GPDMA_CxCTR1, GPDMA_CxTR2, GPDMA_CxBR1, GPDMA_CxSAR, GPDMA_CxDAR and GPDMA_CxLLR). Note: The user must program the pointer to be 32-bit aligned. The two low-significant bits are write ignored.
    static constexpr uint32_t GPDMA_C0LLR_ULL = 0x10000; // Update GPDMA_CxLLR register from memory This bit is used to control the update of GPDMA_CxLLR from the memory during the link transfer.
    static constexpr uint32_t GPDMA_C0LLR_UDA = 0x8000000; // Update GPDMA_CxDAR register from memory This bit is used to control the update of GPDMA_CxDAR from the memory during the link transfer.
    static constexpr uint32_t GPDMA_C0LLR_USA = 0x10000000; // update GPDMA_CxSAR from memory This bit controls the update of GPDMA_CxSAR from the memory during the link transfer.
    static constexpr uint32_t GPDMA_C0LLR_UB1 = 0x20000000; // Update GPDMA_CxBR1 from memory This bit controls the update of GPDMA_CxBR1 from the memory during the link transfer. If UB1=0 and if GPDMA_CxLLR0, the linked-list is not completed. GPDMA_CxBR1.BNDT[15:0] is then restored to the programmed value after data transfer is completed and before the link transfer.
    static constexpr uint32_t GPDMA_C0LLR_UT2 = 0x40000000; // Update GPDMA_CxTR2 from memory This bit controls the update of GPDMA_CxTR2 from the memory during the link transfer.
    static constexpr uint32_t GPDMA_C0LLR_UT1 = 0x80000000; // Update GPDMA_CxTR1 from memory This bit controls the update of GPDMA_CxTR1 from the memory during the link transfer.

    static constexpr uint32_t GPDMA_C1LBAR_RESET_VALUE = 0x0; // Reset value
    typedef bit_field_t<16, 0xffff> GPDMA_C1LBAR_LBA; // linked-list base address of GPDMA channel x


    static constexpr uint32_t GPDMA_C1FCR_RESET_VALUE = 0x0; // Reset value
    static constexpr uint32_t GPDMA_C1FCR_TCF = 0x100; // transfer complete flag clear
    static constexpr uint32_t GPDMA_C1FCR_HTF = 0x200; // half transfer flag clear
    static constexpr uint32_t GPDMA_C1FCR_DTEF = 0x400; // data transfer error flag clear
    static constexpr uint32_t GPDMA_C1FCR_ULEF = 0x800; // update link transfer error flag clear
    static constexpr uint32_t GPDMA_C1FCR_USEF = 0x1000; // user setting error flag clear
    static constexpr uint32_t GPDMA_C1FCR_SUSPF = 0x2000; // completed suspension flag clear
    static constexpr uint32_t GPDMA_C1FCR_TOF = 0x4000; // trigger overrun flag clear

    static constexpr uint32_t GPDMA_C1SR_RESET_VALUE = 0x1; // Reset value
    static constexpr uint32_t GPDMA_C1SR_IDLEF = 0x1; // idle flag This idle flag is de-asserted by hardware when the channel is enabled (GPDMA_CxCR.EN=1) with a valid channel configuration (no USEF to be immediately reported). This idle flag is asserted after hard reset or by hardware when the channel is back in idle state (in suspended or disabled state).
    static constexpr uint32_t GPDMA_C1SR_TCF = 0x100; // transfer complete flag A transfer complete event is either a block transfer complete, a 2D/repeated block transfer complete, a LLI transfer complete including the upload of the next LLI if any, or the full linked-list completion, depending on the transfer complete event mode (GPDMA_CxTR2.TCEM[1:0]).
    static constexpr uint32_t GPDMA_C1SR_HTF = 0x200; // half transfer flag An half transfer event is either an half block transfer or an half 2D/repeated block transfer, depending on the transfer complete event mode (GPDMA_CxTR2.TCEM[1:0]). An half block transfer occurs when half of the bytes of the source block size (rounded up integer of GPDMA_CxBR1.BNDT[15:0]/2) has been transferred to the destination. An half 2D/repeated block transfer occurs when half of the repeated blocks (rounded up integer of (GPDMA_CxBR1.BRC[10:0]+1)/2)) has been transferred to the destination.
    static constexpr uint32_t GPDMA_C1SR_DTEF = 0x400; // data transfer error flag
    static constexpr uint32_t GPDMA_C1SR_ULEF = 0x800; // update link transfer error flag
    static constexpr uint32_t GPDMA_C1SR_USEF = 0x1000; // user setting error flag
    static constexpr uint32_t GPDMA_C1SR_SUSPF = 0x2000; // completed suspension flag
    static constexpr uint32_t GPDMA_C1SR_TOF = 0x4000; // trigger overrun flag
    typedef bit_field_t<16, 0xff> GPDMA_C1SR_FIFOL; // monitored FIFO level Number of available write beats in the FIFO, in units of the programmed destination data width (see GPDMA_CxTR1.DDW_LOG2[1:0], in units of bytes, half-words, or words). Note: After having suspended an active transfer, the user may need to read FIFOL[7:0], additionally to GPDMA_CxBR1.BDNT[15:0] and GPDMA_CxBR1.BRC[10:0], to know how many data have been transferred to the destination. Before reading, the user may wait for the transfer to be suspended (GPDMA_CxSR.SUSPF=1).

    static constexpr uint32_t GPDMA_C1CR_RESET_VALUE = 0x0; // Reset value
    static constexpr uint32_t GPDMA_C1CR_EN = 0x1; // enable Writing 1 into the field RESET (bit 1) causes the hardware to de-assert this bit, whatever is written into this bit 0. Else: this bit is de-asserted by hardware when there is a transfer error (master bus error or user setting error) or when there is a channel transfer complete (channel ready to be configured, e.g. if LSM=1 at the end of a single execution of the LLI). Else, this bit can be asserted by software. Writing 0 into this EN bit is ignored.
    static constexpr uint32_t GPDMA_C1CR_RESET = 0x2; // reset This bit is write only. Writing 0 has no impact. Writing 1 implies the reset of the following: the FIFO, the channel internal state, SUSP and EN bits (whatever is written receptively in bit 2 and bit 0). The reset is effective when the channel is in steady state, meaning one of the following: - active channel in suspended state (GPDMA_CxSR.SUSPF=1 and GPDMA_CxSR.IDLEF=GPDMA_CxCR.EN=1) - channel in disabled state (GPDMA_CxSR.IDLEF=1 and GPDMA_CxCR.EN=0). After writing a RESET, to continue using this channel, the user must explicitly reconfigure the channel including the hardware-modified configuration registers (GPDMA_CxBR1, GPDMA_CxSAR and GPDMA_CxDAR) before enabling again the channel (see the programming sequence in ).
    static constexpr uint32_t GPDMA_C1CR_SUSP = 0x4; // suspend Writing 1 into the field RESET (bit 1) causes the hardware to de-assert this bit, whatever is written into this bit 2. Else: Software must write 1 in order to suspend an active channel i.e. a channel with an on-going GPDMA transfer over its master ports. The software must write 0 in order to resume a suspended channel, following the programming sequence detailed in .
    static constexpr uint32_t GPDMA_C1CR_TCIE = 0x100; // transfer complete interrupt enable
    static constexpr uint32_t GPDMA_C1CR_HTIE = 0x200; // half transfer complete interrupt enable
    static constexpr uint32_t GPDMA_C1CR_DTEIE = 0x400; // data transfer error interrupt enable
    static constexpr uint32_t GPDMA_C1CR_ULEIE = 0x800; // update link transfer error interrupt enable
    static constexpr uint32_t GPDMA_C1CR_USEIE = 0x1000; // user setting error interrupt enable
    static constexpr uint32_t GPDMA_C1CR_SUSPIE = 0x2000; // completed suspension interrupt enable
    static constexpr uint32_t GPDMA_C1CR_TOIE = 0x4000; // trigger overrun interrupt enable
    static constexpr uint32_t GPDMA_C1CR_LSM = 0x10000; // Link step mode First the (possible 1D/repeated) block transfer is executed as defined by the current internal register file until GPDMA_CxBR1.BNDT[15:0]=0 and GPDMA_CxBR1.BRC[10:0]=0 if present. Secondly the next linked-list data structure is conditionally uploaded from memory as defined by GPDMA_CxLLR. Then channel execution is completed. Note: This bit must be written when EN=0. This bit is read-only when EN=1.
    static constexpr uint32_t GPDMA_C1CR_LAP = 0x20000; // linked-list allocated port This bit is used to allocate the master port for the update of the GPDMA linked-list registers from the memory. Note: This bit must be written when EN=0. This bit is read-only when EN=1.
    typedef bit_field_t<22, 0x3> GPDMA_C1CR_PRIO; // priority level of the channel x GPDMA transfer versus others Note: This bit must be written when EN=0. This bit is read-only when EN=1.


    static constexpr uint32_t GPDMA_C1TR1_RESET_VALUE = 0x0; // Reset value
    typedef bit_field_t<0, 0x3> GPDMA_C1TR1_SDW_LOG2; // binary logarithm of the source data width of a burst in bytes Note: Setting a 8-byte data width causes a user setting error to be reported and no transfer is issued. A source block size must be a multiple of the source data width (GPDMA_CxBR1.BNDT[2:0] versus SDW_LOG2[1:0]). Otherwise, a user setting error is reported and no transfer is issued. A source single transfer must have an aligned address with its data width (start address GPDMA_CxSAR[2:0] versus SDW_LOG2[1:0]). Otherwise, a user setting error is reported and none transfer is issued.
    static constexpr uint32_t GPDMA_C1TR1_SINC = 0x8; // source incrementing burst The source address, pointed by GPDMA_CxSAR, is kept constant after a burst beat/single transfer or is incremented by the offset value corresponding to a contiguous data after a burst beat/single transfer.
    typedef bit_field_t<4, 0x3f> GPDMA_C1TR1_SBL_1; // source burst length minus 1, between 0 and 63 The burst length unit is one data named beat within a burst. If SBL_1[5:0]=0, the burst can be named as single. Each data/beat has a width defined by the destination data width SDW_LOG2[1:0]. Note: If a burst transfer crossed a 1-Kbyte address boundary on a AHB transfer, the GPDMA modifies and shortens the programmed burst into singles or bursts of lower length, to be compliant with the AHB protocol. If a burst transfer is of length greater than the FIFO size of the channel x, the GPDMA modifies and shortens the programmed burst into singles or bursts of lower length, to be compliant with the FIFO size. Transfer performance is lower, with GPDMA re-arbitration between effective and lower bursts/singles, but the data integrity is guaranteed.
    typedef bit_field_t<11, 0x3> GPDMA_C1TR1_PAM; // padding/alignment mode If DDW_LOG2[1:0] = SDW_LOG2[1:0]: if the data width of a burst destination transfer is equal to the data width of a burst source transfer, these bits are ignored. Else: - Case 1: If destination data width &gt; source data width 1x: successive source data are FIFO queued and packed at the destination data width, in a left (LSB) to right (MSB) order (named little endian), before a destination transfer - Case 2: If destination data width &lt; source data width 1x: source data is FIFO queued and unpacked at the destination data width, to be transferred in a left (LSB) to right (MSB) order (named little endian) to the destination Note:
    static constexpr uint32_t GPDMA_C1TR1_SBX = 0x2000; // source byte exchange within the unaligned half-word of each source word If the source data width is shorter than a word, this bit is ignored. If the source data width is a word:
    static constexpr uint32_t GPDMA_C1TR1_SAP = 0x4000; // source allocated port This bit is used to allocate the master port for the source transfer Note: This bit must be written when EN=0. This bit is read-only when EN=1.
    static constexpr uint32_t GPDMA_C1TR1_SSEC = 0x8000; // security attribute of the GPDMA transfer from the source If GPDMA_SECCFGR.SECx=1 and the access is secure: This is a secure register bit. This bit can only be read by a secure software. This bit must be written by a secure software when GPDMA_SECCFGR.SECx=1. A secure write is ignored when GPDMA_SECCFGR.SECx=0. When GPDMA_SECCFGR.SECx is de-asserted, this SSEC bit is also de-asserted by hardware (on a secure reconfiguration of the channel as non-secure), and the GPDMA transfer from the source is non-secure.
    typedef bit_field_t<16, 0x3> GPDMA_C1TR1_DDW_LOG2; // binary logarithm of the destination data width of a burst, in bytes Note: Setting a 8-byte data width causes a user setting error to be reported and none transfer is issued. A destination burst transfer must have an aligned address with its data width (start address GPDMA_CxDAR[2:0] and address offset GPDMA_CxTR3.DAO[2:0], versus DDW_LOG2[1:0]). Otherwise a user setting error is reported and no transfer is issued.
    static constexpr uint32_t GPDMA_C1TR1_DINC = 0x80000; // destination incrementing burst The destination address, pointed by GPDMA_CxDAR, is kept constant after a burst beat/single transfer, or is incremented by the offset value corresponding to a contiguous data after a burst beat/single transfer.
    typedef bit_field_t<20, 0x3f> GPDMA_C1TR1_DBL_1; // destination burst length minus 1, between 0 and 63 The burst length unit is one data named beat within a burst. If DBL_1[5:0]=0, the burst can be named as single. Each data/beat has a width defined by the destination data width DDW_LOG2[1:0]. Note: If a burst transfer crossed a 1-Kbyte address boundary on a AHB transfer, the GPDMA modifies and shortens the programmed burst into singles or bursts of lower length, to be compliant with the AHB protocol. If a burst transfer is of length greater than the FIFO size of the channel x, the GPDMA modifies and shortens the programmed burst into singles or bursts of lower length, to be compliant with the FIFO size. Transfer performance is lower, with GPDMA re-arbitration between effective and lower bursts/singles, but the data integrity is guaranteed.
    static constexpr uint32_t GPDMA_C1TR1_DBX = 0x4000000; // destination byte exchange If the destination data size is a byte, this bit is ignored. If the destination data size is not a byte:
    static constexpr uint32_t GPDMA_C1TR1_DHX = 0x8000000; // destination half-word exchange If the destination data size is shorter than a word, this bit is ignored. If the destination data size is a word:
    static constexpr uint32_t GPDMA_C1TR1_DAP = 0x40000000; // destination allocated port This bit is used to allocate the master port for the destination transfer Note: This bit must be written when EN=0. This bit is read-only when EN=1.
    static constexpr uint32_t GPDMA_C1TR1_DSEC = 0x80000000; // security attribute of the GPDMA transfer to the destination If GPDMA_SECCFGR.SECx=1 and the access is secure: This is a secure register bit. This bit can only be read by a secure software. This bit must be written by a secure software when GPDMA_SECCFGR.SECx=1. A secure write is ignored when GPDMA_SECCFGR.SECx=0. When GPDMA_SECCFGR.SECx is de-asserted, this DSEC bit is also de-asserted by hardware (on a secure reconfiguration of the channel as non-secure), and the GPDMA transfer to the destination is non-secure.

    static constexpr uint32_t GPDMA_C1TR2_RESET_VALUE = 0x0; // Reset value
    typedef bit_field_t<0, 0x7f> GPDMA_C1TR2_REQSEL; // GPDMA hardware request selection These bits are ignored if channel x is activated (GPDMA_CxCR.EN asserted) with SWREQ=1 (software request for a memory-to-memory transfer). Else, the selected hardware request is internally taken into account as per . The user must not assign a same input hardware request (same REQSEL[6:0] value) to different active GPDMA channels (GPDMA_CxCR.EN=1 and GPDMA_CxTR2.SWREQ=0 for these channels). GPDMA is not intended to hardware support the case of simultaneous enabled channels incorrectly configured with a same hardware peripheral request signal, and there is no user setting error reporting.
    static constexpr uint32_t GPDMA_C1TR2_SWREQ = 0x200; // software request This bit is internally taken into account when GPDMA_CxCR.EN is asserted.
    static constexpr uint32_t GPDMA_C1TR2_DREQ = 0x400; // destination hardware request This bit is ignored if channel x is activated (GPDMA_CxCR.EN asserted) with SWREQ=1 (software request for a memory-to-memory transfer). Else: Note:
    static constexpr uint32_t GPDMA_C1TR2_BREQ = 0x800; // Block hardware request If the channel x is activated (GPDMA_CxCR.EN asserted) with SWREQ=1 (software request for a memory-to-memory transfer), this bit is ignored. Else:
    typedef bit_field_t<14, 0x3> GPDMA_C1TR2_TRIGM; // trigger mode These bits define the transfer granularity for its conditioning by the trigger. If the channel x is enabled (GPDMA_CxCR.EN asserted) with TRIGPOL[1:0]=00 or 11, these TRIGM[1:0] bits are ignored. Else, a GPDMA transfer is conditioned by at least one trigger hit: first burst read of a 2D/repeated block transfer is conditioned by one hit trigger. If the peripheral is programmed as a source (DREQ=0) of the LLI data transfer, each programmed burst read is conditioned. If the peripheral is programmed as a destination (DREQ=1) of the LLI data transfer, each programmed burst write is conditioned. The first memory burst read of a (possibly 2D/repeated) block, also named as the first ready FIFO-based source burst, is gated by the occurrence of both the hardware request and the first trigger hit. The GPDMA monitoring of a trigger for channel x is started when the channel is enabled/loaded with a new active trigger configuration: rising or falling edge on a selected trigger (TRIGPOL[1:0]=01 or respectively TRIGPOL[1:0]=10). The monitoring of this trigger is kept active during the triggered and uncompleted (data or link) transfer; and if a new trigger is detected then, this hit is internally memorized to grant the next transfer, as long as the defined rising or falling edge is not modified, and the TRIGSEL[5:0] is not modified, and the channel is enabled. Transferring a next LLIn+1 that updates the GPDMA_CxTR2 with a new value for any of TRIGSEL[5:0] or TRIGPOL[1:0], resets the monitoring, trashing the memorized hit of the formerly defined LLIn trigger. After a first new trigger hitn+1 is memorized, if another second trigger hitn+2 is detected and if the hitn triggered transfer is still not completed, hitn+2 is lost and not memorized.memorized. A trigger overrun flag is reported (GPDMA_CxSR.TOF=1), and an interrupt is generated if enabled (GPDMA_CxCR.TOIE=1). The channel is not automatically disabled by hardware due to a trigger overrun. Note: When the source block size is not a multiple of the source burst size and is a multiple of the source data width, then the last programmed source burst is not completed and is internally shorten to match the block size. In this case, if TRIGM[1:0]=11 and (SWREQ=1 or (SWREQ=0 and DREQ=0)), the shortened burst transfer (by singles or/and by bursts of lower length) is conditioned once by the trigger. When the programmed destination burst is internally shortened by singles or/and by bursts of lower length (versus FIFO size, versus block size, 1-Kbyte boundary address crossing): if the trigger is conditioning the programmed destination burst (if TRIGM[1:0]=11 and SWREQ=0 and DREQ=1), this shortened destination burst transfer is conditioned once by the trigger.
    typedef bit_field_t<16, 0x3f> GPDMA_C1TR2_TRIGSEL; // trigger event input selection These bits select the trigger event input of the GPDMA transfer (as per ), with an active trigger event if TRIGPOL[1:0]00.
    typedef bit_field_t<24, 0x3> GPDMA_C1TR2_TRIGPOL; // trigger event polarity These bits define the polarity of the selected trigger event input defined by TRIGSEL[5:0].
    typedef bit_field_t<30, 0x3> GPDMA_C1TR2_TCEM; // transfer complete event mode These bits define the transfer granularity for the transfer complete and half transfer complete events generation. Note: If the initial LLI0 data transfer is null/void (directly programmed by the internal register file with GPDMA_CxBR1.BNDT[15:0]=0), then neither the complete transfer event nor the half transfer event is generated. Note: If the initial LLI0 data transfer is null/void (directly programmed by the internal register file with GPDMA_CxBR1.BNDT[15:0]=0), then neither the complete transfer event nor the half transfer event is generated. Note: If the initial LLI0 data transfer is null/void (i.e. directly programmed by the internal register file with GPDMA_CxBR1.BNDT[15:0]=0), then the half transfer event is not generated, and the transfer complete event is generated when is completed the loading of the LLI1.

    static constexpr uint32_t GPDMA_C1BR1_RESET_VALUE = 0x0; // Reset value
    typedef bit_field_t<0, 0xffff> GPDMA_C1BR1_BNDT; // block number of data bytes to transfer from the source Block size transferred from the source. When the channel is enabled, this field becomes read-only and is decremented, indicating the remaining number of data items in the current source block to be transferred. BNDT[15:0] is programmed in number of bytes, maximum source block size is 64Kbytes -1. Once the last data transfer is completed (BNDT[15:0]=0): - if GPDMA_CxLLR.UB1=1, this field is updated by the LLI in the memory. - if GPDMA_CxLLR.UB1=0 and if there is at least one non null Uxx update bit, this field is internally restored to the programmed value. - if all GPDMA_CxLLR.Uxx=0 and if GPDMA_CxLLR.LA[15:0]=0, this field is internally restored to the programmed value (infinite/continuous last LLI). - if GPDMA_CxLLR=0, this field is kept as zero following the last LLI data transfer. Note: A non-null source block size must be a multiple of the source data width (BNDT[2:0] versus GPDMA_CxTR1.SDW_LOG2[1:0]). Else a user setting error is reported and no transfer is issued. When configured in packing mode (GPDMA_CxTR1.PAM[1]=1 and destination data width different from source data width), a non-null source block size must be a multiple of the destination data width (BNDT[2:0] versus GPDMA_CxTR1.DDW_LOG2[1:0]). Else a user setting error is reported and no transfer is issued.

    static constexpr uint32_t GPDMA_C1SAR_RESET_VALUE = 0x0; // Reset value
    typedef bit_field_t<0, 0xffffffff> GPDMA_C1SAR_SA; // source address This field is the pointer to the address from which the next data is read. During the channel activity, depending on the source addressing mode (GPDMA_CxTR1.SINC), this field is kept fixed or incremented by the data width (GPDMA_CxTR1.SDW_LOG2[1:0]) after each single source data, reflecting the next address from which data is read. During the channel activity, this address is updated after each completed source burst, consequently to: the programmed source burst; either in fixed addressing mode or in contiguous-data incremented mode. If contiguously incremented (GPDMA_CxTR1.SINC = 1), then the additional address offset value is the programmed burst size, as defined by GPDMA_CxTR1.SBL_1[5:0] and GPDMA_CxTR1.SDW_LOG2[21:0] the additional source incremented/decremented offset value as programmed by GPDMA_CxBR1.SDEC and GPDMA_CxTR3.SAO[12:0] once/if completed source block transfer, for a channel x with 2D addressing capability (x = 12 to 15). additional block repeat source incremented/decremented offset value as programmed by GPDMA_CxBR1.BRSDEC and GPDMA_CxBR2.BRSAO[15:0] In linked-list mode, after a LLI data transfer is completed, this register is automatically updated by GPDMA from the memory, provided the LLI is set with GPDMA_CxLLR.USA=1. Note: A source address must be aligned with the programmed data width of a source single (SA[2:0] versus GPDMA_CxTR1.SDW_LOG2[1:0]). Else, a user setting error is reported and no transfer is issued. When the source block size is not a multiple of the source burst size and is a multiple of the source data width, the last programmed source burst is not completed and is internally shorten to match the block size. In this case, the additional GPDMA_CxTR3.SAO[12:0] is not applied.

    static constexpr uint32_t GPDMA_C1DAR_RESET_VALUE = 0x0; // Reset value
    typedef bit_field_t<0, 0xffffffff> GPDMA_C1DAR_DA; // destination address This field is the pointer to the address from which the next data is written. During the channel activity, depending on the destination addressing mode (GPDMA_CxTR1.DINC), this field is kept fixed or incremented by the data width (GPDMA_CxTR1.DDW_LOG2[21:0]) after each single destination data, reflecting the next address from which data is written. During the channel activity, this address is updated after each completed destination burst, consequently to: the programmed destination burst; either in fixed addressing mode or in contiguous-data incremented mode. If contiguously incremented (GPDMA_CxTR1.DINC = 1), then the additional address offset value is the programmed burst size, as defined by GPDMA_CxTR1.DBL_1[5:0] and GPDMA_CxTR1.DDW_LOG2[1:0] the additional destination incremented/decremented offset value as programmed by GPDMA_CxBR1.DDEC and GPDMA_CxTR3.DAO[12:0] once/if completed destination block transfer, for a channel x with 2D addressing capability (x=12to15), the additional block repeat destination incremented/decremented offset value as programmed by GPDMA_CxBR1.BRDDEC and GPDMA_CxBR2.BRDAO[15:0] In linked-list mode, after a LLI data transfer is completed, this register is automatically updated by the GPDMA from the memory, provided the LLI is set with GPDMA_CxLLR.UDA=1. Note: A destination address must be aligned with the programmed data width of a destination burst (DA[2:0] versus GPDMA_CxTR1.DDW_LOG2[1:0]). Else, a user setting error is reported and no transfer is issued.


    static constexpr uint32_t GPDMA_C1LLR_RESET_VALUE = 0x0; // Reset value
    typedef bit_field_t<2, 0x3fff> GPDMA_C1LLR_LA; // pointer (16-bit low-significant address) to the next linked-list data structure If UT1=UT2=UB1=USA=UDA=ULL=0 and if LA[15:20]=0, the current LLI is the last one. The channel transfer is completed without any update of the linked-list GPDMA register file. Else, this field is the pointer to the memory address offset from which the next linked-list data structure is automatically fetched from, once the data transfer is completed, in order to conditionally update the linked-list GPDMA internal register file (GPDMA_CxCTR1, GPDMA_CxTR2, GPDMA_CxBR1, GPDMA_CxSAR, GPDMA_CxDAR and GPDMA_CxLLR). Note: The user must program the pointer to be 32-bit aligned. The two low-significant bits are write ignored.
    static constexpr uint32_t GPDMA_C1LLR_ULL = 0x10000; // Update GPDMA_CxLLR register from memory This bit is used to control the update of GPDMA_CxLLR from the memory during the link transfer.
    static constexpr uint32_t GPDMA_C1LLR_UDA = 0x8000000; // Update GPDMA_CxDAR register from memory This bit is used to control the update of GPDMA_CxDAR from the memory during the link transfer.
    static constexpr uint32_t GPDMA_C1LLR_USA = 0x10000000; // update GPDMA_CxSAR from memory This bit controls the update of GPDMA_CxSAR from the memory during the link transfer.
    static constexpr uint32_t GPDMA_C1LLR_UB1 = 0x20000000; // Update GPDMA_CxBR1 from memory This bit controls the update of GPDMA_CxBR1 from the memory during the link transfer. If UB1=0 and if GPDMA_CxLLR0, the linked-list is not completed. GPDMA_CxBR1.BNDT[15:0] is then restored to the programmed value after data transfer is completed and before the link transfer.
    static constexpr uint32_t GPDMA_C1LLR_UT2 = 0x40000000; // Update GPDMA_CxTR2 from memory This bit controls the update of GPDMA_CxTR2 from the memory during the link transfer.
    static constexpr uint32_t GPDMA_C1LLR_UT1 = 0x80000000; // Update GPDMA_CxTR1 from memory This bit controls the update of GPDMA_CxTR1 from the memory during the link transfer.

    static constexpr uint32_t GPDMA_C2LBAR_RESET_VALUE = 0x0; // Reset value
    typedef bit_field_t<16, 0xffff> GPDMA_C2LBAR_LBA; // linked-list base address of GPDMA channel x


    static constexpr uint32_t GPDMA_C2FCR_RESET_VALUE = 0x0; // Reset value
    static constexpr uint32_t GPDMA_C2FCR_TCF = 0x100; // transfer complete flag clear
    static constexpr uint32_t GPDMA_C2FCR_HTF = 0x200; // half transfer flag clear
    static constexpr uint32_t GPDMA_C2FCR_DTEF = 0x400; // data transfer error flag clear
    static constexpr uint32_t GPDMA_C2FCR_ULEF = 0x800; // update link transfer error flag clear
    static constexpr uint32_t GPDMA_C2FCR_USEF = 0x1000; // user setting error flag clear
    static constexpr uint32_t GPDMA_C2FCR_SUSPF = 0x2000; // completed suspension flag clear
    static constexpr uint32_t GPDMA_C2FCR_TOF = 0x4000; // trigger overrun flag clear

    static constexpr uint32_t GPDMA_C2SR_RESET_VALUE = 0x1; // Reset value
    static constexpr uint32_t GPDMA_C2SR_IDLEF = 0x1; // idle flag This idle flag is de-asserted by hardware when the channel is enabled (GPDMA_CxCR.EN=1) with a valid channel configuration (no USEF to be immediately reported). This idle flag is asserted after hard reset or by hardware when the channel is back in idle state (in suspended or disabled state).
    static constexpr uint32_t GPDMA_C2SR_TCF = 0x100; // transfer complete flag A transfer complete event is either a block transfer complete, a 2D/repeated block transfer complete, a LLI transfer complete including the upload of the next LLI if any, or the full linked-list completion, depending on the transfer complete event mode (GPDMA_CxTR2.TCEM[1:0]).
    static constexpr uint32_t GPDMA_C2SR_HTF = 0x200; // half transfer flag An half transfer event is either an half block transfer or an half 2D/repeated block transfer, depending on the transfer complete event mode (GPDMA_CxTR2.TCEM[1:0]). An half block transfer occurs when half of the bytes of the source block size (rounded up integer of GPDMA_CxBR1.BNDT[15:0]/2) has been transferred to the destination. An half 2D/repeated block transfer occurs when half of the repeated blocks (rounded up integer of (GPDMA_CxBR1.BRC[10:0]+1)/2)) has been transferred to the destination.
    static constexpr uint32_t GPDMA_C2SR_DTEF = 0x400; // data transfer error flag
    static constexpr uint32_t GPDMA_C2SR_ULEF = 0x800; // update link transfer error flag
    static constexpr uint32_t GPDMA_C2SR_USEF = 0x1000; // user setting error flag
    static constexpr uint32_t GPDMA_C2SR_SUSPF = 0x2000; // completed suspension flag
    static constexpr uint32_t GPDMA_C2SR_TOF = 0x4000; // trigger overrun flag
    typedef bit_field_t<16, 0xff> GPDMA_C2SR_FIFOL; // monitored FIFO level Number of available write beats in the FIFO, in units of the programmed destination data width (see GPDMA_CxTR1.DDW_LOG2[1:0], in units of bytes, half-words, or words). Note: After having suspended an active transfer, the user may need to read FIFOL[7:0], additionally to GPDMA_CxBR1.BDNT[15:0] and GPDMA_CxBR1.BRC[10:0], to know how many data have been transferred to the destination. Before reading, the user may wait for the transfer to be suspended (GPDMA_CxSR.SUSPF=1).

    static constexpr uint32_t GPDMA_C2CR_RESET_VALUE = 0x0; // Reset value
    static constexpr uint32_t GPDMA_C2CR_EN = 0x1; // enable Writing 1 into the field RESET (bit 1) causes the hardware to de-assert this bit, whatever is written into this bit 0. Else: this bit is de-asserted by hardware when there is a transfer error (master bus error or user setting error) or when there is a channel transfer complete (channel ready to be configured, e.g. if LSM=1 at the end of a single execution of the LLI). Else, this bit can be asserted by software. Writing 0 into this EN bit is ignored.
    static constexpr uint32_t GPDMA_C2CR_RESET = 0x2; // reset This bit is write only. Writing 0 has no impact. Writing 1 implies the reset of the following: the FIFO, the channel internal state, SUSP and EN bits (whatever is written receptively in bit 2 and bit 0). The reset is effective when the channel is in steady state, meaning one of the following: - active channel in suspended state (GPDMA_CxSR.SUSPF=1 and GPDMA_CxSR.IDLEF=GPDMA_CxCR.EN=1) - channel in disabled state (GPDMA_CxSR.IDLEF=1 and GPDMA_CxCR.EN=0). After writing a RESET, to continue using this channel, the user must explicitly reconfigure the channel including the hardware-modified configuration registers (GPDMA_CxBR1, GPDMA_CxSAR and GPDMA_CxDAR) before enabling again the channel (see the programming sequence in ).
    static constexpr uint32_t GPDMA_C2CR_SUSP = 0x4; // suspend Writing 1 into the field RESET (bit 1) causes the hardware to de-assert this bit, whatever is written into this bit 2. Else: Software must write 1 in order to suspend an active channel i.e. a channel with an on-going GPDMA transfer over its master ports. The software must write 0 in order to resume a suspended channel, following the programming sequence detailed in .
    static constexpr uint32_t GPDMA_C2CR_TCIE = 0x100; // transfer complete interrupt enable
    static constexpr uint32_t GPDMA_C2CR_HTIE = 0x200; // half transfer complete interrupt enable
    static constexpr uint32_t GPDMA_C2CR_DTEIE = 0x400; // data transfer error interrupt enable
    static constexpr uint32_t GPDMA_C2CR_ULEIE = 0x800; // update link transfer error interrupt enable
    static constexpr uint32_t GPDMA_C2CR_USEIE = 0x1000; // user setting error interrupt enable
    static constexpr uint32_t GPDMA_C2CR_SUSPIE = 0x2000; // completed suspension interrupt enable
    static constexpr uint32_t GPDMA_C2CR_TOIE = 0x4000; // trigger overrun interrupt enable
    static constexpr uint32_t GPDMA_C2CR_LSM = 0x10000; // Link step mode First the (possible 1D/repeated) block transfer is executed as defined by the current internal register file until GPDMA_CxBR1.BNDT[15:0]=0 and GPDMA_CxBR1.BRC[10:0]=0 if present. Secondly the next linked-list data structure is conditionally uploaded from memory as defined by GPDMA_CxLLR. Then channel execution is completed. Note: This bit must be written when EN=0. This bit is read-only when EN=1.
    static constexpr uint32_t GPDMA_C2CR_LAP = 0x20000; // linked-list allocated port This bit is used to allocate the master port for the update of the GPDMA linked-list registers from the memory. Note: This bit must be written when EN=0. This bit is read-only when EN=1.
    typedef bit_field_t<22, 0x3> GPDMA_C2CR_PRIO; // priority level of the channel x GPDMA transfer versus others Note: This bit must be written when EN=0. This bit is read-only when EN=1.


    static constexpr uint32_t GPDMA_C2TR1_RESET_VALUE = 0x0; // Reset value
    typedef bit_field_t<0, 0x3> GPDMA_C2TR1_SDW_LOG2; // binary logarithm of the source data width of a burst in bytes Note: Setting a 8-byte data width causes a user setting error to be reported and no transfer is issued. A source block size must be a multiple of the source data width (GPDMA_CxBR1.BNDT[2:0] versus SDW_LOG2[1:0]). Otherwise, a user setting error is reported and no transfer is issued. A source single transfer must have an aligned address with its data width (start address GPDMA_CxSAR[2:0] versus SDW_LOG2[1:0]). Otherwise, a user setting error is reported and none transfer is issued.
    static constexpr uint32_t GPDMA_C2TR1_SINC = 0x8; // source incrementing burst The source address, pointed by GPDMA_CxSAR, is kept constant after a burst beat/single transfer or is incremented by the offset value corresponding to a contiguous data after a burst beat/single transfer.
    typedef bit_field_t<4, 0x3f> GPDMA_C2TR1_SBL_1; // source burst length minus 1, between 0 and 63 The burst length unit is one data named beat within a burst. If SBL_1[5:0]=0, the burst can be named as single. Each data/beat has a width defined by the destination data width SDW_LOG2[1:0]. Note: If a burst transfer crossed a 1-Kbyte address boundary on a AHB transfer, the GPDMA modifies and shortens the programmed burst into singles or bursts of lower length, to be compliant with the AHB protocol. If a burst transfer is of length greater than the FIFO size of the channel x, the GPDMA modifies and shortens the programmed burst into singles or bursts of lower length, to be compliant with the FIFO size. Transfer performance is lower, with GPDMA re-arbitration between effective and lower bursts/singles, but the data integrity is guaranteed.
    typedef bit_field_t<11, 0x3> GPDMA_C2TR1_PAM; // padding/alignment mode If DDW_LOG2[1:0] = SDW_LOG2[1:0]: if the data width of a burst destination transfer is equal to the data width of a burst source transfer, these bits are ignored. Else: - Case 1: If destination data width &gt; source data width 1x: successive source data are FIFO queued and packed at the destination data width, in a left (LSB) to right (MSB) order (named little endian), before a destination transfer - Case 2: If destination data width &lt; source data width 1x: source data is FIFO queued and unpacked at the destination data width, to be transferred in a left (LSB) to right (MSB) order (named little endian) to the destination Note:
    static constexpr uint32_t GPDMA_C2TR1_SBX = 0x2000; // source byte exchange within the unaligned half-word of each source word If the source data width is shorter than a word, this bit is ignored. If the source data width is a word:
    static constexpr uint32_t GPDMA_C2TR1_SAP = 0x4000; // source allocated port This bit is used to allocate the master port for the source transfer Note: This bit must be written when EN=0. This bit is read-only when EN=1.
    static constexpr uint32_t GPDMA_C2TR1_SSEC = 0x8000; // security attribute of the GPDMA transfer from the source If GPDMA_SECCFGR.SECx=1 and the access is secure: This is a secure register bit. This bit can only be read by a secure software. This bit must be written by a secure software when GPDMA_SECCFGR.SECx=1. A secure write is ignored when GPDMA_SECCFGR.SECx=0. When GPDMA_SECCFGR.SECx is de-asserted, this SSEC bit is also de-asserted by hardware (on a secure reconfiguration of the channel as non-secure), and the GPDMA transfer from the source is non-secure.
    typedef bit_field_t<16, 0x3> GPDMA_C2TR1_DDW_LOG2; // binary logarithm of the destination data width of a burst, in bytes Note: Setting a 8-byte data width causes a user setting error to be reported and none transfer is issued. A destination burst transfer must have an aligned address with its data width (start address GPDMA_CxDAR[2:0] and address offset GPDMA_CxTR3.DAO[2:0], versus DDW_LOG2[1:0]). Otherwise a user setting error is reported and no transfer is issued.
    static constexpr uint32_t GPDMA_C2TR1_DINC = 0x80000; // destination incrementing burst The destination address, pointed by GPDMA_CxDAR, is kept constant after a burst beat/single transfer, or is incremented by the offset value corresponding to a contiguous data after a burst beat/single transfer.
    typedef bit_field_t<20, 0x3f> GPDMA_C2TR1_DBL_1; // destination burst length minus 1, between 0 and 63 The burst length unit is one data named beat within a burst. If DBL_1[5:0]=0, the burst can be named as single. Each data/beat has a width defined by the destination data width DDW_LOG2[1:0]. Note: If a burst transfer crossed a 1-Kbyte address boundary on a AHB transfer, the GPDMA modifies and shortens the programmed burst into singles or bursts of lower length, to be compliant with the AHB protocol. If a burst transfer is of length greater than the FIFO size of the channel x, the GPDMA modifies and shortens the programmed burst into singles or bursts of lower length, to be compliant with the FIFO size. Transfer performance is lower, with GPDMA re-arbitration between effective and lower bursts/singles, but the data integrity is guaranteed.
    static constexpr uint32_t GPDMA_C2TR1_DBX = 0x4000000; // destination byte exchange If the destination data size is a byte, this bit is ignored. If the destination data size is not a byte:
    static constexpr uint32_t GPDMA_C2TR1_DHX = 0x8000000; // destination half-word exchange If the destination data size is shorter than a word, this bit is ignored. If the destination data size is a word:
    static constexpr uint32_t GPDMA_C2TR1_DAP = 0x40000000; // destination allocated port This bit is used to allocate the master port for the destination transfer Note: This bit must be written when EN=0. This bit is read-only when EN=1.
    static constexpr uint32_t GPDMA_C2TR1_DSEC = 0x80000000; // security attribute of the GPDMA transfer to the destination If GPDMA_SECCFGR.SECx=1 and the access is secure: This is a secure register bit. This bit can only be read by a secure software. This bit must be written by a secure software when GPDMA_SECCFGR.SECx=1. A secure write is ignored when GPDMA_SECCFGR.SECx=0. When GPDMA_SECCFGR.SECx is de-asserted, this DSEC bit is also de-asserted by hardware (on a secure reconfiguration of the channel as non-secure), and the GPDMA transfer to the destination is non-secure.

    static constexpr uint32_t GPDMA_C2TR2_RESET_VALUE = 0x0; // Reset value
    typedef bit_field_t<0, 0x7f> GPDMA_C2TR2_REQSEL; // GPDMA hardware request selection These bits are ignored if channel x is activated (GPDMA_CxCR.EN asserted) with SWREQ=1 (software request for a memory-to-memory transfer). Else, the selected hardware request is internally taken into account as per . The user must not assign a same input hardware request (same REQSEL[6:0] value) to different active GPDMA channels (GPDMA_CxCR.EN=1 and GPDMA_CxTR2.SWREQ=0 for these channels). GPDMA is not intended to hardware support the case of simultaneous enabled channels incorrectly configured with a same hardware peripheral request signal, and there is no user setting error reporting.
    static constexpr uint32_t GPDMA_C2TR2_SWREQ = 0x200; // software request This bit is internally taken into account when GPDMA_CxCR.EN is asserted.
    static constexpr uint32_t GPDMA_C2TR2_DREQ = 0x400; // destination hardware request This bit is ignored if channel x is activated (GPDMA_CxCR.EN asserted) with SWREQ=1 (software request for a memory-to-memory transfer). Else: Note:
    static constexpr uint32_t GPDMA_C2TR2_BREQ = 0x800; // Block hardware request If the channel x is activated (GPDMA_CxCR.EN asserted) with SWREQ=1 (software request for a memory-to-memory transfer), this bit is ignored. Else:
    typedef bit_field_t<14, 0x3> GPDMA_C2TR2_TRIGM; // trigger mode These bits define the transfer granularity for its conditioning by the trigger. If the channel x is enabled (GPDMA_CxCR.EN asserted) with TRIGPOL[1:0]=00 or 11, these TRIGM[1:0] bits are ignored. Else, a GPDMA transfer is conditioned by at least one trigger hit: first burst read of a 2D/repeated block transfer is conditioned by one hit trigger. If the peripheral is programmed as a source (DREQ=0) of the LLI data transfer, each programmed burst read is conditioned. If the peripheral is programmed as a destination (DREQ=1) of the LLI data transfer, each programmed burst write is conditioned. The first memory burst read of a (possibly 2D/repeated) block, also named as the first ready FIFO-based source burst, is gated by the occurrence of both the hardware request and the first trigger hit. The GPDMA monitoring of a trigger for channel x is started when the channel is enabled/loaded with a new active trigger configuration: rising or falling edge on a selected trigger (TRIGPOL[1:0]=01 or respectively TRIGPOL[1:0]=10). The monitoring of this trigger is kept active during the triggered and uncompleted (data or link) transfer; and if a new trigger is detected then, this hit is internally memorized to grant the next transfer, as long as the defined rising or falling edge is not modified, and the TRIGSEL[5:0] is not modified, and the channel is enabled. Transferring a next LLIn+1 that updates the GPDMA_CxTR2 with a new value for any of TRIGSEL[5:0] or TRIGPOL[1:0], resets the monitoring, trashing the memorized hit of the formerly defined LLIn trigger. After a first new trigger hitn+1 is memorized, if another second trigger hitn+2 is detected and if the hitn triggered transfer is still not completed, hitn+2 is lost and not memorized.memorized. A trigger overrun flag is reported (GPDMA_CxSR.TOF=1), and an interrupt is generated if enabled (GPDMA_CxCR.TOIE=1). The channel is not automatically disabled by hardware due to a trigger overrun. Note: When the source block size is not a multiple of the source burst size and is a multiple of the source data width, then the last programmed source burst is not completed and is internally shorten to match the block size. In this case, if TRIGM[1:0]=11 and (SWREQ=1 or (SWREQ=0 and DREQ=0)), the shortened burst transfer (by singles or/and by bursts of lower length) is conditioned once by the trigger. When the programmed destination burst is internally shortened by singles or/and by bursts of lower length (versus FIFO size, versus block size, 1-Kbyte boundary address crossing): if the trigger is conditioning the programmed destination burst (if TRIGM[1:0]=11 and SWREQ=0 and DREQ=1), this shortened destination burst transfer is conditioned once by the trigger.
    typedef bit_field_t<16, 0x3f> GPDMA_C2TR2_TRIGSEL; // trigger event input selection These bits select the trigger event input of the GPDMA transfer (as per ), with an active trigger event if TRIGPOL[1:0]00.
    typedef bit_field_t<24, 0x3> GPDMA_C2TR2_TRIGPOL; // trigger event polarity These bits define the polarity of the selected trigger event input defined by TRIGSEL[5:0].
    typedef bit_field_t<30, 0x3> GPDMA_C2TR2_TCEM; // transfer complete event mode These bits define the transfer granularity for the transfer complete and half transfer complete events generation. Note: If the initial LLI0 data transfer is null/void (directly programmed by the internal register file with GPDMA_CxBR1.BNDT[15:0]=0), then neither the complete transfer event nor the half transfer event is generated. Note: If the initial LLI0 data transfer is null/void (directly programmed by the internal register file with GPDMA_CxBR1.BNDT[15:0]=0), then neither the complete transfer event nor the half transfer event is generated. Note: If the initial LLI0 data transfer is null/void (i.e. directly programmed by the internal register file with GPDMA_CxBR1.BNDT[15:0]=0), then the half transfer event is not generated, and the transfer complete event is generated when is completed the loading of the LLI1.

    static constexpr uint32_t GPDMA_C2BR1_RESET_VALUE = 0x0; // Reset value
    typedef bit_field_t<0, 0xffff> GPDMA_C2BR1_BNDT; // block number of data bytes to transfer from the source Block size transferred from the source. When the channel is enabled, this field becomes read-only and is decremented, indicating the remaining number of data items in the current source block to be transferred. BNDT[15:0] is programmed in number of bytes, maximum source block size is 64Kbytes -1. Once the last data transfer is completed (BNDT[15:0]=0): - if GPDMA_CxLLR.UB1=1, this field is updated by the LLI in the memory. - if GPDMA_CxLLR.UB1=0 and if there is at least one non null Uxx update bit, this field is internally restored to the programmed value. - if all GPDMA_CxLLR.Uxx=0 and if GPDMA_CxLLR.LA[15:0]=0, this field is internally restored to the programmed value (infinite/continuous last LLI). - if GPDMA_CxLLR=0, this field is kept as zero following the last LLI data transfer. Note: A non-null source block size must be a multiple of the source data width (BNDT[2:0] versus GPDMA_CxTR1.SDW_LOG2[1:0]). Else a user setting error is reported and no transfer is issued. When configured in packing mode (GPDMA_CxTR1.PAM[1]=1 and destination data width different from source data width), a non-null source block size must be a multiple of the destination data width (BNDT[2:0] versus GPDMA_CxTR1.DDW_LOG2[1:0]). Else a user setting error is reported and no transfer is issued.

    static constexpr uint32_t GPDMA_C2SAR_RESET_VALUE = 0x0; // Reset value
    typedef bit_field_t<0, 0xffffffff> GPDMA_C2SAR_SA; // source address This field is the pointer to the address from which the next data is read. During the channel activity, depending on the source addressing mode (GPDMA_CxTR1.SINC), this field is kept fixed or incremented by the data width (GPDMA_CxTR1.SDW_LOG2[1:0]) after each single source data, reflecting the next address from which data is read. During the channel activity, this address is updated after each completed source burst, consequently to: the programmed source burst; either in fixed addressing mode or in contiguous-data incremented mode. If contiguously incremented (GPDMA_CxTR1.SINC = 1), then the additional address offset value is the programmed burst size, as defined by GPDMA_CxTR1.SBL_1[5:0] and GPDMA_CxTR1.SDW_LOG2[21:0] the additional source incremented/decremented offset value as programmed by GPDMA_CxBR1.SDEC and GPDMA_CxTR3.SAO[12:0] once/if completed source block transfer, for a channel x with 2D addressing capability (x = 12 to 15). additional block repeat source incremented/decremented offset value as programmed by GPDMA_CxBR1.BRSDEC and GPDMA_CxBR2.BRSAO[15:0] In linked-list mode, after a LLI data transfer is completed, this register is automatically updated by GPDMA from the memory, provided the LLI is set with GPDMA_CxLLR.USA=1. Note: A source address must be aligned with the programmed data width of a source single (SA[2:0] versus GPDMA_CxTR1.SDW_LOG2[1:0]). Else, a user setting error is reported and no transfer is issued. When the source block size is not a multiple of the source burst size and is a multiple of the source data width, the last programmed source burst is not completed and is internally shorten to match the block size. In this case, the additional GPDMA_CxTR3.SAO[12:0] is not applied.

    static constexpr uint32_t GPDMA_C2DAR_RESET_VALUE = 0x0; // Reset value
    typedef bit_field_t<0, 0xffffffff> GPDMA_C2DAR_DA; // destination address This field is the pointer to the address from which the next data is written. During the channel activity, depending on the destination addressing mode (GPDMA_CxTR1.DINC), this field is kept fixed or incremented by the data width (GPDMA_CxTR1.DDW_LOG2[21:0]) after each single destination data, reflecting the next address from which data is written. During the channel activity, this address is updated after each completed destination burst, consequently to: the programmed destination burst; either in fixed addressing mode or in contiguous-data incremented mode. If contiguously incremented (GPDMA_CxTR1.DINC = 1), then the additional address offset value is the programmed burst size, as defined by GPDMA_CxTR1.DBL_1[5:0] and GPDMA_CxTR1.DDW_LOG2[1:0] the additional destination incremented/decremented offset value as programmed by GPDMA_CxBR1.DDEC and GPDMA_CxTR3.DAO[12:0] once/if completed destination block transfer, for a channel x with 2D addressing capability (x=12to15), the additional block repeat destination incremented/decremented offset value as programmed by GPDMA_CxBR1.BRDDEC and GPDMA_CxBR2.BRDAO[15:0] In linked-list mode, after a LLI data transfer is completed, this register is automatically updated by the GPDMA from the memory, provided the LLI is set with GPDMA_CxLLR.UDA=1. Note: A destination address must be aligned with the programmed data width of a destination burst (DA[2:0] versus GPDMA_CxTR1.DDW_LOG2[1:0]). Else, a user setting error is reported and no transfer is issued.


    static constexpr uint32_t GPDMA_C2LLR_RESET_VALUE = 0x0; // Reset value
    typedef bit_field_t<2, 0x3fff> GPDMA_C2LLR_LA; // pointer (16-bit low-significant address) to the next linked-list data structure If UT1=UT2=UB1=USA=UDA=ULL=0 and if LA[15:20]=0, the current LLI is the last one. The channel transfer is completed without any update of the linked-list GPDMA register file. Else, this field is the pointer to the memory address offset from which the next linked-list data structure is automatically fetched from, once the data transfer is completed, in order to conditionally update the linked-list GPDMA internal register file (GPDMA_CxCTR1, GPDMA_CxTR2, GPDMA_CxBR1, GPDMA_CxSAR, GPDMA_CxDAR and GPDMA_CxLLR). Note: The user must program the pointer to be 32-bit aligned. The two low-significant bits are write ignored.
    static constexpr uint32_t GPDMA_C2LLR_ULL = 0x10000; // Update GPDMA_CxLLR register from memory This bit is used to control the update of GPDMA_CxLLR from the memory during the link transfer.
    static constexpr uint32_t GPDMA_C2LLR_UDA = 0x8000000; // Update GPDMA_CxDAR register from memory This bit is used to control the update of GPDMA_CxDAR from the memory during the link transfer.
    static constexpr uint32_t GPDMA_C2LLR_USA = 0x10000000; // update GPDMA_CxSAR from memory This bit controls the update of GPDMA_CxSAR from the memory during the link transfer.
    static constexpr uint32_t GPDMA_C2LLR_UB1 = 0x20000000; // Update GPDMA_CxBR1 from memory This bit controls the update of GPDMA_CxBR1 from the memory during the link transfer. If UB1=0 and if GPDMA_CxLLR0, the linked-list is not completed. GPDMA_CxBR1.BNDT[15:0] is then restored to the programmed value after data transfer is completed and before the link transfer.
    static constexpr uint32_t GPDMA_C2LLR_UT2 = 0x40000000; // Update GPDMA_CxTR2 from memory This bit controls the update of GPDMA_CxTR2 from the memory during the link transfer.
    static constexpr uint32_t GPDMA_C2LLR_UT1 = 0x80000000; // Update GPDMA_CxTR1 from memory This bit controls the update of GPDMA_CxTR1 from the memory during the link transfer.

    static constexpr uint32_t GPDMA_C3LBAR_RESET_VALUE = 0x0; // Reset value
    typedef bit_field_t<16, 0xffff> GPDMA_C3LBAR_LBA; // linked-list base address of GPDMA channel x


    static constexpr uint32_t GPDMA_C3FCR_RESET_VALUE = 0x0; // Reset value
    static constexpr uint32_t GPDMA_C3FCR_TCF = 0x100; // transfer complete flag clear
    static constexpr uint32_t GPDMA_C3FCR_HTF = 0x200; // half transfer flag clear
    static constexpr uint32_t GPDMA_C3FCR_DTEF = 0x400; // data transfer error flag clear
    static constexpr uint32_t GPDMA_C3FCR_ULEF = 0x800; // update link transfer error flag clear
    static constexpr uint32_t GPDMA_C3FCR_USEF = 0x1000; // user setting error flag clear
    static constexpr uint32_t GPDMA_C3FCR_SUSPF = 0x2000; // completed suspension flag clear
    static constexpr uint32_t GPDMA_C3FCR_TOF = 0x4000; // trigger overrun flag clear

    static constexpr uint32_t GPDMA_C3SR_RESET_VALUE = 0x1; // Reset value
    static constexpr uint32_t GPDMA_C3SR_IDLEF = 0x1; // idle flag This idle flag is de-asserted by hardware when the channel is enabled (GPDMA_CxCR.EN=1) with a valid channel configuration (no USEF to be immediately reported). This idle flag is asserted after hard reset or by hardware when the channel is back in idle state (in suspended or disabled state).
    static constexpr uint32_t GPDMA_C3SR_TCF = 0x100; // transfer complete flag A transfer complete event is either a block transfer complete, a 2D/repeated block transfer complete, a LLI transfer complete including the upload of the next LLI if any, or the full linked-list completion, depending on the transfer complete event mode (GPDMA_CxTR2.TCEM[1:0]).
    static constexpr uint32_t GPDMA_C3SR_HTF = 0x200; // half transfer flag An half transfer event is either an half block transfer or an half 2D/repeated block transfer, depending on the transfer complete event mode (GPDMA_CxTR2.TCEM[1:0]). An half block transfer occurs when half of the bytes of the source block size (rounded up integer of GPDMA_CxBR1.BNDT[15:0]/2) has been transferred to the destination. An half 2D/repeated block transfer occurs when half of the repeated blocks (rounded up integer of (GPDMA_CxBR1.BRC[10:0]+1)/2)) has been transferred to the destination.
    static constexpr uint32_t GPDMA_C3SR_DTEF = 0x400; // data transfer error flag
    static constexpr uint32_t GPDMA_C3SR_ULEF = 0x800; // update link transfer error flag
    static constexpr uint32_t GPDMA_C3SR_USEF = 0x1000; // user setting error flag
    static constexpr uint32_t GPDMA_C3SR_SUSPF = 0x2000; // completed suspension flag
    static constexpr uint32_t GPDMA_C3SR_TOF = 0x4000; // trigger overrun flag
    typedef bit_field_t<16, 0xff> GPDMA_C3SR_FIFOL; // monitored FIFO level Number of available write beats in the FIFO, in units of the programmed destination data width (see GPDMA_CxTR1.DDW_LOG2[1:0], in units of bytes, half-words, or words). Note: After having suspended an active transfer, the user may need to read FIFOL[7:0], additionally to GPDMA_CxBR1.BDNT[15:0] and GPDMA_CxBR1.BRC[10:0], to know how many data have been transferred to the destination. Before reading, the user may wait for the transfer to be suspended (GPDMA_CxSR.SUSPF=1).

    static constexpr uint32_t GPDMA_C3CR_RESET_VALUE = 0x0; // Reset value
    static constexpr uint32_t GPDMA_C3CR_EN = 0x1; // enable Writing 1 into the field RESET (bit 1) causes the hardware to de-assert this bit, whatever is written into this bit 0. Else: this bit is de-asserted by hardware when there is a transfer error (master bus error or user setting error) or when there is a channel transfer complete (channel ready to be configured, e.g. if LSM=1 at the end of a single execution of the LLI). Else, this bit can be asserted by software. Writing 0 into this EN bit is ignored.
    static constexpr uint32_t GPDMA_C3CR_RESET = 0x2; // reset This bit is write only. Writing 0 has no impact. Writing 1 implies the reset of the following: the FIFO, the channel internal state, SUSP and EN bits (whatever is written receptively in bit 2 and bit 0). The reset is effective when the channel is in steady state, meaning one of the following: - active channel in suspended state (GPDMA_CxSR.SUSPF=1 and GPDMA_CxSR.IDLEF=GPDMA_CxCR.EN=1) - channel in disabled state (GPDMA_CxSR.IDLEF=1 and GPDMA_CxCR.EN=0). After writing a RESET, to continue using this channel, the user must explicitly reconfigure the channel including the hardware-modified configuration registers (GPDMA_CxBR1, GPDMA_CxSAR and GPDMA_CxDAR) before enabling again the channel (see the programming sequence in ).
    static constexpr uint32_t GPDMA_C3CR_SUSP = 0x4; // suspend Writing 1 into the field RESET (bit 1) causes the hardware to de-assert this bit, whatever is written into this bit 2. Else: Software must write 1 in order to suspend an active channel i.e. a channel with an on-going GPDMA transfer over its master ports. The software must write 0 in order to resume a suspended channel, following the programming sequence detailed in .
    static constexpr uint32_t GPDMA_C3CR_TCIE = 0x100; // transfer complete interrupt enable
    static constexpr uint32_t GPDMA_C3CR_HTIE = 0x200; // half transfer complete interrupt enable
    static constexpr uint32_t GPDMA_C3CR_DTEIE = 0x400; // data transfer error interrupt enable
    static constexpr uint32_t GPDMA_C3CR_ULEIE = 0x800; // update link transfer error interrupt enable
    static constexpr uint32_t GPDMA_C3CR_USEIE = 0x1000; // user setting error interrupt enable
    static constexpr uint32_t GPDMA_C3CR_SUSPIE = 0x2000; // completed suspension interrupt enable
    static constexpr uint32_t GPDMA_C3CR_TOIE = 0x4000; // trigger overrun interrupt enable
    static constexpr uint32_t GPDMA_C3CR_LSM = 0x10000; // Link step mode First the (possible 1D/repeated) block transfer is executed as defined by the current internal register file until GPDMA_CxBR1.BNDT[15:0]=0 and GPDMA_CxBR1.BRC[10:0]=0 if present. Secondly the next linked-list data structure is conditionally uploaded from memory as defined by GPDMA_CxLLR. Then channel execution is completed. Note: This bit must be written when EN=0. This bit is read-only when EN=1.
    static constexpr uint32_t GPDMA_C3CR_LAP = 0x20000; // linked-list allocated port This bit is used to allocate the master port for the update of the GPDMA linked-list registers from the memory. Note: This bit must be written when EN=0. This bit is read-only when EN=1.
    typedef bit_field_t<22, 0x3> GPDMA_C3CR_PRIO; // priority level of the channel x GPDMA transfer versus others Note: This bit must be written when EN=0. This bit is read-only when EN=1.


    static constexpr uint32_t GPDMA_C3TR1_RESET_VALUE = 0x0; // Reset value
    typedef bit_field_t<0, 0x3> GPDMA_C3TR1_SDW_LOG2; // binary logarithm of the source data width of a burst in bytes Note: Setting a 8-byte data width causes a user setting error to be reported and no transfer is issued. A source block size must be a multiple of the source data width (GPDMA_CxBR1.BNDT[2:0] versus SDW_LOG2[1:0]). Otherwise, a user setting error is reported and no transfer is issued. A source single transfer must have an aligned address with its data width (start address GPDMA_CxSAR[2:0] versus SDW_LOG2[1:0]). Otherwise, a user setting error is reported and none transfer is issued.
    static constexpr uint32_t GPDMA_C3TR1_SINC = 0x8; // source incrementing burst The source address, pointed by GPDMA_CxSAR, is kept constant after a burst beat/single transfer or is incremented by the offset value corresponding to a contiguous data after a burst beat/single transfer.
    typedef bit_field_t<4, 0x3f> GPDMA_C3TR1_SBL_1; // source burst length minus 1, between 0 and 63 The burst length unit is one data named beat within a burst. If SBL_1[5:0]=0, the burst can be named as single. Each data/beat has a width defined by the destination data width SDW_LOG2[1:0]. Note: If a burst transfer crossed a 1-Kbyte address boundary on a AHB transfer, the GPDMA modifies and shortens the programmed burst into singles or bursts of lower length, to be compliant with the AHB protocol. If a burst transfer is of length greater than the FIFO size of the channel x, the GPDMA modifies and shortens the programmed burst into singles or bursts of lower length, to be compliant with the FIFO size. Transfer performance is lower, with GPDMA re-arbitration between effective and lower bursts/singles, but the data integrity is guaranteed.
    typedef bit_field_t<11, 0x3> GPDMA_C3TR1_PAM; // padding/alignment mode If DDW_LOG2[1:0] = SDW_LOG2[1:0]: if the data width of a burst destination transfer is equal to the data width of a burst source transfer, these bits are ignored. Else: - Case 1: If destination data width &gt; source data width 1x: successive source data are FIFO queued and packed at the destination data width, in a left (LSB) to right (MSB) order (named little endian), before a destination transfer - Case 2: If destination data width &lt; source data width 1x: source data is FIFO queued and unpacked at the destination data width, to be transferred in a left (LSB) to right (MSB) order (named little endian) to the destination Note:
    static constexpr uint32_t GPDMA_C3TR1_SBX = 0x2000; // source byte exchange within the unaligned half-word of each source word If the source data width is shorter than a word, this bit is ignored. If the source data width is a word:
    static constexpr uint32_t GPDMA_C3TR1_SAP = 0x4000; // source allocated port This bit is used to allocate the master port for the source transfer Note: This bit must be written when EN=0. This bit is read-only when EN=1.
    static constexpr uint32_t GPDMA_C3TR1_SSEC = 0x8000; // security attribute of the GPDMA transfer from the source If GPDMA_SECCFGR.SECx=1 and the access is secure: This is a secure register bit. This bit can only be read by a secure software. This bit must be written by a secure software when GPDMA_SECCFGR.SECx=1. A secure write is ignored when GPDMA_SECCFGR.SECx=0. When GPDMA_SECCFGR.SECx is de-asserted, this SSEC bit is also de-asserted by hardware (on a secure reconfiguration of the channel as non-secure), and the GPDMA transfer from the source is non-secure.
    typedef bit_field_t<16, 0x3> GPDMA_C3TR1_DDW_LOG2; // binary logarithm of the destination data width of a burst, in bytes Note: Setting a 8-byte data width causes a user setting error to be reported and none transfer is issued. A destination burst transfer must have an aligned address with its data width (start address GPDMA_CxDAR[2:0] and address offset GPDMA_CxTR3.DAO[2:0], versus DDW_LOG2[1:0]). Otherwise a user setting error is reported and no transfer is issued.
    static constexpr uint32_t GPDMA_C3TR1_DINC = 0x80000; // destination incrementing burst The destination address, pointed by GPDMA_CxDAR, is kept constant after a burst beat/single transfer, or is incremented by the offset value corresponding to a contiguous data after a burst beat/single transfer.
    typedef bit_field_t<20, 0x3f> GPDMA_C3TR1_DBL_1; // destination burst length minus 1, between 0 and 63 The burst length unit is one data named beat within a burst. If DBL_1[5:0]=0, the burst can be named as single. Each data/beat has a width defined by the destination data width DDW_LOG2[1:0]. Note: If a burst transfer crossed a 1-Kbyte address boundary on a AHB transfer, the GPDMA modifies and shortens the programmed burst into singles or bursts of lower length, to be compliant with the AHB protocol. If a burst transfer is of length greater than the FIFO size of the channel x, the GPDMA modifies and shortens the programmed burst into singles or bursts of lower length, to be compliant with the FIFO size. Transfer performance is lower, with GPDMA re-arbitration between effective and lower bursts/singles, but the data integrity is guaranteed.
    static constexpr uint32_t GPDMA_C3TR1_DBX = 0x4000000; // destination byte exchange If the destination data size is a byte, this bit is ignored. If the destination data size is not a byte:
    static constexpr uint32_t GPDMA_C3TR1_DHX = 0x8000000; // destination half-word exchange If the destination data size is shorter than a word, this bit is ignored. If the destination data size is a word:
    static constexpr uint32_t GPDMA_C3TR1_DAP = 0x40000000; // destination allocated port This bit is used to allocate the master port for the destination transfer Note: This bit must be written when EN=0. This bit is read-only when EN=1.
    static constexpr uint32_t GPDMA_C3TR1_DSEC = 0x80000000; // security attribute of the GPDMA transfer to the destination If GPDMA_SECCFGR.SECx=1 and the access is secure: This is a secure register bit. This bit can only be read by a secure software. This bit must be written by a secure software when GPDMA_SECCFGR.SECx=1. A secure write is ignored when GPDMA_SECCFGR.SECx=0. When GPDMA_SECCFGR.SECx is de-asserted, this DSEC bit is also de-asserted by hardware (on a secure reconfiguration of the channel as non-secure), and the GPDMA transfer to the destination is non-secure.

    static constexpr uint32_t GPDMA_C3TR2_RESET_VALUE = 0x0; // Reset value
    typedef bit_field_t<0, 0x7f> GPDMA_C3TR2_REQSEL; // GPDMA hardware request selection These bits are ignored if channel x is activated (GPDMA_CxCR.EN asserted) with SWREQ=1 (software request for a memory-to-memory transfer). Else, the selected hardware request is internally taken into account as per . The user must not assign a same input hardware request (same REQSEL[6:0] value) to different active GPDMA channels (GPDMA_CxCR.EN=1 and GPDMA_CxTR2.SWREQ=0 for these channels). GPDMA is not intended to hardware support the case of simultaneous enabled channels incorrectly configured with a same hardware peripheral request signal, and there is no user setting error reporting.
    static constexpr uint32_t GPDMA_C3TR2_SWREQ = 0x200; // software request This bit is internally taken into account when GPDMA_CxCR.EN is asserted.
    static constexpr uint32_t GPDMA_C3TR2_DREQ = 0x400; // destination hardware request This bit is ignored if channel x is activated (GPDMA_CxCR.EN asserted) with SWREQ=1 (software request for a memory-to-memory transfer). Else: Note:
    static constexpr uint32_t GPDMA_C3TR2_BREQ = 0x800; // Block hardware request If the channel x is activated (GPDMA_CxCR.EN asserted) with SWREQ=1 (software request for a memory-to-memory transfer), this bit is ignored. Else:
    typedef bit_field_t<14, 0x3> GPDMA_C3TR2_TRIGM; // trigger mode These bits define the transfer granularity for its conditioning by the trigger. If the channel x is enabled (GPDMA_CxCR.EN asserted) with TRIGPOL[1:0]=00 or 11, these TRIGM[1:0] bits are ignored. Else, a GPDMA transfer is conditioned by at least one trigger hit: first burst read of a 2D/repeated block transfer is conditioned by one hit trigger. If the peripheral is programmed as a source (DREQ=0) of the LLI data transfer, each programmed burst read is conditioned. If the peripheral is programmed as a destination (DREQ=1) of the LLI data transfer, each programmed burst write is conditioned. The first memory burst read of a (possibly 2D/repeated) block, also named as the first ready FIFO-based source burst, is gated by the occurrence of both the hardware request and the first trigger hit. The GPDMA monitoring of a trigger for channel x is started when the channel is enabled/loaded with a new active trigger configuration: rising or falling edge on a selected trigger (TRIGPOL[1:0]=01 or respectively TRIGPOL[1:0]=10). The monitoring of this trigger is kept active during the triggered and uncompleted (data or link) transfer; and if a new trigger is detected then, this hit is internally memorized to grant the next transfer, as long as the defined rising or falling edge is not modified, and the TRIGSEL[5:0] is not modified, and the channel is enabled. Transferring a next LLIn+1 that updates the GPDMA_CxTR2 with a new value for any of TRIGSEL[5:0] or TRIGPOL[1:0], resets the monitoring, trashing the memorized hit of the formerly defined LLIn trigger. After a first new trigger hitn+1 is memorized, if another second trigger hitn+2 is detected and if the hitn triggered transfer is still not completed, hitn+2 is lost and not memorized.memorized. A trigger overrun flag is reported (GPDMA_CxSR.TOF=1), and an interrupt is generated if enabled (GPDMA_CxCR.TOIE=1). The channel is not automatically disabled by hardware due to a trigger overrun. Note: When the source block size is not a multiple of the source burst size and is a multiple of the source data width, then the last programmed source burst is not completed and is internally shorten to match the block size. In this case, if TRIGM[1:0]=11 and (SWREQ=1 or (SWREQ=0 and DREQ=0)), the shortened burst transfer (by singles or/and by bursts of lower length) is conditioned once by the trigger. When the programmed destination burst is internally shortened by singles or/and by bursts of lower length (versus FIFO size, versus block size, 1-Kbyte boundary address crossing): if the trigger is conditioning the programmed destination burst (if TRIGM[1:0]=11 and SWREQ=0 and DREQ=1), this shortened destination burst transfer is conditioned once by the trigger.
    typedef bit_field_t<16, 0x3f> GPDMA_C3TR2_TRIGSEL; // trigger event input selection These bits select the trigger event input of the GPDMA transfer (as per ), with an active trigger event if TRIGPOL[1:0]00.
    typedef bit_field_t<24, 0x3> GPDMA_C3TR2_TRIGPOL; // trigger event polarity These bits define the polarity of the selected trigger event input defined by TRIGSEL[5:0].
    typedef bit_field_t<30, 0x3> GPDMA_C3TR2_TCEM; // transfer complete event mode These bits define the transfer granularity for the transfer complete and half transfer complete events generation. Note: If the initial LLI0 data transfer is null/void (directly programmed by the internal register file with GPDMA_CxBR1.BNDT[15:0]=0), then neither the complete transfer event nor the half transfer event is generated. Note: If the initial LLI0 data transfer is null/void (directly programmed by the internal register file with GPDMA_CxBR1.BNDT[15:0]=0), then neither the complete transfer event nor the half transfer event is generated. Note: If the initial LLI0 data transfer is null/void (i.e. directly programmed by the internal register file with GPDMA_CxBR1.BNDT[15:0]=0), then the half transfer event is not generated, and the transfer complete event is generated when is completed the loading of the LLI1.

    static constexpr uint32_t GPDMA_C3BR1_RESET_VALUE = 0x0; // Reset value
    typedef bit_field_t<0, 0xffff> GPDMA_C3BR1_BNDT; // block number of data bytes to transfer from the source Block size transferred from the source. When the channel is enabled, this field becomes read-only and is decremented, indicating the remaining number of data items in the current source block to be transferred. BNDT[15:0] is programmed in number of bytes, maximum source block size is 64Kbytes -1. Once the last data transfer is completed (BNDT[15:0]=0): - if GPDMA_CxLLR.UB1=1, this field is updated by the LLI in the memory. - if GPDMA_CxLLR.UB1=0 and if there is at least one non null Uxx update bit, this field is internally restored to the programmed value. - if all GPDMA_CxLLR.Uxx=0 and if GPDMA_CxLLR.LA[15:0]=0, this field is internally restored to the programmed value (infinite/continuous last LLI). - if GPDMA_CxLLR=0, this field is kept as zero following the last LLI data transfer. Note: A non-null source block size must be a multiple of the source data width (BNDT[2:0] versus GPDMA_CxTR1.SDW_LOG2[1:0]). Else a user setting error is reported and no transfer is issued. When configured in packing mode (GPDMA_CxTR1.PAM[1]=1 and destination data width different from source data width), a non-null source block size must be a multiple of the destination data width (BNDT[2:0] versus GPDMA_CxTR1.DDW_LOG2[1:0]). Else a user setting error is reported and no transfer is issued.

    static constexpr uint32_t GPDMA_C3SAR_RESET_VALUE = 0x0; // Reset value
    typedef bit_field_t<0, 0xffffffff> GPDMA_C3SAR_SA; // source address This field is the pointer to the address from which the next data is read. During the channel activity, depending on the source addressing mode (GPDMA_CxTR1.SINC), this field is kept fixed or incremented by the data width (GPDMA_CxTR1.SDW_LOG2[1:0]) after each single source data, reflecting the next address from which data is read. During the channel activity, this address is updated after each completed source burst, consequently to: the programmed source burst; either in fixed addressing mode or in contiguous-data incremented mode. If contiguously incremented (GPDMA_CxTR1.SINC = 1), then the additional address offset value is the programmed burst size, as defined by GPDMA_CxTR1.SBL_1[5:0] and GPDMA_CxTR1.SDW_LOG2[21:0] the additional source incremented/decremented offset value as programmed by GPDMA_CxBR1.SDEC and GPDMA_CxTR3.SAO[12:0] once/if completed source block transfer, for a channel x with 2D addressing capability (x = 12 to 15). additional block repeat source incremented/decremented offset value as programmed by GPDMA_CxBR1.BRSDEC and GPDMA_CxBR2.BRSAO[15:0] In linked-list mode, after a LLI data transfer is completed, this register is automatically updated by GPDMA from the memory, provided the LLI is set with GPDMA_CxLLR.USA=1. Note: A source address must be aligned with the programmed data width of a source single (SA[2:0] versus GPDMA_CxTR1.SDW_LOG2[1:0]). Else, a user setting error is reported and no transfer is issued. When the source block size is not a multiple of the source burst size and is a multiple of the source data width, the last programmed source burst is not completed and is internally shorten to match the block size. In this case, the additional GPDMA_CxTR3.SAO[12:0] is not applied.

    static constexpr uint32_t GPDMA_C3DAR_RESET_VALUE = 0x0; // Reset value
    typedef bit_field_t<0, 0xffffffff> GPDMA_C3DAR_DA; // destination address This field is the pointer to the address from which the next data is written. During the channel activity, depending on the destination addressing mode (GPDMA_CxTR1.DINC), this field is kept fixed or incremented by the data width (GPDMA_CxTR1.DDW_LOG2[21:0]) after each single destination data, reflecting the next address from which data is written. During the channel activity, this address is updated after each completed destination burst, consequently to: the programmed destination burst; either in fixed addressing mode or in contiguous-data incremented mode. If contiguously incremented (GPDMA_CxTR1.DINC = 1), then the additional address offset value is the programmed burst size, as defined by GPDMA_CxTR1.DBL_1[5:0] and GPDMA_CxTR1.DDW_LOG2[1:0] the additional destination incremented/decremented offset value as programmed by GPDMA_CxBR1.DDEC and GPDMA_CxTR3.DAO[12:0] once/if completed destination block transfer, for a channel x with 2D addressing capability (x=12to15), the additional block repeat destination incremented/decremented offset value as programmed by GPDMA_CxBR1.BRDDEC and GPDMA_CxBR2.BRDAO[15:0] In linked-list mode, after a LLI data transfer is completed, this register is automatically updated by the GPDMA from the memory, provided the LLI is set with GPDMA_CxLLR.UDA=1. Note: A destination address must be aligned with the programmed data width of a destination burst (DA[2:0] versus GPDMA_CxTR1.DDW_LOG2[1:0]). Else, a user setting error is reported and no transfer is issued.


    static constexpr uint32_t GPDMA_C3LLR_RESET_VALUE = 0x0; // Reset value
    typedef bit_field_t<2, 0x3fff> GPDMA_C3LLR_LA; // pointer (16-bit low-significant address) to the next linked-list data structure If UT1=UT2=UB1=USA=UDA=ULL=0 and if LA[15:20]=0, the current LLI is the last one. The channel transfer is completed without any update of the linked-list GPDMA register file. Else, this field is the pointer to the memory address offset from which the next linked-list data structure is automatically fetched from, once the data transfer is completed, in order to conditionally update the linked-list GPDMA internal register file (GPDMA_CxCTR1, GPDMA_CxTR2, GPDMA_CxBR1, GPDMA_CxSAR, GPDMA_CxDAR and GPDMA_CxLLR). Note: The user must program the pointer to be 32-bit aligned. The two low-significant bits are write ignored.
    static constexpr uint32_t GPDMA_C3LLR_ULL = 0x10000; // Update GPDMA_CxLLR register from memory This bit is used to control the update of GPDMA_CxLLR from the memory during the link transfer.
    static constexpr uint32_t GPDMA_C3LLR_UDA = 0x8000000; // Update GPDMA_CxDAR register from memory This bit is used to control the update of GPDMA_CxDAR from the memory during the link transfer.
    static constexpr uint32_t GPDMA_C3LLR_USA = 0x10000000; // update GPDMA_CxSAR from memory This bit controls the update of GPDMA_CxSAR from the memory during the link transfer.
    static constexpr uint32_t GPDMA_C3LLR_UB1 = 0x20000000; // Update GPDMA_CxBR1 from memory This bit controls the update of GPDMA_CxBR1 from the memory during the link transfer. If UB1=0 and if GPDMA_CxLLR0, the linked-list is not completed. GPDMA_CxBR1.BNDT[15:0] is then restored to the programmed value after data transfer is completed and before the link transfer.
    static constexpr uint32_t GPDMA_C3LLR_UT2 = 0x40000000; // Update GPDMA_CxTR2 from memory This bit controls the update of GPDMA_CxTR2 from the memory during the link transfer.
    static constexpr uint32_t GPDMA_C3LLR_UT1 = 0x80000000; // Update GPDMA_CxTR1 from memory This bit controls the update of GPDMA_CxTR1 from the memory during the link transfer.

    static constexpr uint32_t GPDMA_C4LBAR_RESET_VALUE = 0x0; // Reset value
    typedef bit_field_t<16, 0xffff> GPDMA_C4LBAR_LBA; // linked-list base address of GPDMA channel x


    static constexpr uint32_t GPDMA_C4FCR_RESET_VALUE = 0x0; // Reset value
    static constexpr uint32_t GPDMA_C4FCR_TCF = 0x100; // transfer complete flag clear
    static constexpr uint32_t GPDMA_C4FCR_HTF = 0x200; // half transfer flag clear
    static constexpr uint32_t GPDMA_C4FCR_DTEF = 0x400; // data transfer error flag clear
    static constexpr uint32_t GPDMA_C4FCR_ULEF = 0x800; // update link transfer error flag clear
    static constexpr uint32_t GPDMA_C4FCR_USEF = 0x1000; // user setting error flag clear
    static constexpr uint32_t GPDMA_C4FCR_SUSPF = 0x2000; // completed suspension flag clear
    static constexpr uint32_t GPDMA_C4FCR_TOF = 0x4000; // trigger overrun flag clear

    static constexpr uint32_t GPDMA_C4SR_RESET_VALUE = 0x1; // Reset value
    static constexpr uint32_t GPDMA_C4SR_IDLEF = 0x1; // idle flag This idle flag is de-asserted by hardware when the channel is enabled (GPDMA_CxCR.EN=1) with a valid channel configuration (no USEF to be immediately reported). This idle flag is asserted after hard reset or by hardware when the channel is back in idle state (in suspended or disabled state).
    static constexpr uint32_t GPDMA_C4SR_TCF = 0x100; // transfer complete flag A transfer complete event is either a block transfer complete, a 2D/repeated block transfer complete, a LLI transfer complete including the upload of the next LLI if any, or the full linked-list completion, depending on the transfer complete event mode (GPDMA_CxTR2.TCEM[1:0]).
    static constexpr uint32_t GPDMA_C4SR_HTF = 0x200; // half transfer flag An half transfer event is either an half block transfer or an half 2D/repeated block transfer, depending on the transfer complete event mode (GPDMA_CxTR2.TCEM[1:0]). An half block transfer occurs when half of the bytes of the source block size (rounded up integer of GPDMA_CxBR1.BNDT[15:0]/2) has been transferred to the destination. An half 2D/repeated block transfer occurs when half of the repeated blocks (rounded up integer of (GPDMA_CxBR1.BRC[10:0]+1)/2)) has been transferred to the destination.
    static constexpr uint32_t GPDMA_C4SR_DTEF = 0x400; // data transfer error flag
    static constexpr uint32_t GPDMA_C4SR_ULEF = 0x800; // update link transfer error flag
    static constexpr uint32_t GPDMA_C4SR_USEF = 0x1000; // user setting error flag
    static constexpr uint32_t GPDMA_C4SR_SUSPF = 0x2000; // completed suspension flag
    static constexpr uint32_t GPDMA_C4SR_TOF = 0x4000; // trigger overrun flag
    typedef bit_field_t<16, 0xff> GPDMA_C4SR_FIFOL; // monitored FIFO level Number of available write beats in the FIFO, in units of the programmed destination data width (see GPDMA_CxTR1.DDW_LOG2[1:0], in units of bytes, half-words, or words). Note: After having suspended an active transfer, the user may need to read FIFOL[7:0], additionally to GPDMA_CxBR1.BDNT[15:0] and GPDMA_CxBR1.BRC[10:0], to know how many data have been transferred to the destination. Before reading, the user may wait for the transfer to be suspended (GPDMA_CxSR.SUSPF=1).

    static constexpr uint32_t GPDMA_C4CR_RESET_VALUE = 0x0; // Reset value
    static constexpr uint32_t GPDMA_C4CR_EN = 0x1; // enable Writing 1 into the field RESET (bit 1) causes the hardware to de-assert this bit, whatever is written into this bit 0. Else: this bit is de-asserted by hardware when there is a transfer error (master bus error or user setting error) or when there is a channel transfer complete (channel ready to be configured, e.g. if LSM=1 at the end of a single execution of the LLI). Else, this bit can be asserted by software. Writing 0 into this EN bit is ignored.
    static constexpr uint32_t GPDMA_C4CR_RESET = 0x2; // reset This bit is write only. Writing 0 has no impact. Writing 1 implies the reset of the following: the FIFO, the channel internal state, SUSP and EN bits (whatever is written receptively in bit 2 and bit 0). The reset is effective when the channel is in steady state, meaning one of the following: - active channel in suspended state (GPDMA_CxSR.SUSPF=1 and GPDMA_CxSR.IDLEF=GPDMA_CxCR.EN=1) - channel in disabled state (GPDMA_CxSR.IDLEF=1 and GPDMA_CxCR.EN=0). After writing a RESET, to continue using this channel, the user must explicitly reconfigure the channel including the hardware-modified configuration registers (GPDMA_CxBR1, GPDMA_CxSAR and GPDMA_CxDAR) before enabling again the channel (see the programming sequence in ).
    static constexpr uint32_t GPDMA_C4CR_SUSP = 0x4; // suspend Writing 1 into the field RESET (bit 1) causes the hardware to de-assert this bit, whatever is written into this bit 2. Else: Software must write 1 in order to suspend an active channel i.e. a channel with an on-going GPDMA transfer over its master ports. The software must write 0 in order to resume a suspended channel, following the programming sequence detailed in .
    static constexpr uint32_t GPDMA_C4CR_TCIE = 0x100; // transfer complete interrupt enable
    static constexpr uint32_t GPDMA_C4CR_HTIE = 0x200; // half transfer complete interrupt enable
    static constexpr uint32_t GPDMA_C4CR_DTEIE = 0x400; // data transfer error interrupt enable
    static constexpr uint32_t GPDMA_C4CR_ULEIE = 0x800; // update link transfer error interrupt enable
    static constexpr uint32_t GPDMA_C4CR_USEIE = 0x1000; // user setting error interrupt enable
    static constexpr uint32_t GPDMA_C4CR_SUSPIE = 0x2000; // completed suspension interrupt enable
    static constexpr uint32_t GPDMA_C4CR_TOIE = 0x4000; // trigger overrun interrupt enable
    static constexpr uint32_t GPDMA_C4CR_LSM = 0x10000; // Link step mode First the (possible 1D/repeated) block transfer is executed as defined by the current internal register file until GPDMA_CxBR1.BNDT[15:0]=0 and GPDMA_CxBR1.BRC[10:0]=0 if present. Secondly the next linked-list data structure is conditionally uploaded from memory as defined by GPDMA_CxLLR. Then channel execution is completed. Note: This bit must be written when EN=0. This bit is read-only when EN=1.
    static constexpr uint32_t GPDMA_C4CR_LAP = 0x20000; // linked-list allocated port This bit is used to allocate the master port for the update of the GPDMA linked-list registers from the memory. Note: This bit must be written when EN=0. This bit is read-only when EN=1.
    typedef bit_field_t<22, 0x3> GPDMA_C4CR_PRIO; // priority level of the channel x GPDMA transfer versus others Note: This bit must be written when EN=0. This bit is read-only when EN=1.


    static constexpr uint32_t GPDMA_C4TR1_RESET_VALUE = 0x0; // Reset value
    typedef bit_field_t<0, 0x3> GPDMA_C4TR1_SDW_LOG2; // binary logarithm of the source data width of a burst in bytes Note: Setting a 8-byte data width causes a user setting error to be reported and no transfer is issued. A source block size must be a multiple of the source data width (GPDMA_CxBR1.BNDT[2:0] versus SDW_LOG2[1:0]). Otherwise, a user setting error is reported and no transfer is issued. A source single transfer must have an aligned address with its data width (start address GPDMA_CxSAR[2:0] versus SDW_LOG2[1:0]). Otherwise, a user setting error is reported and none transfer is issued.
    static constexpr uint32_t GPDMA_C4TR1_SINC = 0x8; // source incrementing burst The source address, pointed by GPDMA_CxSAR, is kept constant after a burst beat/single transfer or is incremented by the offset value corresponding to a contiguous data after a burst beat/single transfer.
    typedef bit_field_t<4, 0x3f> GPDMA_C4TR1_SBL_1; // source burst length minus 1, between 0 and 63 The burst length unit is one data named beat within a burst. If SBL_1[5:0]=0, the burst can be named as single. Each data/beat has a width defined by the destination data width SDW_LOG2[1:0]. Note: If a burst transfer crossed a 1-Kbyte address boundary on a AHB transfer, the GPDMA modifies and shortens the programmed burst into singles or bursts of lower length, to be compliant with the AHB protocol. If a burst transfer is of length greater than the FIFO size of the channel x, the GPDMA modifies and shortens the programmed burst into singles or bursts of lower length, to be compliant with the FIFO size. Transfer performance is lower, with GPDMA re-arbitration between effective and lower bursts/singles, but the data integrity is guaranteed.
    typedef bit_field_t<11, 0x3> GPDMA_C4TR1_PAM; // padding/alignment mode If DDW_LOG2[1:0] = SDW_LOG2[1:0]: if the data width of a burst destination transfer is equal to the data width of a burst source transfer, these bits are ignored. Else: - Case 1: If destination data width &gt; source data width 1x: successive source data are FIFO queued and packed at the destination data width, in a left (LSB) to right (MSB) order (named little endian), before a destination transfer - Case 2: If destination data width &lt; source data width 1x: source data is FIFO queued and unpacked at the destination data width, to be transferred in a left (LSB) to right (MSB) order (named little endian) to the destination Note:
    static constexpr uint32_t GPDMA_C4TR1_SBX = 0x2000; // source byte exchange within the unaligned half-word of each source word If the source data width is shorter than a word, this bit is ignored. If the source data width is a word:
    static constexpr uint32_t GPDMA_C4TR1_SAP = 0x4000; // source allocated port This bit is used to allocate the master port for the source transfer Note: This bit must be written when EN=0. This bit is read-only when EN=1.
    static constexpr uint32_t GPDMA_C4TR1_SSEC = 0x8000; // security attribute of the GPDMA transfer from the source If GPDMA_SECCFGR.SECx=1 and the access is secure: This is a secure register bit. This bit can only be read by a secure software. This bit must be written by a secure software when GPDMA_SECCFGR.SECx=1. A secure write is ignored when GPDMA_SECCFGR.SECx=0. When GPDMA_SECCFGR.SECx is de-asserted, this SSEC bit is also de-asserted by hardware (on a secure reconfiguration of the channel as non-secure), and the GPDMA transfer from the source is non-secure.
    typedef bit_field_t<16, 0x3> GPDMA_C4TR1_DDW_LOG2; // binary logarithm of the destination data width of a burst, in bytes Note: Setting a 8-byte data width causes a user setting error to be reported and none transfer is issued. A destination burst transfer must have an aligned address with its data width (start address GPDMA_CxDAR[2:0] and address offset GPDMA_CxTR3.DAO[2:0], versus DDW_LOG2[1:0]). Otherwise a user setting error is reported and no transfer is issued.
    static constexpr uint32_t GPDMA_C4TR1_DINC = 0x80000; // destination incrementing burst The destination address, pointed by GPDMA_CxDAR, is kept constant after a burst beat/single transfer, or is incremented by the offset value corresponding to a contiguous data after a burst beat/single transfer.
    typedef bit_field_t<20, 0x3f> GPDMA_C4TR1_DBL_1; // destination burst length minus 1, between 0 and 63 The burst length unit is one data named beat within a burst. If DBL_1[5:0]=0, the burst can be named as single. Each data/beat has a width defined by the destination data width DDW_LOG2[1:0]. Note: If a burst transfer crossed a 1-Kbyte address boundary on a AHB transfer, the GPDMA modifies and shortens the programmed burst into singles or bursts of lower length, to be compliant with the AHB protocol. If a burst transfer is of length greater than the FIFO size of the channel x, the GPDMA modifies and shortens the programmed burst into singles or bursts of lower length, to be compliant with the FIFO size. Transfer performance is lower, with GPDMA re-arbitration between effective and lower bursts/singles, but the data integrity is guaranteed.
    static constexpr uint32_t GPDMA_C4TR1_DBX = 0x4000000; // destination byte exchange If the destination data size is a byte, this bit is ignored. If the destination data size is not a byte:
    static constexpr uint32_t GPDMA_C4TR1_DHX = 0x8000000; // destination half-word exchange If the destination data size is shorter than a word, this bit is ignored. If the destination data size is a word:
    static constexpr uint32_t GPDMA_C4TR1_DAP = 0x40000000; // destination allocated port This bit is used to allocate the master port for the destination transfer Note: This bit must be written when EN=0. This bit is read-only when EN=1.
    static constexpr uint32_t GPDMA_C4TR1_DSEC = 0x80000000; // security attribute of the GPDMA transfer to the destination If GPDMA_SECCFGR.SECx=1 and the access is secure: This is a secure register bit. This bit can only be read by a secure software. This bit must be written by a secure software when GPDMA_SECCFGR.SECx=1. A secure write is ignored when GPDMA_SECCFGR.SECx=0. When GPDMA_SECCFGR.SECx is de-asserted, this DSEC bit is also de-asserted by hardware (on a secure reconfiguration of the channel as non-secure), and the GPDMA transfer to the destination is non-secure.

    static constexpr uint32_t GPDMA_C4TR2_RESET_VALUE = 0x0; // Reset value
    typedef bit_field_t<0, 0x7f> GPDMA_C4TR2_REQSEL; // GPDMA hardware request selection These bits are ignored if channel x is activated (GPDMA_CxCR.EN asserted) with SWREQ=1 (software request for a memory-to-memory transfer). Else, the selected hardware request is internally taken into account as per . The user must not assign a same input hardware request (same REQSEL[6:0] value) to different active GPDMA channels (GPDMA_CxCR.EN=1 and GPDMA_CxTR2.SWREQ=0 for these channels). GPDMA is not intended to hardware support the case of simultaneous enabled channels incorrectly configured with a same hardware peripheral request signal, and there is no user setting error reporting.
    static constexpr uint32_t GPDMA_C4TR2_SWREQ = 0x200; // software request This bit is internally taken into account when GPDMA_CxCR.EN is asserted.
    static constexpr uint32_t GPDMA_C4TR2_DREQ = 0x400; // destination hardware request This bit is ignored if channel x is activated (GPDMA_CxCR.EN asserted) with SWREQ=1 (software request for a memory-to-memory transfer). Else: Note:
    static constexpr uint32_t GPDMA_C4TR2_BREQ = 0x800; // Block hardware request If the channel x is activated (GPDMA_CxCR.EN asserted) with SWREQ=1 (software request for a memory-to-memory transfer), this bit is ignored. Else:
    typedef bit_field_t<14, 0x3> GPDMA_C4TR2_TRIGM; // trigger mode These bits define the transfer granularity for its conditioning by the trigger. If the channel x is enabled (GPDMA_CxCR.EN asserted) with TRIGPOL[1:0]=00 or 11, these TRIGM[1:0] bits are ignored. Else, a GPDMA transfer is conditioned by at least one trigger hit: first burst read of a 2D/repeated block transfer is conditioned by one hit trigger. If the peripheral is programmed as a source (DREQ=0) of the LLI data transfer, each programmed burst read is conditioned. If the peripheral is programmed as a destination (DREQ=1) of the LLI data transfer, each programmed burst write is conditioned. The first memory burst read of a (possibly 2D/repeated) block, also named as the first ready FIFO-based source burst, is gated by the occurrence of both the hardware request and the first trigger hit. The GPDMA monitoring of a trigger for channel x is started when the channel is enabled/loaded with a new active trigger configuration: rising or falling edge on a selected trigger (TRIGPOL[1:0]=01 or respectively TRIGPOL[1:0]=10). The monitoring of this trigger is kept active during the triggered and uncompleted (data or link) transfer; and if a new trigger is detected then, this hit is internally memorized to grant the next transfer, as long as the defined rising or falling edge is not modified, and the TRIGSEL[5:0] is not modified, and the channel is enabled. Transferring a next LLIn+1 that updates the GPDMA_CxTR2 with a new value for any of TRIGSEL[5:0] or TRIGPOL[1:0], resets the monitoring, trashing the memorized hit of the formerly defined LLIn trigger. After a first new trigger hitn+1 is memorized, if another second trigger hitn+2 is detected and if the hitn triggered transfer is still not completed, hitn+2 is lost and not memorized.memorized. A trigger overrun flag is reported (GPDMA_CxSR.TOF=1), and an interrupt is generated if enabled (GPDMA_CxCR.TOIE=1). The channel is not automatically disabled by hardware due to a trigger overrun. Note: When the source block size is not a multiple of the source burst size and is a multiple of the source data width, then the last programmed source burst is not completed and is internally shorten to match the block size. In this case, if TRIGM[1:0]=11 and (SWREQ=1 or (SWREQ=0 and DREQ=0)), the shortened burst transfer (by singles or/and by bursts of lower length) is conditioned once by the trigger. When the programmed destination burst is internally shortened by singles or/and by bursts of lower length (versus FIFO size, versus block size, 1-Kbyte boundary address crossing): if the trigger is conditioning the programmed destination burst (if TRIGM[1:0]=11 and SWREQ=0 and DREQ=1), this shortened destination burst transfer is conditioned once by the trigger.
    typedef bit_field_t<16, 0x3f> GPDMA_C4TR2_TRIGSEL; // trigger event input selection These bits select the trigger event input of the GPDMA transfer (as per ), with an active trigger event if TRIGPOL[1:0]00.
    typedef bit_field_t<24, 0x3> GPDMA_C4TR2_TRIGPOL; // trigger event polarity These bits define the polarity of the selected trigger event input defined by TRIGSEL[5:0].
    typedef bit_field_t<30, 0x3> GPDMA_C4TR2_TCEM; // transfer complete event mode These bits define the transfer granularity for the transfer complete and half transfer complete events generation. Note: If the initial LLI0 data transfer is null/void (directly programmed by the internal register file with GPDMA_CxBR1.BNDT[15:0]=0), then neither the complete transfer event nor the half transfer event is generated. Note: If the initial LLI0 data transfer is null/void (directly programmed by the internal register file with GPDMA_CxBR1.BNDT[15:0]=0), then neither the complete transfer event nor the half transfer event is generated. Note: If the initial LLI0 data transfer is null/void (i.e. directly programmed by the internal register file with GPDMA_CxBR1.BNDT[15:0]=0), then the half transfer event is not generated, and the transfer complete event is generated when is completed the loading of the LLI1.

    static constexpr uint32_t GPDMA_C4BR1_RESET_VALUE = 0x0; // Reset value
    typedef bit_field_t<0, 0xffff> GPDMA_C4BR1_BNDT; // block number of data bytes to transfer from the source Block size transferred from the source. When the channel is enabled, this field becomes read-only and is decremented, indicating the remaining number of data items in the current source block to be transferred. BNDT[15:0] is programmed in number of bytes, maximum source block size is 64Kbytes -1. Once the last data transfer is completed (BNDT[15:0]=0): - if GPDMA_CxLLR.UB1=1, this field is updated by the LLI in the memory. - if GPDMA_CxLLR.UB1=0 and if there is at least one non null Uxx update bit, this field is internally restored to the programmed value. - if all GPDMA_CxLLR.Uxx=0 and if GPDMA_CxLLR.LA[15:0]=0, this field is internally restored to the programmed value (infinite/continuous last LLI). - if GPDMA_CxLLR=0, this field is kept as zero following the last LLI data transfer. Note: A non-null source block size must be a multiple of the source data width (BNDT[2:0] versus GPDMA_CxTR1.SDW_LOG2[1:0]). Else a user setting error is reported and no transfer is issued. When configured in packing mode (GPDMA_CxTR1.PAM[1]=1 and destination data width different from source data width), a non-null source block size must be a multiple of the destination data width (BNDT[2:0] versus GPDMA_CxTR1.DDW_LOG2[1:0]). Else a user setting error is reported and no transfer is issued.

    static constexpr uint32_t GPDMA_C4SAR_RESET_VALUE = 0x0; // Reset value
    typedef bit_field_t<0, 0xffffffff> GPDMA_C4SAR_SA; // source address This field is the pointer to the address from which the next data is read. During the channel activity, depending on the source addressing mode (GPDMA_CxTR1.SINC), this field is kept fixed or incremented by the data width (GPDMA_CxTR1.SDW_LOG2[1:0]) after each single source data, reflecting the next address from which data is read. During the channel activity, this address is updated after each completed source burst, consequently to: the programmed source burst; either in fixed addressing mode or in contiguous-data incremented mode. If contiguously incremented (GPDMA_CxTR1.SINC = 1), then the additional address offset value is the programmed burst size, as defined by GPDMA_CxTR1.SBL_1[5:0] and GPDMA_CxTR1.SDW_LOG2[21:0] the additional source incremented/decremented offset value as programmed by GPDMA_CxBR1.SDEC and GPDMA_CxTR3.SAO[12:0] once/if completed source block transfer, for a channel x with 2D addressing capability (x = 12 to 15). additional block repeat source incremented/decremented offset value as programmed by GPDMA_CxBR1.BRSDEC and GPDMA_CxBR2.BRSAO[15:0] In linked-list mode, after a LLI data transfer is completed, this register is automatically updated by GPDMA from the memory, provided the LLI is set with GPDMA_CxLLR.USA=1. Note: A source address must be aligned with the programmed data width of a source single (SA[2:0] versus GPDMA_CxTR1.SDW_LOG2[1:0]). Else, a user setting error is reported and no transfer is issued. When the source block size is not a multiple of the source burst size and is a multiple of the source data width, the last programmed source burst is not completed and is internally shorten to match the block size. In this case, the additional GPDMA_CxTR3.SAO[12:0] is not applied.

    static constexpr uint32_t GPDMA_C4DAR_RESET_VALUE = 0x0; // Reset value
    typedef bit_field_t<0, 0xffffffff> GPDMA_C4DAR_DA; // destination address This field is the pointer to the address from which the next data is written. During the channel activity, depending on the destination addressing mode (GPDMA_CxTR1.DINC), this field is kept fixed or incremented by the data width (GPDMA_CxTR1.DDW_LOG2[21:0]) after each single destination data, reflecting the next address from which data is written. During the channel activity, this address is updated after each completed destination burst, consequently to: the programmed destination burst; either in fixed addressing mode or in contiguous-data incremented mode. If contiguously incremented (GPDMA_CxTR1.DINC = 1), then the additional address offset value is the programmed burst size, as defined by GPDMA_CxTR1.DBL_1[5:0] and GPDMA_CxTR1.DDW_LOG2[1:0] the additional destination incremented/decremented offset value as programmed by GPDMA_CxBR1.DDEC and GPDMA_CxTR3.DAO[12:0] once/if completed destination block transfer, for a channel x with 2D addressing capability (x=12to15), the additional block repeat destination incremented/decremented offset value as programmed by GPDMA_CxBR1.BRDDEC and GPDMA_CxBR2.BRDAO[15:0] In linked-list mode, after a LLI data transfer is completed, this register is automatically updated by the GPDMA from the memory, provided the LLI is set with GPDMA_CxLLR.UDA=1. Note: A destination address must be aligned with the programmed data width of a destination burst (DA[2:0] versus GPDMA_CxTR1.DDW_LOG2[1:0]). Else, a user setting error is reported and no transfer is issued.


    static constexpr uint32_t GPDMA_C4LLR_RESET_VALUE = 0x0; // Reset value
    typedef bit_field_t<2, 0x3fff> GPDMA_C4LLR_LA; // pointer (16-bit low-significant address) to the next linked-list data structure If UT1=UT2=UB1=USA=UDA=ULL=0 and if LA[15:20]=0, the current LLI is the last one. The channel transfer is completed without any update of the linked-list GPDMA register file. Else, this field is the pointer to the memory address offset from which the next linked-list data structure is automatically fetched from, once the data transfer is completed, in order to conditionally update the linked-list GPDMA internal register file (GPDMA_CxCTR1, GPDMA_CxTR2, GPDMA_CxBR1, GPDMA_CxSAR, GPDMA_CxDAR and GPDMA_CxLLR). Note: The user must program the pointer to be 32-bit aligned. The two low-significant bits are write ignored.
    static constexpr uint32_t GPDMA_C4LLR_ULL = 0x10000; // Update GPDMA_CxLLR register from memory This bit is used to control the update of GPDMA_CxLLR from the memory during the link transfer.
    static constexpr uint32_t GPDMA_C4LLR_UDA = 0x8000000; // Update GPDMA_CxDAR register from memory This bit is used to control the update of GPDMA_CxDAR from the memory during the link transfer.
    static constexpr uint32_t GPDMA_C4LLR_USA = 0x10000000; // update GPDMA_CxSAR from memory This bit controls the update of GPDMA_CxSAR from the memory during the link transfer.
    static constexpr uint32_t GPDMA_C4LLR_UB1 = 0x20000000; // Update GPDMA_CxBR1 from memory This bit controls the update of GPDMA_CxBR1 from the memory during the link transfer. If UB1=0 and if GPDMA_CxLLR0, the linked-list is not completed. GPDMA_CxBR1.BNDT[15:0] is then restored to the programmed value after data transfer is completed and before the link transfer.
    static constexpr uint32_t GPDMA_C4LLR_UT2 = 0x40000000; // Update GPDMA_CxTR2 from memory This bit controls the update of GPDMA_CxTR2 from the memory during the link transfer.
    static constexpr uint32_t GPDMA_C4LLR_UT1 = 0x80000000; // Update GPDMA_CxTR1 from memory This bit controls the update of GPDMA_CxTR1 from the memory during the link transfer.

    static constexpr uint32_t GPDMA_C5LBAR_RESET_VALUE = 0x0; // Reset value
    typedef bit_field_t<16, 0xffff> GPDMA_C5LBAR_LBA; // linked-list base address of GPDMA channel x


    static constexpr uint32_t GPDMA_C5FCR_RESET_VALUE = 0x0; // Reset value
    static constexpr uint32_t GPDMA_C5FCR_TCF = 0x100; // transfer complete flag clear
    static constexpr uint32_t GPDMA_C5FCR_HTF = 0x200; // half transfer flag clear
    static constexpr uint32_t GPDMA_C5FCR_DTEF = 0x400; // data transfer error flag clear
    static constexpr uint32_t GPDMA_C5FCR_ULEF = 0x800; // update link transfer error flag clear
    static constexpr uint32_t GPDMA_C5FCR_USEF = 0x1000; // user setting error flag clear
    static constexpr uint32_t GPDMA_C5FCR_SUSPF = 0x2000; // completed suspension flag clear
    static constexpr uint32_t GPDMA_C5FCR_TOF = 0x4000; // trigger overrun flag clear

    static constexpr uint32_t GPDMA_C5SR_RESET_VALUE = 0x1; // Reset value
    static constexpr uint32_t GPDMA_C5SR_IDLEF = 0x1; // idle flag This idle flag is de-asserted by hardware when the channel is enabled (GPDMA_CxCR.EN=1) with a valid channel configuration (no USEF to be immediately reported). This idle flag is asserted after hard reset or by hardware when the channel is back in idle state (in suspended or disabled state).
    static constexpr uint32_t GPDMA_C5SR_TCF = 0x100; // transfer complete flag A transfer complete event is either a block transfer complete, a 2D/repeated block transfer complete, a LLI transfer complete including the upload of the next LLI if any, or the full linked-list completion, depending on the transfer complete event mode (GPDMA_CxTR2.TCEM[1:0]).
    static constexpr uint32_t GPDMA_C5SR_HTF = 0x200; // half transfer flag An half transfer event is either an half block transfer or an half 2D/repeated block transfer, depending on the transfer complete event mode (GPDMA_CxTR2.TCEM[1:0]). An half block transfer occurs when half of the bytes of the source block size (rounded up integer of GPDMA_CxBR1.BNDT[15:0]/2) has been transferred to the destination. An half 2D/repeated block transfer occurs when half of the repeated blocks (rounded up integer of (GPDMA_CxBR1.BRC[10:0]+1)/2)) has been transferred to the destination.
    static constexpr uint32_t GPDMA_C5SR_DTEF = 0x400; // data transfer error flag
    static constexpr uint32_t GPDMA_C5SR_ULEF = 0x800; // update link transfer error flag
    static constexpr uint32_t GPDMA_C5SR_USEF = 0x1000; // user setting error flag
    static constexpr uint32_t GPDMA_C5SR_SUSPF = 0x2000; // completed suspension flag
    static constexpr uint32_t GPDMA_C5SR_TOF = 0x4000; // trigger overrun flag
    typedef bit_field_t<16, 0xff> GPDMA_C5SR_FIFOL; // monitored FIFO level Number of available write beats in the FIFO, in units of the programmed destination data width (see GPDMA_CxTR1.DDW_LOG2[1:0], in units of bytes, half-words, or words). Note: After having suspended an active transfer, the user may need to read FIFOL[7:0], additionally to GPDMA_CxBR1.BDNT[15:0] and GPDMA_CxBR1.BRC[10:0], to know how many data have been transferred to the destination. Before reading, the user may wait for the transfer to be suspended (GPDMA_CxSR.SUSPF=1).

    static constexpr uint32_t GPDMA_C5CR_RESET_VALUE = 0x0; // Reset value
    static constexpr uint32_t GPDMA_C5CR_EN = 0x1; // enable Writing 1 into the field RESET (bit 1) causes the hardware to de-assert this bit, whatever is written into this bit 0. Else: this bit is de-asserted by hardware when there is a transfer error (master bus error or user setting error) or when there is a channel transfer complete (channel ready to be configured, e.g. if LSM=1 at the end of a single execution of the LLI). Else, this bit can be asserted by software. Writing 0 into this EN bit is ignored.
    static constexpr uint32_t GPDMA_C5CR_RESET = 0x2; // reset This bit is write only. Writing 0 has no impact. Writing 1 implies the reset of the following: the FIFO, the channel internal state, SUSP and EN bits (whatever is written receptively in bit 2 and bit 0). The reset is effective when the channel is in steady state, meaning one of the following: - active channel in suspended state (GPDMA_CxSR.SUSPF=1 and GPDMA_CxSR.IDLEF=GPDMA_CxCR.EN=1) - channel in disabled state (GPDMA_CxSR.IDLEF=1 and GPDMA_CxCR.EN=0). After writing a RESET, to continue using this channel, the user must explicitly reconfigure the channel including the hardware-modified configuration registers (GPDMA_CxBR1, GPDMA_CxSAR and GPDMA_CxDAR) before enabling again the channel (see the programming sequence in ).
    static constexpr uint32_t GPDMA_C5CR_SUSP = 0x4; // suspend Writing 1 into the field RESET (bit 1) causes the hardware to de-assert this bit, whatever is written into this bit 2. Else: Software must write 1 in order to suspend an active channel i.e. a channel with an on-going GPDMA transfer over its master ports. The software must write 0 in order to resume a suspended channel, following the programming sequence detailed in .
    static constexpr uint32_t GPDMA_C5CR_TCIE = 0x100; // transfer complete interrupt enable
    static constexpr uint32_t GPDMA_C5CR_HTIE = 0x200; // half transfer complete interrupt enable
    static constexpr uint32_t GPDMA_C5CR_DTEIE = 0x400; // data transfer error interrupt enable
    static constexpr uint32_t GPDMA_C5CR_ULEIE = 0x800; // update link transfer error interrupt enable
    static constexpr uint32_t GPDMA_C5CR_USEIE = 0x1000; // user setting error interrupt enable
    static constexpr uint32_t GPDMA_C5CR_SUSPIE = 0x2000; // completed suspension interrupt enable
    static constexpr uint32_t GPDMA_C5CR_TOIE = 0x4000; // trigger overrun interrupt enable
    static constexpr uint32_t GPDMA_C5CR_LSM = 0x10000; // Link step mode First the (possible 1D/repeated) block transfer is executed as defined by the current internal register file until GPDMA_CxBR1.BNDT[15:0]=0 and GPDMA_CxBR1.BRC[10:0]=0 if present. Secondly the next linked-list data structure is conditionally uploaded from memory as defined by GPDMA_CxLLR. Then channel execution is completed. Note: This bit must be written when EN=0. This bit is read-only when EN=1.
    static constexpr uint32_t GPDMA_C5CR_LAP = 0x20000; // linked-list allocated port This bit is used to allocate the master port for the update of the GPDMA linked-list registers from the memory. Note: This bit must be written when EN=0. This bit is read-only when EN=1.
    typedef bit_field_t<22, 0x3> GPDMA_C5CR_PRIO; // priority level of the channel x GPDMA transfer versus others Note: This bit must be written when EN=0. This bit is read-only when EN=1.


    static constexpr uint32_t GPDMA_C5TR1_RESET_VALUE = 0x0; // Reset value
    typedef bit_field_t<0, 0x3> GPDMA_C5TR1_SDW_LOG2; // binary logarithm of the source data width of a burst in bytes Note: Setting a 8-byte data width causes a user setting error to be reported and no transfer is issued. A source block size must be a multiple of the source data width (GPDMA_CxBR1.BNDT[2:0] versus SDW_LOG2[1:0]). Otherwise, a user setting error is reported and no transfer is issued. A source single transfer must have an aligned address with its data width (start address GPDMA_CxSAR[2:0] versus SDW_LOG2[1:0]). Otherwise, a user setting error is reported and none transfer is issued.
    static constexpr uint32_t GPDMA_C5TR1_SINC = 0x8; // source incrementing burst The source address, pointed by GPDMA_CxSAR, is kept constant after a burst beat/single transfer or is incremented by the offset value corresponding to a contiguous data after a burst beat/single transfer.
    typedef bit_field_t<4, 0x3f> GPDMA_C5TR1_SBL_1; // source burst length minus 1, between 0 and 63 The burst length unit is one data named beat within a burst. If SBL_1[5:0]=0, the burst can be named as single. Each data/beat has a width defined by the destination data width SDW_LOG2[1:0]. Note: If a burst transfer crossed a 1-Kbyte address boundary on a AHB transfer, the GPDMA modifies and shortens the programmed burst into singles or bursts of lower length, to be compliant with the AHB protocol. If a burst transfer is of length greater than the FIFO size of the channel x, the GPDMA modifies and shortens the programmed burst into singles or bursts of lower length, to be compliant with the FIFO size. Transfer performance is lower, with GPDMA re-arbitration between effective and lower bursts/singles, but the data integrity is guaranteed.
    typedef bit_field_t<11, 0x3> GPDMA_C5TR1_PAM; // padding/alignment mode If DDW_LOG2[1:0] = SDW_LOG2[1:0]: if the data width of a burst destination transfer is equal to the data width of a burst source transfer, these bits are ignored. Else: - Case 1: If destination data width &gt; source data width 1x: successive source data are FIFO queued and packed at the destination data width, in a left (LSB) to right (MSB) order (named little endian), before a destination transfer - Case 2: If destination data width &lt; source data width 1x: source data is FIFO queued and unpacked at the destination data width, to be transferred in a left (LSB) to right (MSB) order (named little endian) to the destination Note:
    static constexpr uint32_t GPDMA_C5TR1_SBX = 0x2000; // source byte exchange within the unaligned half-word of each source word If the source data width is shorter than a word, this bit is ignored. If the source data width is a word:
    static constexpr uint32_t GPDMA_C5TR1_SAP = 0x4000; // source allocated port This bit is used to allocate the master port for the source transfer Note: This bit must be written when EN=0. This bit is read-only when EN=1.
    static constexpr uint32_t GPDMA_C5TR1_SSEC = 0x8000; // security attribute of the GPDMA transfer from the source If GPDMA_SECCFGR.SECx=1 and the access is secure: This is a secure register bit. This bit can only be read by a secure software. This bit must be written by a secure software when GPDMA_SECCFGR.SECx=1. A secure write is ignored when GPDMA_SECCFGR.SECx=0. When GPDMA_SECCFGR.SECx is de-asserted, this SSEC bit is also de-asserted by hardware (on a secure reconfiguration of the channel as non-secure), and the GPDMA transfer from the source is non-secure.
    typedef bit_field_t<16, 0x3> GPDMA_C5TR1_DDW_LOG2; // binary logarithm of the destination data width of a burst, in bytes Note: Setting a 8-byte data width causes a user setting error to be reported and none transfer is issued. A destination burst transfer must have an aligned address with its data width (start address GPDMA_CxDAR[2:0] and address offset GPDMA_CxTR3.DAO[2:0], versus DDW_LOG2[1:0]). Otherwise a user setting error is reported and no transfer is issued.
    static constexpr uint32_t GPDMA_C5TR1_DINC = 0x80000; // destination incrementing burst The destination address, pointed by GPDMA_CxDAR, is kept constant after a burst beat/single transfer, or is incremented by the offset value corresponding to a contiguous data after a burst beat/single transfer.
    typedef bit_field_t<20, 0x3f> GPDMA_C5TR1_DBL_1; // destination burst length minus 1, between 0 and 63 The burst length unit is one data named beat within a burst. If DBL_1[5:0]=0, the burst can be named as single. Each data/beat has a width defined by the destination data width DDW_LOG2[1:0]. Note: If a burst transfer crossed a 1-Kbyte address boundary on a AHB transfer, the GPDMA modifies and shortens the programmed burst into singles or bursts of lower length, to be compliant with the AHB protocol. If a burst transfer is of length greater than the FIFO size of the channel x, the GPDMA modifies and shortens the programmed burst into singles or bursts of lower length, to be compliant with the FIFO size. Transfer performance is lower, with GPDMA re-arbitration between effective and lower bursts/singles, but the data integrity is guaranteed.
    static constexpr uint32_t GPDMA_C5TR1_DBX = 0x4000000; // destination byte exchange If the destination data size is a byte, this bit is ignored. If the destination data size is not a byte:
    static constexpr uint32_t GPDMA_C5TR1_DHX = 0x8000000; // destination half-word exchange If the destination data size is shorter than a word, this bit is ignored. If the destination data size is a word:
    static constexpr uint32_t GPDMA_C5TR1_DAP = 0x40000000; // destination allocated port This bit is used to allocate the master port for the destination transfer Note: This bit must be written when EN=0. This bit is read-only when EN=1.
    static constexpr uint32_t GPDMA_C5TR1_DSEC = 0x80000000; // security attribute of the GPDMA transfer to the destination If GPDMA_SECCFGR.SECx=1 and the access is secure: This is a secure register bit. This bit can only be read by a secure software. This bit must be written by a secure software when GPDMA_SECCFGR.SECx=1. A secure write is ignored when GPDMA_SECCFGR.SECx=0. When GPDMA_SECCFGR.SECx is de-asserted, this DSEC bit is also de-asserted by hardware (on a secure reconfiguration of the channel as non-secure), and the GPDMA transfer to the destination is non-secure.

    static constexpr uint32_t GPDMA_C5TR2_RESET_VALUE = 0x0; // Reset value
    typedef bit_field_t<0, 0x7f> GPDMA_C5TR2_REQSEL; // GPDMA hardware request selection These bits are ignored if channel x is activated (GPDMA_CxCR.EN asserted) with SWREQ=1 (software request for a memory-to-memory transfer). Else, the selected hardware request is internally taken into account as per . The user must not assign a same input hardware request (same REQSEL[6:0] value) to different active GPDMA channels (GPDMA_CxCR.EN=1 and GPDMA_CxTR2.SWREQ=0 for these channels). GPDMA is not intended to hardware support the case of simultaneous enabled channels incorrectly configured with a same hardware peripheral request signal, and there is no user setting error reporting.
    static constexpr uint32_t GPDMA_C5TR2_SWREQ = 0x200; // software request This bit is internally taken into account when GPDMA_CxCR.EN is asserted.
    static constexpr uint32_t GPDMA_C5TR2_DREQ = 0x400; // destination hardware request This bit is ignored if channel x is activated (GPDMA_CxCR.EN asserted) with SWREQ=1 (software request for a memory-to-memory transfer). Else: Note:
    static constexpr uint32_t GPDMA_C5TR2_BREQ = 0x800; // Block hardware request If the channel x is activated (GPDMA_CxCR.EN asserted) with SWREQ=1 (software request for a memory-to-memory transfer), this bit is ignored. Else:
    typedef bit_field_t<14, 0x3> GPDMA_C5TR2_TRIGM; // trigger mode These bits define the transfer granularity for its conditioning by the trigger. If the channel x is enabled (GPDMA_CxCR.EN asserted) with TRIGPOL[1:0]=00 or 11, these TRIGM[1:0] bits are ignored. Else, a GPDMA transfer is conditioned by at least one trigger hit: first burst read of a 2D/repeated block transfer is conditioned by one hit trigger. If the peripheral is programmed as a source (DREQ=0) of the LLI data transfer, each programmed burst read is conditioned. If the peripheral is programmed as a destination (DREQ=1) of the LLI data transfer, each programmed burst write is conditioned. The first memory burst read of a (possibly 2D/repeated) block, also named as the first ready FIFO-based source burst, is gated by the occurrence of both the hardware request and the first trigger hit. The GPDMA monitoring of a trigger for channel x is started when the channel is enabled/loaded with a new active trigger configuration: rising or falling edge on a selected trigger (TRIGPOL[1:0]=01 or respectively TRIGPOL[1:0]=10). The monitoring of this trigger is kept active during the triggered and uncompleted (data or link) transfer; and if a new trigger is detected then, this hit is internally memorized to grant the next transfer, as long as the defined rising or falling edge is not modified, and the TRIGSEL[5:0] is not modified, and the channel is enabled. Transferring a next LLIn+1 that updates the GPDMA_CxTR2 with a new value for any of TRIGSEL[5:0] or TRIGPOL[1:0], resets the monitoring, trashing the memorized hit of the formerly defined LLIn trigger. After a first new trigger hitn+1 is memorized, if another second trigger hitn+2 is detected and if the hitn triggered transfer is still not completed, hitn+2 is lost and not memorized.memorized. A trigger overrun flag is reported (GPDMA_CxSR.TOF=1), and an interrupt is generated if enabled (GPDMA_CxCR.TOIE=1). The channel is not automatically disabled by hardware due to a trigger overrun. Note: When the source block size is not a multiple of the source burst size and is a multiple of the source data width, then the last programmed source burst is not completed and is internally shorten to match the block size. In this case, if TRIGM[1:0]=11 and (SWREQ=1 or (SWREQ=0 and DREQ=0)), the shortened burst transfer (by singles or/and by bursts of lower length) is conditioned once by the trigger. When the programmed destination burst is internally shortened by singles or/and by bursts of lower length (versus FIFO size, versus block size, 1-Kbyte boundary address crossing): if the trigger is conditioning the programmed destination burst (if TRIGM[1:0]=11 and SWREQ=0 and DREQ=1), this shortened destination burst transfer is conditioned once by the trigger.
    typedef bit_field_t<16, 0x3f> GPDMA_C5TR2_TRIGSEL; // trigger event input selection These bits select the trigger event input of the GPDMA transfer (as per ), with an active trigger event if TRIGPOL[1:0]00.
    typedef bit_field_t<24, 0x3> GPDMA_C5TR2_TRIGPOL; // trigger event polarity These bits define the polarity of the selected trigger event input defined by TRIGSEL[5:0].
    typedef bit_field_t<30, 0x3> GPDMA_C5TR2_TCEM; // transfer complete event mode These bits define the transfer granularity for the transfer complete and half transfer complete events generation. Note: If the initial LLI0 data transfer is null/void (directly programmed by the internal register file with GPDMA_CxBR1.BNDT[15:0]=0), then neither the complete transfer event nor the half transfer event is generated. Note: If the initial LLI0 data transfer is null/void (directly programmed by the internal register file with GPDMA_CxBR1.BNDT[15:0]=0), then neither the complete transfer event nor the half transfer event is generated. Note: If the initial LLI0 data transfer is null/void (i.e. directly programmed by the internal register file with GPDMA_CxBR1.BNDT[15:0]=0), then the half transfer event is not generated, and the transfer complete event is generated when is completed the loading of the LLI1.

    static constexpr uint32_t GPDMA_C5BR1_RESET_VALUE = 0x0; // Reset value
    typedef bit_field_t<0, 0xffff> GPDMA_C5BR1_BNDT; // block number of data bytes to transfer from the source Block size transferred from the source. When the channel is enabled, this field becomes read-only and is decremented, indicating the remaining number of data items in the current source block to be transferred. BNDT[15:0] is programmed in number of bytes, maximum source block size is 64Kbytes -1. Once the last data transfer is completed (BNDT[15:0]=0): - if GPDMA_CxLLR.UB1=1, this field is updated by the LLI in the memory. - if GPDMA_CxLLR.UB1=0 and if there is at least one non null Uxx update bit, this field is internally restored to the programmed value. - if all GPDMA_CxLLR.Uxx=0 and if GPDMA_CxLLR.LA[15:0]=0, this field is internally restored to the programmed value (infinite/continuous last LLI). - if GPDMA_CxLLR=0, this field is kept as zero following the last LLI data transfer. Note: A non-null source block size must be a multiple of the source data width (BNDT[2:0] versus GPDMA_CxTR1.SDW_LOG2[1:0]). Else a user setting error is reported and no transfer is issued. When configured in packing mode (GPDMA_CxTR1.PAM[1]=1 and destination data width different from source data width), a non-null source block size must be a multiple of the destination data width (BNDT[2:0] versus GPDMA_CxTR1.DDW_LOG2[1:0]). Else a user setting error is reported and no transfer is issued.

    static constexpr uint32_t GPDMA_C5SAR_RESET_VALUE = 0x0; // Reset value
    typedef bit_field_t<0, 0xffffffff> GPDMA_C5SAR_SA; // source address This field is the pointer to the address from which the next data is read. During the channel activity, depending on the source addressing mode (GPDMA_CxTR1.SINC), this field is kept fixed or incremented by the data width (GPDMA_CxTR1.SDW_LOG2[1:0]) after each single source data, reflecting the next address from which data is read. During the channel activity, this address is updated after each completed source burst, consequently to: the programmed source burst; either in fixed addressing mode or in contiguous-data incremented mode. If contiguously incremented (GPDMA_CxTR1.SINC = 1), then the additional address offset value is the programmed burst size, as defined by GPDMA_CxTR1.SBL_1[5:0] and GPDMA_CxTR1.SDW_LOG2[21:0] the additional source incremented/decremented offset value as programmed by GPDMA_CxBR1.SDEC and GPDMA_CxTR3.SAO[12:0] once/if completed source block transfer, for a channel x with 2D addressing capability (x = 12 to 15). additional block repeat source incremented/decremented offset value as programmed by GPDMA_CxBR1.BRSDEC and GPDMA_CxBR2.BRSAO[15:0] In linked-list mode, after a LLI data transfer is completed, this register is automatically updated by GPDMA from the memory, provided the LLI is set with GPDMA_CxLLR.USA=1. Note: A source address must be aligned with the programmed data width of a source single (SA[2:0] versus GPDMA_CxTR1.SDW_LOG2[1:0]). Else, a user setting error is reported and no transfer is issued. When the source block size is not a multiple of the source burst size and is a multiple of the source data width, the last programmed source burst is not completed and is internally shorten to match the block size. In this case, the additional GPDMA_CxTR3.SAO[12:0] is not applied.

    static constexpr uint32_t GPDMA_C5DAR_RESET_VALUE = 0x0; // Reset value
    typedef bit_field_t<0, 0xffffffff> GPDMA_C5DAR_DA; // destination address This field is the pointer to the address from which the next data is written. During the channel activity, depending on the destination addressing mode (GPDMA_CxTR1.DINC), this field is kept fixed or incremented by the data width (GPDMA_CxTR1.DDW_LOG2[21:0]) after each single destination data, reflecting the next address from which data is written. During the channel activity, this address is updated after each completed destination burst, consequently to: the programmed destination burst; either in fixed addressing mode or in contiguous-data incremented mode. If contiguously incremented (GPDMA_CxTR1.DINC = 1), then the additional address offset value is the programmed burst size, as defined by GPDMA_CxTR1.DBL_1[5:0] and GPDMA_CxTR1.DDW_LOG2[1:0] the additional destination incremented/decremented offset value as programmed by GPDMA_CxBR1.DDEC and GPDMA_CxTR3.DAO[12:0] once/if completed destination block transfer, for a channel x with 2D addressing capability (x=12to15), the additional block repeat destination incremented/decremented offset value as programmed by GPDMA_CxBR1.BRDDEC and GPDMA_CxBR2.BRDAO[15:0] In linked-list mode, after a LLI data transfer is completed, this register is automatically updated by the GPDMA from the memory, provided the LLI is set with GPDMA_CxLLR.UDA=1. Note: A destination address must be aligned with the programmed data width of a destination burst (DA[2:0] versus GPDMA_CxTR1.DDW_LOG2[1:0]). Else, a user setting error is reported and no transfer is issued.


    static constexpr uint32_t GPDMA_C5LLR_RESET_VALUE = 0x0; // Reset value
    typedef bit_field_t<2, 0x3fff> GPDMA_C5LLR_LA; // pointer (16-bit low-significant address) to the next linked-list data structure If UT1=UT2=UB1=USA=UDA=ULL=0 and if LA[15:20]=0, the current LLI is the last one. The channel transfer is completed without any update of the linked-list GPDMA register file. Else, this field is the pointer to the memory address offset from which the next linked-list data structure is automatically fetched from, once the data transfer is completed, in order to conditionally update the linked-list GPDMA internal register file (GPDMA_CxCTR1, GPDMA_CxTR2, GPDMA_CxBR1, GPDMA_CxSAR, GPDMA_CxDAR and GPDMA_CxLLR). Note: The user must program the pointer to be 32-bit aligned. The two low-significant bits are write ignored.
    static constexpr uint32_t GPDMA_C5LLR_ULL = 0x10000; // Update GPDMA_CxLLR register from memory This bit is used to control the update of GPDMA_CxLLR from the memory during the link transfer.
    static constexpr uint32_t GPDMA_C5LLR_UDA = 0x8000000; // Update GPDMA_CxDAR register from memory This bit is used to control the update of GPDMA_CxDAR from the memory during the link transfer.
    static constexpr uint32_t GPDMA_C5LLR_USA = 0x10000000; // update GPDMA_CxSAR from memory This bit controls the update of GPDMA_CxSAR from the memory during the link transfer.
    static constexpr uint32_t GPDMA_C5LLR_UB1 = 0x20000000; // Update GPDMA_CxBR1 from memory This bit controls the update of GPDMA_CxBR1 from the memory during the link transfer. If UB1=0 and if GPDMA_CxLLR0, the linked-list is not completed. GPDMA_CxBR1.BNDT[15:0] is then restored to the programmed value after data transfer is completed and before the link transfer.
    static constexpr uint32_t GPDMA_C5LLR_UT2 = 0x40000000; // Update GPDMA_CxTR2 from memory This bit controls the update of GPDMA_CxTR2 from the memory during the link transfer.
    static constexpr uint32_t GPDMA_C5LLR_UT1 = 0x80000000; // Update GPDMA_CxTR1 from memory This bit controls the update of GPDMA_CxTR1 from the memory during the link transfer.

    static constexpr uint32_t GPDMA_C6LBAR_RESET_VALUE = 0x0; // Reset value
    typedef bit_field_t<16, 0xffff> GPDMA_C6LBAR_LBA; // linked-list base address of GPDMA channel x


    static constexpr uint32_t GPDMA_C6FCR_RESET_VALUE = 0x0; // Reset value
    static constexpr uint32_t GPDMA_C6FCR_TCF = 0x100; // transfer complete flag clear
    static constexpr uint32_t GPDMA_C6FCR_HTF = 0x200; // half transfer flag clear
    static constexpr uint32_t GPDMA_C6FCR_DTEF = 0x400; // data transfer error flag clear
    static constexpr uint32_t GPDMA_C6FCR_ULEF = 0x800; // update link transfer error flag clear
    static constexpr uint32_t GPDMA_C6FCR_USEF = 0x1000; // user setting error flag clear
    static constexpr uint32_t GPDMA_C6FCR_SUSPF = 0x2000; // completed suspension flag clear
    static constexpr uint32_t GPDMA_C6FCR_TOF = 0x4000; // trigger overrun flag clear

    static constexpr uint32_t GPDMA_C6SR_RESET_VALUE = 0x1; // Reset value
    static constexpr uint32_t GPDMA_C6SR_IDLEF = 0x1; // idle flag This idle flag is de-asserted by hardware when the channel is enabled (GPDMA_CxCR.EN=1) with a valid channel configuration (no USEF to be immediately reported). This idle flag is asserted after hard reset or by hardware when the channel is back in idle state (in suspended or disabled state).
    static constexpr uint32_t GPDMA_C6SR_TCF = 0x100; // transfer complete flag A transfer complete event is either a block transfer complete, a 2D/repeated block transfer complete, a LLI transfer complete including the upload of the next LLI if any, or the full linked-list completion, depending on the transfer complete event mode (GPDMA_CxTR2.TCEM[1:0]).
    static constexpr uint32_t GPDMA_C6SR_HTF = 0x200; // half transfer flag An half transfer event is either an half block transfer or an half 2D/repeated block transfer, depending on the transfer complete event mode (GPDMA_CxTR2.TCEM[1:0]). An half block transfer occurs when half of the bytes of the source block size (rounded up integer of GPDMA_CxBR1.BNDT[15:0]/2) has been transferred to the destination. An half 2D/repeated block transfer occurs when half of the repeated blocks (rounded up integer of (GPDMA_CxBR1.BRC[10:0]+1)/2)) has been transferred to the destination.
    static constexpr uint32_t GPDMA_C6SR_DTEF = 0x400; // data transfer error flag
    static constexpr uint32_t GPDMA_C6SR_ULEF = 0x800; // update link transfer error flag
    static constexpr uint32_t GPDMA_C6SR_USEF = 0x1000; // user setting error flag
    static constexpr uint32_t GPDMA_C6SR_SUSPF = 0x2000; // completed suspension flag
    static constexpr uint32_t GPDMA_C6SR_TOF = 0x4000; // trigger overrun flag
    typedef bit_field_t<16, 0xff> GPDMA_C6SR_FIFOL; // monitored FIFO level Number of available write beats in the FIFO, in units of the programmed destination data width (see GPDMA_CxTR1.DDW_LOG2[1:0], in units of bytes, half-words, or words). Note: After having suspended an active transfer, the user may need to read FIFOL[7:0], additionally to GPDMA_CxBR1.BDNT[15:0] and GPDMA_CxBR1.BRC[10:0], to know how many data have been transferred to the destination. Before reading, the user may wait for the transfer to be suspended (GPDMA_CxSR.SUSPF=1).

    static constexpr uint32_t GPDMA_C6CR_RESET_VALUE = 0x0; // Reset value
    static constexpr uint32_t GPDMA_C6CR_EN = 0x1; // enable Writing 1 into the field RESET (bit 1) causes the hardware to de-assert this bit, whatever is written into this bit 0. Else: this bit is de-asserted by hardware when there is a transfer error (master bus error or user setting error) or when there is a channel transfer complete (channel ready to be configured, e.g. if LSM=1 at the end of a single execution of the LLI). Else, this bit can be asserted by software. Writing 0 into this EN bit is ignored.
    static constexpr uint32_t GPDMA_C6CR_RESET = 0x2; // reset This bit is write only. Writing 0 has no impact. Writing 1 implies the reset of the following: the FIFO, the channel internal state, SUSP and EN bits (whatever is written receptively in bit 2 and bit 0). The reset is effective when the channel is in steady state, meaning one of the following: - active channel in suspended state (GPDMA_CxSR.SUSPF=1 and GPDMA_CxSR.IDLEF=GPDMA_CxCR.EN=1) - channel in disabled state (GPDMA_CxSR.IDLEF=1 and GPDMA_CxCR.EN=0). After writing a RESET, to continue using this channel, the user must explicitly reconfigure the channel including the hardware-modified configuration registers (GPDMA_CxBR1, GPDMA_CxSAR and GPDMA_CxDAR) before enabling again the channel (see the programming sequence in ).
    static constexpr uint32_t GPDMA_C6CR_SUSP = 0x4; // suspend Writing 1 into the field RESET (bit 1) causes the hardware to de-assert this bit, whatever is written into this bit 2. Else: Software must write 1 in order to suspend an active channel i.e. a channel with an on-going GPDMA transfer over its master ports. The software must write 0 in order to resume a suspended channel, following the programming sequence detailed in .
    static constexpr uint32_t GPDMA_C6CR_TCIE = 0x100; // transfer complete interrupt enable
    static constexpr uint32_t GPDMA_C6CR_HTIE = 0x200; // half transfer complete interrupt enable
    static constexpr uint32_t GPDMA_C6CR_DTEIE = 0x400; // data transfer error interrupt enable
    static constexpr uint32_t GPDMA_C6CR_ULEIE = 0x800; // update link transfer error interrupt enable
    static constexpr uint32_t GPDMA_C6CR_USEIE = 0x1000; // user setting error interrupt enable
    static constexpr uint32_t GPDMA_C6CR_SUSPIE = 0x2000; // completed suspension interrupt enable
    static constexpr uint32_t GPDMA_C6CR_TOIE = 0x4000; // trigger overrun interrupt enable
    static constexpr uint32_t GPDMA_C6CR_LSM = 0x10000; // Link step mode First the (possible 1D/repeated) block transfer is executed as defined by the current internal register file until GPDMA_CxBR1.BNDT[15:0]=0 and GPDMA_CxBR1.BRC[10:0]=0 if present. Secondly the next linked-list data structure is conditionally uploaded from memory as defined by GPDMA_CxLLR. Then channel execution is completed. Note: This bit must be written when EN=0. This bit is read-only when EN=1.
    static constexpr uint32_t GPDMA_C6CR_LAP = 0x20000; // linked-list allocated port This bit is used to allocate the master port for the update of the GPDMA linked-list registers from the memory. Note: This bit must be written when EN=0. This bit is read-only when EN=1.
    typedef bit_field_t<22, 0x3> GPDMA_C6CR_PRIO; // priority level of the channel x GPDMA transfer versus others Note: This bit must be written when EN=0. This bit is read-only when EN=1.


    static constexpr uint32_t GPDMA_C6TR1_RESET_VALUE = 0x0; // Reset value
    typedef bit_field_t<0, 0x3> GPDMA_C6TR1_SDW_LOG2; // binary logarithm of the source data width of a burst in bytes Note: Setting a 8-byte data width causes a user setting error to be reported and no transfer is issued. A source block size must be a multiple of the source data width (GPDMA_CxBR1.BNDT[2:0] versus SDW_LOG2[1:0]). Otherwise, a user setting error is reported and no transfer is issued. A source single transfer must have an aligned address with its data width (start address GPDMA_CxSAR[2:0] versus SDW_LOG2[1:0]). Otherwise, a user setting error is reported and none transfer is issued.
    static constexpr uint32_t GPDMA_C6TR1_SINC = 0x8; // source incrementing burst The source address, pointed by GPDMA_CxSAR, is kept constant after a burst beat/single transfer or is incremented by the offset value corresponding to a contiguous data after a burst beat/single transfer.
    typedef bit_field_t<4, 0x3f> GPDMA_C6TR1_SBL_1; // source burst length minus 1, between 0 and 63 The burst length unit is one data named beat within a burst. If SBL_1[5:0]=0, the burst can be named as single. Each data/beat has a width defined by the destination data width SDW_LOG2[1:0]. Note: If a burst transfer crossed a 1-Kbyte address boundary on a AHB transfer, the GPDMA modifies and shortens the programmed burst into singles or bursts of lower length, to be compliant with the AHB protocol. If a burst transfer is of length greater than the FIFO size of the channel x, the GPDMA modifies and shortens the programmed burst into singles or bursts of lower length, to be compliant with the FIFO size. Transfer performance is lower, with GPDMA re-arbitration between effective and lower bursts/singles, but the data integrity is guaranteed.
    typedef bit_field_t<11, 0x3> GPDMA_C6TR1_PAM; // padding/alignment mode If DDW_LOG2[1:0] = SDW_LOG2[1:0]: if the data width of a burst destination transfer is equal to the data width of a burst source transfer, these bits are ignored. Else: - Case 1: If destination data width &gt; source data width 1x: successive source data are FIFO queued and packed at the destination data width, in a left (LSB) to right (MSB) order (named little endian), before a destination transfer - Case 2: If destination data width &lt; source data width 1x: source data is FIFO queued and unpacked at the destination data width, to be transferred in a left (LSB) to right (MSB) order (named little endian) to the destination Note:
    static constexpr uint32_t GPDMA_C6TR1_SBX = 0x2000; // source byte exchange within the unaligned half-word of each source word If the source data width is shorter than a word, this bit is ignored. If the source data width is a word:
    static constexpr uint32_t GPDMA_C6TR1_SAP = 0x4000; // source allocated port This bit is used to allocate the master port for the source transfer Note: This bit must be written when EN=0. This bit is read-only when EN=1.
    static constexpr uint32_t GPDMA_C6TR1_SSEC = 0x8000; // security attribute of the GPDMA transfer from the source If GPDMA_SECCFGR.SECx=1 and the access is secure: This is a secure register bit. This bit can only be read by a secure software. This bit must be written by a secure software when GPDMA_SECCFGR.SECx=1. A secure write is ignored when GPDMA_SECCFGR.SECx=0. When GPDMA_SECCFGR.SECx is de-asserted, this SSEC bit is also de-asserted by hardware (on a secure reconfiguration of the channel as non-secure), and the GPDMA transfer from the source is non-secure.
    typedef bit_field_t<16, 0x3> GPDMA_C6TR1_DDW_LOG2; // binary logarithm of the destination data width of a burst, in bytes Note: Setting a 8-byte data width causes a user setting error to be reported and none transfer is issued. A destination burst transfer must have an aligned address with its data width (start address GPDMA_CxDAR[2:0] and address offset GPDMA_CxTR3.DAO[2:0], versus DDW_LOG2[1:0]). Otherwise a user setting error is reported and no transfer is issued.
    static constexpr uint32_t GPDMA_C6TR1_DINC = 0x80000; // destination incrementing burst The destination address, pointed by GPDMA_CxDAR, is kept constant after a burst beat/single transfer, or is incremented by the offset value corresponding to a contiguous data after a burst beat/single transfer.
    typedef bit_field_t<20, 0x3f> GPDMA_C6TR1_DBL_1; // destination burst length minus 1, between 0 and 63 The burst length unit is one data named beat within a burst. If DBL_1[5:0]=0, the burst can be named as single. Each data/beat has a width defined by the destination data width DDW_LOG2[1:0]. Note: If a burst transfer crossed a 1-Kbyte address boundary on a AHB transfer, the GPDMA modifies and shortens the programmed burst into singles or bursts of lower length, to be compliant with the AHB protocol. If a burst transfer is of length greater than the FIFO size of the channel x, the GPDMA modifies and shortens the programmed burst into singles or bursts of lower length, to be compliant with the FIFO size. Transfer performance is lower, with GPDMA re-arbitration between effective and lower bursts/singles, but the data integrity is guaranteed.
    static constexpr uint32_t GPDMA_C6TR1_DBX = 0x4000000; // destination byte exchange If the destination data size is a byte, this bit is ignored. If the destination data size is not a byte:
    static constexpr uint32_t GPDMA_C6TR1_DHX = 0x8000000; // destination half-word exchange If the destination data size is shorter than a word, this bit is ignored. If the destination data size is a word:
    static constexpr uint32_t GPDMA_C6TR1_DAP = 0x40000000; // destination allocated port This bit is used to allocate the master port for the destination transfer Note: This bit must be written when EN=0. This bit is read-only when EN=1.
    static constexpr uint32_t GPDMA_C6TR1_DSEC = 0x80000000; // security attribute of the GPDMA transfer to the destination If GPDMA_SECCFGR.SECx=1 and the access is secure: This is a secure register bit. This bit can only be read by a secure software. This bit must be written by a secure software when GPDMA_SECCFGR.SECx=1. A secure write is ignored when GPDMA_SECCFGR.SECx=0. When GPDMA_SECCFGR.SECx is de-asserted, this DSEC bit is also de-asserted by hardware (on a secure reconfiguration of the channel as non-secure), and the GPDMA transfer to the destination is non-secure.

    static constexpr uint32_t GPDMA_C6TR2_RESET_VALUE = 0x0; // Reset value
    typedef bit_field_t<0, 0x7f> GPDMA_C6TR2_REQSEL; // GPDMA hardware request selection These bits are ignored if channel x is activated (GPDMA_CxCR.EN asserted) with SWREQ=1 (software request for a memory-to-memory transfer). Else, the selected hardware request is internally taken into account as per . The user must not assign a same input hardware request (same REQSEL[6:0] value) to different active GPDMA channels (GPDMA_CxCR.EN=1 and GPDMA_CxTR2.SWREQ=0 for these channels). GPDMA is not intended to hardware support the case of simultaneous enabled channels incorrectly configured with a same hardware peripheral request signal, and there is no user setting error reporting.
    static constexpr uint32_t GPDMA_C6TR2_SWREQ = 0x200; // software request This bit is internally taken into account when GPDMA_CxCR.EN is asserted.
    static constexpr uint32_t GPDMA_C6TR2_DREQ = 0x400; // destination hardware request This bit is ignored if channel x is activated (GPDMA_CxCR.EN asserted) with SWREQ=1 (software request for a memory-to-memory transfer). Else: Note:
    static constexpr uint32_t GPDMA_C6TR2_BREQ = 0x800; // Block hardware request If the channel x is activated (GPDMA_CxCR.EN asserted) with SWREQ=1 (software request for a memory-to-memory transfer), this bit is ignored. Else:
    typedef bit_field_t<14, 0x3> GPDMA_C6TR2_TRIGM; // trigger mode These bits define the transfer granularity for its conditioning by the trigger. If the channel x is enabled (GPDMA_CxCR.EN asserted) with TRIGPOL[1:0]=00 or 11, these TRIGM[1:0] bits are ignored. Else, a GPDMA transfer is conditioned by at least one trigger hit: first burst read of a 2D/repeated block transfer is conditioned by one hit trigger. If the peripheral is programmed as a source (DREQ=0) of the LLI data transfer, each programmed burst read is conditioned. If the peripheral is programmed as a destination (DREQ=1) of the LLI data transfer, each programmed burst write is conditioned. The first memory burst read of a (possibly 2D/repeated) block, also named as the first ready FIFO-based source burst, is gated by the occurrence of both the hardware request and the first trigger hit. The GPDMA monitoring of a trigger for channel x is started when the channel is enabled/loaded with a new active trigger configuration: rising or falling edge on a selected trigger (TRIGPOL[1:0]=01 or respectively TRIGPOL[1:0]=10). The monitoring of this trigger is kept active during the triggered and uncompleted (data or link) transfer; and if a new trigger is detected then, this hit is internally memorized to grant the next transfer, as long as the defined rising or falling edge is not modified, and the TRIGSEL[5:0] is not modified, and the channel is enabled. Transferring a next LLIn+1 that updates the GPDMA_CxTR2 with a new value for any of TRIGSEL[5:0] or TRIGPOL[1:0], resets the monitoring, trashing the memorized hit of the formerly defined LLIn trigger. After a first new trigger hitn+1 is memorized, if another second trigger hitn+2 is detected and if the hitn triggered transfer is still not completed, hitn+2 is lost and not memorized.memorized. A trigger overrun flag is reported (GPDMA_CxSR.TOF=1), and an interrupt is generated if enabled (GPDMA_CxCR.TOIE=1). The channel is not automatically disabled by hardware due to a trigger overrun. Note: When the source block size is not a multiple of the source burst size and is a multiple of the source data width, then the last programmed source burst is not completed and is internally shorten to match the block size. In this case, if TRIGM[1:0]=11 and (SWREQ=1 or (SWREQ=0 and DREQ=0)), the shortened burst transfer (by singles or/and by bursts of lower length) is conditioned once by the trigger. When the programmed destination burst is internally shortened by singles or/and by bursts of lower length (versus FIFO size, versus block size, 1-Kbyte boundary address crossing): if the trigger is conditioning the programmed destination burst (if TRIGM[1:0]=11 and SWREQ=0 and DREQ=1), this shortened destination burst transfer is conditioned once by the trigger.
    typedef bit_field_t<16, 0x3f> GPDMA_C6TR2_TRIGSEL; // trigger event input selection These bits select the trigger event input of the GPDMA transfer (as per ), with an active trigger event if TRIGPOL[1:0]00.
    typedef bit_field_t<24, 0x3> GPDMA_C6TR2_TRIGPOL; // trigger event polarity These bits define the polarity of the selected trigger event input defined by TRIGSEL[5:0].
    typedef bit_field_t<30, 0x3> GPDMA_C6TR2_TCEM; // transfer complete event mode These bits define the transfer granularity for the transfer complete and half transfer complete events generation. Note: If the initial LLI0 data transfer is null/void (directly programmed by the internal register file with GPDMA_CxBR1.BNDT[15:0]=0), then neither the complete transfer event nor the half transfer event is generated. Note: If the initial LLI0 data transfer is null/void (directly programmed by the internal register file with GPDMA_CxBR1.BNDT[15:0]=0), then neither the complete transfer event nor the half transfer event is generated. Note: If the initial LLI0 data transfer is null/void (i.e. directly programmed by the internal register file with GPDMA_CxBR1.BNDT[15:0]=0), then the half transfer event is not generated, and the transfer complete event is generated when is completed the loading of the LLI1.

    static constexpr uint32_t GPDMA_C6BR1_RESET_VALUE = 0x0; // Reset value
    typedef bit_field_t<0, 0xffff> GPDMA_C6BR1_BNDT; // block number of data bytes to transfer from the source Block size transferred from the source. When the channel is enabled, this field becomes read-only and is decremented, indicating the remaining number of data items in the current source block to be transferred. BNDT[15:0] is programmed in number of bytes, maximum source block size is 64Kbytes -1. Once the last data transfer is completed (BNDT[15:0]=0): - if GPDMA_CxLLR.UB1=1, this field is updated by the LLI in the memory. - if GPDMA_CxLLR.UB1=0 and if there is at least one non null Uxx update bit, this field is internally restored to the programmed value. - if all GPDMA_CxLLR.Uxx=0 and if GPDMA_CxLLR.LA[15:0]=0, this field is internally restored to the programmed value (infinite/continuous last LLI). - if GPDMA_CxLLR=0, this field is kept as zero following the last LLI data transfer. Note: A non-null source block size must be a multiple of the source data width (BNDT[2:0] versus GPDMA_CxTR1.SDW_LOG2[1:0]). Else a user setting error is reported and no transfer is issued. When configured in packing mode (GPDMA_CxTR1.PAM[1]=1 and destination data width different from source data width), a non-null source block size must be a multiple of the destination data width (BNDT[2:0] versus GPDMA_CxTR1.DDW_LOG2[1:0]). Else a user setting error is reported and no transfer is issued.

    static constexpr uint32_t GPDMA_C6SAR_RESET_VALUE = 0x0; // Reset value
    typedef bit_field_t<0, 0xffffffff> GPDMA_C6SAR_SA; // source address This field is the pointer to the address from which the next data is read. During the channel activity, depending on the source addressing mode (GPDMA_CxTR1.SINC), this field is kept fixed or incremented by the data width (GPDMA_CxTR1.SDW_LOG2[1:0]) after each single source data, reflecting the next address from which data is read. During the channel activity, this address is updated after each completed source burst, consequently to: the programmed source burst; either in fixed addressing mode or in contiguous-data incremented mode. If contiguously incremented (GPDMA_CxTR1.SINC = 1), then the additional address offset value is the programmed burst size, as defined by GPDMA_CxTR1.SBL_1[5:0] and GPDMA_CxTR1.SDW_LOG2[21:0] the additional source incremented/decremented offset value as programmed by GPDMA_CxBR1.SDEC and GPDMA_CxTR3.SAO[12:0] once/if completed source block transfer, for a channel x with 2D addressing capability (x = 12 to 15). additional block repeat source incremented/decremented offset value as programmed by GPDMA_CxBR1.BRSDEC and GPDMA_CxBR2.BRSAO[15:0] In linked-list mode, after a LLI data transfer is completed, this register is automatically updated by GPDMA from the memory, provided the LLI is set with GPDMA_CxLLR.USA=1. Note: A source address must be aligned with the programmed data width of a source single (SA[2:0] versus GPDMA_CxTR1.SDW_LOG2[1:0]). Else, a user setting error is reported and no transfer is issued. When the source block size is not a multiple of the source burst size and is a multiple of the source data width, the last programmed source burst is not completed and is internally shorten to match the block size. In this case, the additional GPDMA_CxTR3.SAO[12:0] is not applied.

    static constexpr uint32_t GPDMA_C6DAR_RESET_VALUE = 0x0; // Reset value
    typedef bit_field_t<0, 0xffffffff> GPDMA_C6DAR_DA; // destination address This field is the pointer to the address from which the next data is written. During the channel activity, depending on the destination addressing mode (GPDMA_CxTR1.DINC), this field is kept fixed or incremented by the data width (GPDMA_CxTR1.DDW_LOG2[21:0]) after each single destination data, reflecting the next address from which data is written. During the channel activity, this address is updated after each completed destination burst, consequently to: the programmed destination burst; either in fixed addressing mode or in contiguous-data incremented mode. If contiguously incremented (GPDMA_CxTR1.DINC = 1), then the additional address offset value is the programmed burst size, as defined by GPDMA_CxTR1.DBL_1[5:0] and GPDMA_CxTR1.DDW_LOG2[1:0] the additional destination incremented/decremented offset value as programmed by GPDMA_CxBR1.DDEC and GPDMA_CxTR3.DAO[12:0] once/if completed destination block transfer, for a channel x with 2D addressing capability (x=12to15), the additional block repeat destination incremented/decremented offset value as programmed by GPDMA_CxBR1.BRDDEC and GPDMA_CxBR2.BRDAO[15:0] In linked-list mode, after a LLI data transfer is completed, this register is automatically updated by the GPDMA from the memory, provided the LLI is set with GPDMA_CxLLR.UDA=1. Note: A destination address must be aligned with the programmed data width of a destination burst (DA[2:0] versus GPDMA_CxTR1.DDW_LOG2[1:0]). Else, a user setting error is reported and no transfer is issued.


    static constexpr uint32_t GPDMA_C6LLR_RESET_VALUE = 0x0; // Reset value
    typedef bit_field_t<2, 0x3fff> GPDMA_C6LLR_LA; // pointer (16-bit low-significant address) to the next linked-list data structure If UT1=UT2=UB1=USA=UDA=ULL=0 and if LA[15:20]=0, the current LLI is the last one. The channel transfer is completed without any update of the linked-list GPDMA register file. Else, this field is the pointer to the memory address offset from which the next linked-list data structure is automatically fetched from, once the data transfer is completed, in order to conditionally update the linked-list GPDMA internal register file (GPDMA_CxCTR1, GPDMA_CxTR2, GPDMA_CxBR1, GPDMA_CxSAR, GPDMA_CxDAR and GPDMA_CxLLR). Note: The user must program the pointer to be 32-bit aligned. The two low-significant bits are write ignored.
    static constexpr uint32_t GPDMA_C6LLR_ULL = 0x10000; // Update GPDMA_CxLLR register from memory This bit is used to control the update of GPDMA_CxLLR from the memory during the link transfer.
    static constexpr uint32_t GPDMA_C6LLR_UDA = 0x8000000; // Update GPDMA_CxDAR register from memory This bit is used to control the update of GPDMA_CxDAR from the memory during the link transfer.
    static constexpr uint32_t GPDMA_C6LLR_USA = 0x10000000; // update GPDMA_CxSAR from memory This bit controls the update of GPDMA_CxSAR from the memory during the link transfer.
    static constexpr uint32_t GPDMA_C6LLR_UB1 = 0x20000000; // Update GPDMA_CxBR1 from memory This bit controls the update of GPDMA_CxBR1 from the memory during the link transfer. If UB1=0 and if GPDMA_CxLLR0, the linked-list is not completed. GPDMA_CxBR1.BNDT[15:0] is then restored to the programmed value after data transfer is completed and before the link transfer.
    static constexpr uint32_t GPDMA_C6LLR_UT2 = 0x40000000; // Update GPDMA_CxTR2 from memory This bit controls the update of GPDMA_CxTR2 from the memory during the link transfer.
    static constexpr uint32_t GPDMA_C6LLR_UT1 = 0x80000000; // Update GPDMA_CxTR1 from memory This bit controls the update of GPDMA_CxTR1 from the memory during the link transfer.

    static constexpr uint32_t GPDMA_C7LBAR_RESET_VALUE = 0x0; // Reset value
    typedef bit_field_t<16, 0xffff> GPDMA_C7LBAR_LBA; // linked-list base address of GPDMA channel x


    static constexpr uint32_t GPDMA_C7FCR_RESET_VALUE = 0x0; // Reset value
    static constexpr uint32_t GPDMA_C7FCR_TCF = 0x100; // transfer complete flag clear
    static constexpr uint32_t GPDMA_C7FCR_HTF = 0x200; // half transfer flag clear
    static constexpr uint32_t GPDMA_C7FCR_DTEF = 0x400; // data transfer error flag clear
    static constexpr uint32_t GPDMA_C7FCR_ULEF = 0x800; // update link transfer error flag clear
    static constexpr uint32_t GPDMA_C7FCR_USEF = 0x1000; // user setting error flag clear
    static constexpr uint32_t GPDMA_C7FCR_SUSPF = 0x2000; // completed suspension flag clear
    static constexpr uint32_t GPDMA_C7FCR_TOF = 0x4000; // trigger overrun flag clear

    static constexpr uint32_t GPDMA_C7SR_RESET_VALUE = 0x1; // Reset value
    static constexpr uint32_t GPDMA_C7SR_IDLEF = 0x1; // idle flag This idle flag is de-asserted by hardware when the channel is enabled (GPDMA_CxCR.EN=1) with a valid channel configuration (no USEF to be immediately reported). This idle flag is asserted after hard reset or by hardware when the channel is back in idle state (in suspended or disabled state).
    static constexpr uint32_t GPDMA_C7SR_TCF = 0x100; // transfer complete flag A transfer complete event is either a block transfer complete, a 2D/repeated block transfer complete, a LLI transfer complete including the upload of the next LLI if any, or the full linked-list completion, depending on the transfer complete event mode (GPDMA_CxTR2.TCEM[1:0]).
    static constexpr uint32_t GPDMA_C7SR_HTF = 0x200; // half transfer flag An half transfer event is either an half block transfer or an half 2D/repeated block transfer, depending on the transfer complete event mode (GPDMA_CxTR2.TCEM[1:0]). An half block transfer occurs when half of the bytes of the source block size (rounded up integer of GPDMA_CxBR1.BNDT[15:0]/2) has been transferred to the destination. An half 2D/repeated block transfer occurs when half of the repeated blocks (rounded up integer of (GPDMA_CxBR1.BRC[10:0]+1)/2)) has been transferred to the destination.
    static constexpr uint32_t GPDMA_C7SR_DTEF = 0x400; // data transfer error flag
    static constexpr uint32_t GPDMA_C7SR_ULEF = 0x800; // update link transfer error flag
    static constexpr uint32_t GPDMA_C7SR_USEF = 0x1000; // user setting error flag
    static constexpr uint32_t GPDMA_C7SR_SUSPF = 0x2000; // completed suspension flag
    static constexpr uint32_t GPDMA_C7SR_TOF = 0x4000; // trigger overrun flag
    typedef bit_field_t<16, 0xff> GPDMA_C7SR_FIFOL; // monitored FIFO level Number of available write beats in the FIFO, in units of the programmed destination data width (see GPDMA_CxTR1.DDW_LOG2[1:0], in units of bytes, half-words, or words). Note: After having suspended an active transfer, the user may need to read FIFOL[7:0], additionally to GPDMA_CxBR1.BDNT[15:0] and GPDMA_CxBR1.BRC[10:0], to know how many data have been transferred to the destination. Before reading, the user may wait for the transfer to be suspended (GPDMA_CxSR.SUSPF=1).

    static constexpr uint32_t GPDMA_C7CR_RESET_VALUE = 0x0; // Reset value
    static constexpr uint32_t GPDMA_C7CR_EN = 0x1; // enable Writing 1 into the field RESET (bit 1) causes the hardware to de-assert this bit, whatever is written into this bit 0. Else: this bit is de-asserted by hardware when there is a transfer error (master bus error or user setting error) or when there is a channel transfer complete (channel ready to be configured, e.g. if LSM=1 at the end of a single execution of the LLI). Else, this bit can be asserted by software. Writing 0 into this EN bit is ignored.
    static constexpr uint32_t GPDMA_C7CR_RESET = 0x2; // reset This bit is write only. Writing 0 has no impact. Writing 1 implies the reset of the following: the FIFO, the channel internal state, SUSP and EN bits (whatever is written receptively in bit 2 and bit 0). The reset is effective when the channel is in steady state, meaning one of the following: - active channel in suspended state (GPDMA_CxSR.SUSPF=1 and GPDMA_CxSR.IDLEF=GPDMA_CxCR.EN=1) - channel in disabled state (GPDMA_CxSR.IDLEF=1 and GPDMA_CxCR.EN=0). After writing a RESET, to continue using this channel, the user must explicitly reconfigure the channel including the hardware-modified configuration registers (GPDMA_CxBR1, GPDMA_CxSAR and GPDMA_CxDAR) before enabling again the channel (see the programming sequence in ).
    static constexpr uint32_t GPDMA_C7CR_SUSP = 0x4; // suspend Writing 1 into the field RESET (bit 1) causes the hardware to de-assert this bit, whatever is written into this bit 2. Else: Software must write 1 in order to suspend an active channel i.e. a channel with an on-going GPDMA transfer over its master ports. The software must write 0 in order to resume a suspended channel, following the programming sequence detailed in .
    static constexpr uint32_t GPDMA_C7CR_TCIE = 0x100; // transfer complete interrupt enable
    static constexpr uint32_t GPDMA_C7CR_HTIE = 0x200; // half transfer complete interrupt enable
    static constexpr uint32_t GPDMA_C7CR_DTEIE = 0x400; // data transfer error interrupt enable
    static constexpr uint32_t GPDMA_C7CR_ULEIE = 0x800; // update link transfer error interrupt enable
    static constexpr uint32_t GPDMA_C7CR_USEIE = 0x1000; // user setting error interrupt enable
    static constexpr uint32_t GPDMA_C7CR_SUSPIE = 0x2000; // completed suspension interrupt enable
    static constexpr uint32_t GPDMA_C7CR_TOIE = 0x4000; // trigger overrun interrupt enable
    static constexpr uint32_t GPDMA_C7CR_LSM = 0x10000; // Link step mode First the (possible 1D/repeated) block transfer is executed as defined by the current internal register file until GPDMA_CxBR1.BNDT[15:0]=0 and GPDMA_CxBR1.BRC[10:0]=0 if present. Secondly the next linked-list data structure is conditionally uploaded from memory as defined by GPDMA_CxLLR. Then channel execution is completed. Note: This bit must be written when EN=0. This bit is read-only when EN=1.
    static constexpr uint32_t GPDMA_C7CR_LAP = 0x20000; // linked-list allocated port This bit is used to allocate the master port for the update of the GPDMA linked-list registers from the memory. Note: This bit must be written when EN=0. This bit is read-only when EN=1.
    typedef bit_field_t<22, 0x3> GPDMA_C7CR_PRIO; // priority level of the channel x GPDMA transfer versus others Note: This bit must be written when EN=0. This bit is read-only when EN=1.


    static constexpr uint32_t GPDMA_C7TR1_RESET_VALUE = 0x0; // Reset value
    typedef bit_field_t<0, 0x3> GPDMA_C7TR1_SDW_LOG2; // binary logarithm of the source data width of a burst in bytes Note: Setting a 8-byte data width causes a user setting error to be reported and no transfer is issued. A source block size must be a multiple of the source data width (GPDMA_CxBR1.BNDT[2:0] versus SDW_LOG2[1:0]). Otherwise, a user setting error is reported and no transfer is issued. A source single transfer must have an aligned address with its data width (start address GPDMA_CxSAR[2:0] versus SDW_LOG2[1:0]). Otherwise, a user setting error is reported and none transfer is issued.
    static constexpr uint32_t GPDMA_C7TR1_SINC = 0x8; // source incrementing burst The source address, pointed by GPDMA_CxSAR, is kept constant after a burst beat/single transfer or is incremented by the offset value corresponding to a contiguous data after a burst beat/single transfer.
    typedef bit_field_t<4, 0x3f> GPDMA_C7TR1_SBL_1; // source burst length minus 1, between 0 and 63 The burst length unit is one data named beat within a burst. If SBL_1[5:0]=0, the burst can be named as single. Each data/beat has a width defined by the destination data width SDW_LOG2[1:0]. Note: If a burst transfer crossed a 1-Kbyte address boundary on a AHB transfer, the GPDMA modifies and shortens the programmed burst into singles or bursts of lower length, to be compliant with the AHB protocol. If a burst transfer is of length greater than the FIFO size of the channel x, the GPDMA modifies and shortens the programmed burst into singles or bursts of lower length, to be compliant with the FIFO size. Transfer performance is lower, with GPDMA re-arbitration between effective and lower bursts/singles, but the data integrity is guaranteed.
    typedef bit_field_t<11, 0x3> GPDMA_C7TR1_PAM; // padding/alignment mode If DDW_LOG2[1:0] = SDW_LOG2[1:0]: if the data width of a burst destination transfer is equal to the data width of a burst source transfer, these bits are ignored. Else: - Case 1: If destination data width &gt; source data width 1x: successive source data are FIFO queued and packed at the destination data width, in a left (LSB) to right (MSB) order (named little endian), before a destination transfer - Case 2: If destination data width &lt; source data width 1x: source data is FIFO queued and unpacked at the destination data width, to be transferred in a left (LSB) to right (MSB) order (named little endian) to the destination Note:
    static constexpr uint32_t GPDMA_C7TR1_SBX = 0x2000; // source byte exchange within the unaligned half-word of each source word If the source data width is shorter than a word, this bit is ignored. If the source data width is a word:
    static constexpr uint32_t GPDMA_C7TR1_SAP = 0x4000; // source allocated port This bit is used to allocate the master port for the source transfer Note: This bit must be written when EN=0. This bit is read-only when EN=1.
    static constexpr uint32_t GPDMA_C7TR1_SSEC = 0x8000; // security attribute of the GPDMA transfer from the source If GPDMA_SECCFGR.SECx=1 and the access is secure: This is a secure register bit. This bit can only be read by a secure software. This bit must be written by a secure software when GPDMA_SECCFGR.SECx=1. A secure write is ignored when GPDMA_SECCFGR.SECx=0. When GPDMA_SECCFGR.SECx is de-asserted, this SSEC bit is also de-asserted by hardware (on a secure reconfiguration of the channel as non-secure), and the GPDMA transfer from the source is non-secure.
    typedef bit_field_t<16, 0x3> GPDMA_C7TR1_DDW_LOG2; // binary logarithm of the destination data width of a burst, in bytes Note: Setting a 8-byte data width causes a user setting error to be reported and none transfer is issued. A destination burst transfer must have an aligned address with its data width (start address GPDMA_CxDAR[2:0] and address offset GPDMA_CxTR3.DAO[2:0], versus DDW_LOG2[1:0]). Otherwise a user setting error is reported and no transfer is issued.
    static constexpr uint32_t GPDMA_C7TR1_DINC = 0x80000; // destination incrementing burst The destination address, pointed by GPDMA_CxDAR, is kept constant after a burst beat/single transfer, or is incremented by the offset value corresponding to a contiguous data after a burst beat/single transfer.
    typedef bit_field_t<20, 0x3f> GPDMA_C7TR1_DBL_1; // destination burst length minus 1, between 0 and 63 The burst length unit is one data named beat within a burst. If DBL_1[5:0]=0, the burst can be named as single. Each data/beat has a width defined by the destination data width DDW_LOG2[1:0]. Note: If a burst transfer crossed a 1-Kbyte address boundary on a AHB transfer, the GPDMA modifies and shortens the programmed burst into singles or bursts of lower length, to be compliant with the AHB protocol. If a burst transfer is of length greater than the FIFO size of the channel x, the GPDMA modifies and shortens the programmed burst into singles or bursts of lower length, to be compliant with the FIFO size. Transfer performance is lower, with GPDMA re-arbitration between effective and lower bursts/singles, but the data integrity is guaranteed.
    static constexpr uint32_t GPDMA_C7TR1_DBX = 0x4000000; // destination byte exchange If the destination data size is a byte, this bit is ignored. If the destination data size is not a byte:
    static constexpr uint32_t GPDMA_C7TR1_DHX = 0x8000000; // destination half-word exchange If the destination data size is shorter than a word, this bit is ignored. If the destination data size is a word:
    static constexpr uint32_t GPDMA_C7TR1_DAP = 0x40000000; // destination allocated port This bit is used to allocate the master port for the destination transfer Note: This bit must be written when EN=0. This bit is read-only when EN=1.
    static constexpr uint32_t GPDMA_C7TR1_DSEC = 0x80000000; // security attribute of the GPDMA transfer to the destination If GPDMA_SECCFGR.SECx=1 and the access is secure: This is a secure register bit. This bit can only be read by a secure software. This bit must be written by a secure software when GPDMA_SECCFGR.SECx=1. A secure write is ignored when GPDMA_SECCFGR.SECx=0. When GPDMA_SECCFGR.SECx is de-asserted, this DSEC bit is also de-asserted by hardware (on a secure reconfiguration of the channel as non-secure), and the GPDMA transfer to the destination is non-secure.

    static constexpr uint32_t GPDMA_C7TR2_RESET_VALUE = 0x0; // Reset value
    typedef bit_field_t<0, 0x7f> GPDMA_C7TR2_REQSEL; // GPDMA hardware request selection These bits are ignored if channel x is activated (GPDMA_CxCR.EN asserted) with SWREQ=1 (software request for a memory-to-memory transfer). Else, the selected hardware request is internally taken into account as per . The user must not assign a same input hardware request (same REQSEL[6:0] value) to different active GPDMA channels (GPDMA_CxCR.EN=1 and GPDMA_CxTR2.SWREQ=0 for these channels). GPDMA is not intended to hardware support the case of simultaneous enabled channels incorrectly configured with a same hardware peripheral request signal, and there is no user setting error reporting.
    static constexpr uint32_t GPDMA_C7TR2_SWREQ = 0x200; // software request This bit is internally taken into account when GPDMA_CxCR.EN is asserted.
    static constexpr uint32_t GPDMA_C7TR2_DREQ = 0x400; // destination hardware request This bit is ignored if channel x is activated (GPDMA_CxCR.EN asserted) with SWREQ=1 (software request for a memory-to-memory transfer). Else: Note:
    static constexpr uint32_t GPDMA_C7TR2_BREQ = 0x800; // Block hardware request If the channel x is activated (GPDMA_CxCR.EN asserted) with SWREQ=1 (software request for a memory-to-memory transfer), this bit is ignored. Else:
    typedef bit_field_t<14, 0x3> GPDMA_C7TR2_TRIGM; // trigger mode These bits define the transfer granularity for its conditioning by the trigger. If the channel x is enabled (GPDMA_CxCR.EN asserted) with TRIGPOL[1:0]=00 or 11, these TRIGM[1:0] bits are ignored. Else, a GPDMA transfer is conditioned by at least one trigger hit: first burst read of a 2D/repeated block transfer is conditioned by one hit trigger. If the peripheral is programmed as a source (DREQ=0) of the LLI data transfer, each programmed burst read is conditioned. If the peripheral is programmed as a destination (DREQ=1) of the LLI data transfer, each programmed burst write is conditioned. The first memory burst read of a (possibly 2D/repeated) block, also named as the first ready FIFO-based source burst, is gated by the occurrence of both the hardware request and the first trigger hit. The GPDMA monitoring of a trigger for channel x is started when the channel is enabled/loaded with a new active trigger configuration: rising or falling edge on a selected trigger (TRIGPOL[1:0]=01 or respectively TRIGPOL[1:0]=10). The monitoring of this trigger is kept active during the triggered and uncompleted (data or link) transfer; and if a new trigger is detected then, this hit is internally memorized to grant the next transfer, as long as the defined rising or falling edge is not modified, and the TRIGSEL[5:0] is not modified, and the channel is enabled. Transferring a next LLIn+1 that updates the GPDMA_CxTR2 with a new value for any of TRIGSEL[5:0] or TRIGPOL[1:0], resets the monitoring, trashing the memorized hit of the formerly defined LLIn trigger. After a first new trigger hitn+1 is memorized, if another second trigger hitn+2 is detected and if the hitn triggered transfer is still not completed, hitn+2 is lost and not memorized.memorized. A trigger overrun flag is reported (GPDMA_CxSR.TOF=1), and an interrupt is generated if enabled (GPDMA_CxCR.TOIE=1). The channel is not automatically disabled by hardware due to a trigger overrun. Note: When the source block size is not a multiple of the source burst size and is a multiple of the source data width, then the last programmed source burst is not completed and is internally shorten to match the block size. In this case, if TRIGM[1:0]=11 and (SWREQ=1 or (SWREQ=0 and DREQ=0)), the shortened burst transfer (by singles or/and by bursts of lower length) is conditioned once by the trigger. When the programmed destination burst is internally shortened by singles or/and by bursts of lower length (versus FIFO size, versus block size, 1-Kbyte boundary address crossing): if the trigger is conditioning the programmed destination burst (if TRIGM[1:0]=11 and SWREQ=0 and DREQ=1), this shortened destination burst transfer is conditioned once by the trigger.
    typedef bit_field_t<16, 0x3f> GPDMA_C7TR2_TRIGSEL; // trigger event input selection These bits select the trigger event input of the GPDMA transfer (as per ), with an active trigger event if TRIGPOL[1:0]00.
    typedef bit_field_t<24, 0x3> GPDMA_C7TR2_TRIGPOL; // trigger event polarity These bits define the polarity of the selected trigger event input defined by TRIGSEL[5:0].
    typedef bit_field_t<30, 0x3> GPDMA_C7TR2_TCEM; // transfer complete event mode These bits define the transfer granularity for the transfer complete and half transfer complete events generation. Note: If the initial LLI0 data transfer is null/void (directly programmed by the internal register file with GPDMA_CxBR1.BNDT[15:0]=0), then neither the complete transfer event nor the half transfer event is generated. Note: If the initial LLI0 data transfer is null/void (directly programmed by the internal register file with GPDMA_CxBR1.BNDT[15:0]=0), then neither the complete transfer event nor the half transfer event is generated. Note: If the initial LLI0 data transfer is null/void (i.e. directly programmed by the internal register file with GPDMA_CxBR1.BNDT[15:0]=0), then the half transfer event is not generated, and the transfer complete event is generated when is completed the loading of the LLI1.

    static constexpr uint32_t GPDMA_C7BR1_RESET_VALUE = 0x0; // Reset value
    typedef bit_field_t<0, 0xffff> GPDMA_C7BR1_BNDT; // block number of data bytes to transfer from the source Block size transferred from the source. When the channel is enabled, this field becomes read-only and is decremented, indicating the remaining number of data items in the current source block to be transferred. BNDT[15:0] is programmed in number of bytes, maximum source block size is 64Kbytes -1. Once the last data transfer is completed (BNDT[15:0]=0): - if GPDMA_CxLLR.UB1=1, this field is updated by the LLI in the memory. - if GPDMA_CxLLR.UB1=0 and if there is at least one non null Uxx update bit, this field is internally restored to the programmed value. - if all GPDMA_CxLLR.Uxx=0 and if GPDMA_CxLLR.LA[15:0]=0, this field is internally restored to the programmed value (infinite/continuous last LLI). - if GPDMA_CxLLR=0, this field is kept as zero following the last LLI data transfer. Note: A non-null source block size must be a multiple of the source data width (BNDT[2:0] versus GPDMA_CxTR1.SDW_LOG2[1:0]). Else a user setting error is reported and no transfer is issued. When configured in packing mode (GPDMA_CxTR1.PAM[1]=1 and destination data width different from source data width), a non-null source block size must be a multiple of the destination data width (BNDT[2:0] versus GPDMA_CxTR1.DDW_LOG2[1:0]). Else a user setting error is reported and no transfer is issued.

    static constexpr uint32_t GPDMA_C7SAR_RESET_VALUE = 0x0; // Reset value
    typedef bit_field_t<0, 0xffffffff> GPDMA_C7SAR_SA; // source address This field is the pointer to the address from which the next data is read. During the channel activity, depending on the source addressing mode (GPDMA_CxTR1.SINC), this field is kept fixed or incremented by the data width (GPDMA_CxTR1.SDW_LOG2[1:0]) after each single source data, reflecting the next address from which data is read. During the channel activity, this address is updated after each completed source burst, consequently to: the programmed source burst; either in fixed addressing mode or in contiguous-data incremented mode. If contiguously incremented (GPDMA_CxTR1.SINC = 1), then the additional address offset value is the programmed burst size, as defined by GPDMA_CxTR1.SBL_1[5:0] and GPDMA_CxTR1.SDW_LOG2[21:0] the additional source incremented/decremented offset value as programmed by GPDMA_CxBR1.SDEC and GPDMA_CxTR3.SAO[12:0] once/if completed source block transfer, for a channel x with 2D addressing capability (x = 12 to 15). additional block repeat source incremented/decremented offset value as programmed by GPDMA_CxBR1.BRSDEC and GPDMA_CxBR2.BRSAO[15:0] In linked-list mode, after a LLI data transfer is completed, this register is automatically updated by GPDMA from the memory, provided the LLI is set with GPDMA_CxLLR.USA=1. Note: A source address must be aligned with the programmed data width of a source single (SA[2:0] versus GPDMA_CxTR1.SDW_LOG2[1:0]). Else, a user setting error is reported and no transfer is issued. When the source block size is not a multiple of the source burst size and is a multiple of the source data width, the last programmed source burst is not completed and is internally shorten to match the block size. In this case, the additional GPDMA_CxTR3.SAO[12:0] is not applied.

    static constexpr uint32_t GPDMA_C7DAR_RESET_VALUE = 0x0; // Reset value
    typedef bit_field_t<0, 0xffffffff> GPDMA_C7DAR_DA; // destination address This field is the pointer to the address from which the next data is written. During the channel activity, depending on the destination addressing mode (GPDMA_CxTR1.DINC), this field is kept fixed or incremented by the data width (GPDMA_CxTR1.DDW_LOG2[21:0]) after each single destination data, reflecting the next address from which data is written. During the channel activity, this address is updated after each completed destination burst, consequently to: the programmed destination burst; either in fixed addressing mode or in contiguous-data incremented mode. If contiguously incremented (GPDMA_CxTR1.DINC = 1), then the additional address offset value is the programmed burst size, as defined by GPDMA_CxTR1.DBL_1[5:0] and GPDMA_CxTR1.DDW_LOG2[1:0] the additional destination incremented/decremented offset value as programmed by GPDMA_CxBR1.DDEC and GPDMA_CxTR3.DAO[12:0] once/if completed destination block transfer, for a channel x with 2D addressing capability (x=12to15), the additional block repeat destination incremented/decremented offset value as programmed by GPDMA_CxBR1.BRDDEC and GPDMA_CxBR2.BRDAO[15:0] In linked-list mode, after a LLI data transfer is completed, this register is automatically updated by the GPDMA from the memory, provided the LLI is set with GPDMA_CxLLR.UDA=1. Note: A destination address must be aligned with the programmed data width of a destination burst (DA[2:0] versus GPDMA_CxTR1.DDW_LOG2[1:0]). Else, a user setting error is reported and no transfer is issued.


    static constexpr uint32_t GPDMA_C7LLR_RESET_VALUE = 0x0; // Reset value
    typedef bit_field_t<2, 0x3fff> GPDMA_C7LLR_LA; // pointer (16-bit low-significant address) to the next linked-list data structure If UT1=UT2=UB1=USA=UDA=ULL=0 and if LA[15:20]=0, the current LLI is the last one. The channel transfer is completed without any update of the linked-list GPDMA register file. Else, this field is the pointer to the memory address offset from which the next linked-list data structure is automatically fetched from, once the data transfer is completed, in order to conditionally update the linked-list GPDMA internal register file (GPDMA_CxCTR1, GPDMA_CxTR2, GPDMA_CxBR1, GPDMA_CxSAR, GPDMA_CxDAR and GPDMA_CxLLR). Note: The user must program the pointer to be 32-bit aligned. The two low-significant bits are write ignored.
    static constexpr uint32_t GPDMA_C7LLR_ULL = 0x10000; // Update GPDMA_CxLLR register from memory This bit is used to control the update of GPDMA_CxLLR from the memory during the link transfer.
    static constexpr uint32_t GPDMA_C7LLR_UDA = 0x8000000; // Update GPDMA_CxDAR register from memory This bit is used to control the update of GPDMA_CxDAR from the memory during the link transfer.
    static constexpr uint32_t GPDMA_C7LLR_USA = 0x10000000; // update GPDMA_CxSAR from memory This bit controls the update of GPDMA_CxSAR from the memory during the link transfer.
    static constexpr uint32_t GPDMA_C7LLR_UB1 = 0x20000000; // Update GPDMA_CxBR1 from memory This bit controls the update of GPDMA_CxBR1 from the memory during the link transfer. If UB1=0 and if GPDMA_CxLLR0, the linked-list is not completed. GPDMA_CxBR1.BNDT[15:0] is then restored to the programmed value after data transfer is completed and before the link transfer.
    static constexpr uint32_t GPDMA_C7LLR_UT2 = 0x40000000; // Update GPDMA_CxTR2 from memory This bit controls the update of GPDMA_CxTR2 from the memory during the link transfer.
    static constexpr uint32_t GPDMA_C7LLR_UT1 = 0x80000000; // Update GPDMA_CxTR1 from memory This bit controls the update of GPDMA_CxTR1 from the memory during the link transfer.

    static constexpr uint32_t GPDMA_C8LBAR_RESET_VALUE = 0x0; // Reset value
    typedef bit_field_t<16, 0xffff> GPDMA_C8LBAR_LBA; // linked-list base address of GPDMA channel x


    static constexpr uint32_t GPDMA_C8FCR_RESET_VALUE = 0x0; // Reset value
    static constexpr uint32_t GPDMA_C8FCR_TCF = 0x100; // transfer complete flag clear
    static constexpr uint32_t GPDMA_C8FCR_HTF = 0x200; // half transfer flag clear
    static constexpr uint32_t GPDMA_C8FCR_DTEF = 0x400; // data transfer error flag clear
    static constexpr uint32_t GPDMA_C8FCR_ULEF = 0x800; // update link transfer error flag clear
    static constexpr uint32_t GPDMA_C8FCR_USEF = 0x1000; // user setting error flag clear
    static constexpr uint32_t GPDMA_C8FCR_SUSPF = 0x2000; // completed suspension flag clear
    static constexpr uint32_t GPDMA_C8FCR_TOF = 0x4000; // trigger overrun flag clear

    static constexpr uint32_t GPDMA_C8SR_RESET_VALUE = 0x1; // Reset value
    static constexpr uint32_t GPDMA_C8SR_IDLEF = 0x1; // idle flag This idle flag is de-asserted by hardware when the channel is enabled (GPDMA_CxCR.EN=1) with a valid channel configuration (no USEF to be immediately reported). This idle flag is asserted after hard reset or by hardware when the channel is back in idle state (in suspended or disabled state).
    static constexpr uint32_t GPDMA_C8SR_TCF = 0x100; // transfer complete flag A transfer complete event is either a block transfer complete, a 2D/repeated block transfer complete, a LLI transfer complete including the upload of the next LLI if any, or the full linked-list completion, depending on the transfer complete event mode (GPDMA_CxTR2.TCEM[1:0]).
    static constexpr uint32_t GPDMA_C8SR_HTF = 0x200; // half transfer flag An half transfer event is either an half block transfer or an half 2D/repeated block transfer, depending on the transfer complete event mode (GPDMA_CxTR2.TCEM[1:0]). An half block transfer occurs when half of the bytes of the source block size (rounded up integer of GPDMA_CxBR1.BNDT[15:0]/2) has been transferred to the destination. An half 2D/repeated block transfer occurs when half of the repeated blocks (rounded up integer of (GPDMA_CxBR1.BRC[10:0]+1)/2)) has been transferred to the destination.
    static constexpr uint32_t GPDMA_C8SR_DTEF = 0x400; // data transfer error flag
    static constexpr uint32_t GPDMA_C8SR_ULEF = 0x800; // update link transfer error flag
    static constexpr uint32_t GPDMA_C8SR_USEF = 0x1000; // user setting error flag
    static constexpr uint32_t GPDMA_C8SR_SUSPF = 0x2000; // completed suspension flag
    static constexpr uint32_t GPDMA_C8SR_TOF = 0x4000; // trigger overrun flag
    typedef bit_field_t<16, 0xff> GPDMA_C8SR_FIFOL; // monitored FIFO level Number of available write beats in the FIFO, in units of the programmed destination data width (see GPDMA_CxTR1.DDW_LOG2[1:0], in units of bytes, half-words, or words). Note: After having suspended an active transfer, the user may need to read FIFOL[7:0], additionally to GPDMA_CxBR1.BDNT[15:0] and GPDMA_CxBR1.BRC[10:0], to know how many data have been transferred to the destination. Before reading, the user may wait for the transfer to be suspended (GPDMA_CxSR.SUSPF=1).

    static constexpr uint32_t GPDMA_C8CR_RESET_VALUE = 0x0; // Reset value
    static constexpr uint32_t GPDMA_C8CR_EN = 0x1; // enable Writing 1 into the field RESET (bit 1) causes the hardware to de-assert this bit, whatever is written into this bit 0. Else: this bit is de-asserted by hardware when there is a transfer error (master bus error or user setting error) or when there is a channel transfer complete (channel ready to be configured, e.g. if LSM=1 at the end of a single execution of the LLI). Else, this bit can be asserted by software. Writing 0 into this EN bit is ignored.
    static constexpr uint32_t GPDMA_C8CR_RESET = 0x2; // reset This bit is write only. Writing 0 has no impact. Writing 1 implies the reset of the following: the FIFO, the channel internal state, SUSP and EN bits (whatever is written receptively in bit 2 and bit 0). The reset is effective when the channel is in steady state, meaning one of the following: - active channel in suspended state (GPDMA_CxSR.SUSPF=1 and GPDMA_CxSR.IDLEF=GPDMA_CxCR.EN=1) - channel in disabled state (GPDMA_CxSR.IDLEF=1 and GPDMA_CxCR.EN=0). After writing a RESET, to continue using this channel, the user must explicitly reconfigure the channel including the hardware-modified configuration registers (GPDMA_CxBR1, GPDMA_CxSAR and GPDMA_CxDAR) before enabling again the channel (see the programming sequence in ).
    static constexpr uint32_t GPDMA_C8CR_SUSP = 0x4; // suspend Writing 1 into the field RESET (bit 1) causes the hardware to de-assert this bit, whatever is written into this bit 2. Else: Software must write 1 in order to suspend an active channel i.e. a channel with an on-going GPDMA transfer over its master ports. The software must write 0 in order to resume a suspended channel, following the programming sequence detailed in .
    static constexpr uint32_t GPDMA_C8CR_TCIE = 0x100; // transfer complete interrupt enable
    static constexpr uint32_t GPDMA_C8CR_HTIE = 0x200; // half transfer complete interrupt enable
    static constexpr uint32_t GPDMA_C8CR_DTEIE = 0x400; // data transfer error interrupt enable
    static constexpr uint32_t GPDMA_C8CR_ULEIE = 0x800; // update link transfer error interrupt enable
    static constexpr uint32_t GPDMA_C8CR_USEIE = 0x1000; // user setting error interrupt enable
    static constexpr uint32_t GPDMA_C8CR_SUSPIE = 0x2000; // completed suspension interrupt enable
    static constexpr uint32_t GPDMA_C8CR_TOIE = 0x4000; // trigger overrun interrupt enable
    static constexpr uint32_t GPDMA_C8CR_LSM = 0x10000; // Link step mode First the (possible 1D/repeated) block transfer is executed as defined by the current internal register file until GPDMA_CxBR1.BNDT[15:0]=0 and GPDMA_CxBR1.BRC[10:0]=0 if present. Secondly the next linked-list data structure is conditionally uploaded from memory as defined by GPDMA_CxLLR. Then channel execution is completed. Note: This bit must be written when EN=0. This bit is read-only when EN=1.
    static constexpr uint32_t GPDMA_C8CR_LAP = 0x20000; // linked-list allocated port This bit is used to allocate the master port for the update of the GPDMA linked-list registers from the memory. Note: This bit must be written when EN=0. This bit is read-only when EN=1.
    typedef bit_field_t<22, 0x3> GPDMA_C8CR_PRIO; // priority level of the channel x GPDMA transfer versus others Note: This bit must be written when EN=0. This bit is read-only when EN=1.


    static constexpr uint32_t GPDMA_C8TR1_RESET_VALUE = 0x0; // Reset value
    typedef bit_field_t<0, 0x3> GPDMA_C8TR1_SDW_LOG2; // binary logarithm of the source data width of a burst in bytes Note: Setting a 8-byte data width causes a user setting error to be reported and no transfer is issued. A source block size must be a multiple of the source data width (GPDMA_CxBR1.BNDT[2:0] versus SDW_LOG2[1:0]). Otherwise, a user setting error is reported and no transfer is issued. A source single transfer must have an aligned address with its data width (start address GPDMA_CxSAR[2:0] versus SDW_LOG2[1:0]). Otherwise, a user setting error is reported and none transfer is issued.
    static constexpr uint32_t GPDMA_C8TR1_SINC = 0x8; // source incrementing burst The source address, pointed by GPDMA_CxSAR, is kept constant after a burst beat/single transfer or is incremented by the offset value corresponding to a contiguous data after a burst beat/single transfer.
    typedef bit_field_t<4, 0x3f> GPDMA_C8TR1_SBL_1; // source burst length minus 1, between 0 and 63 The burst length unit is one data named beat within a burst. If SBL_1[5:0]=0, the burst can be named as single. Each data/beat has a width defined by the destination data width SDW_LOG2[1:0]. Note: If a burst transfer crossed a 1-Kbyte address boundary on a AHB transfer, the GPDMA modifies and shortens the programmed burst into singles or bursts of lower length, to be compliant with the AHB protocol. If a burst transfer is of length greater than the FIFO size of the channel x, the GPDMA modifies and shortens the programmed burst into singles or bursts of lower length, to be compliant with the FIFO size. Transfer performance is lower, with GPDMA re-arbitration between effective and lower bursts/singles, but the data integrity is guaranteed.
    typedef bit_field_t<11, 0x3> GPDMA_C8TR1_PAM; // padding/alignment mode If DDW_LOG2[1:0] = SDW_LOG2[1:0]: if the data width of a burst destination transfer is equal to the data width of a burst source transfer, these bits are ignored. Else: - Case 1: If destination data width &gt; source data width 1x: successive source data are FIFO queued and packed at the destination data width, in a left (LSB) to right (MSB) order (named little endian), before a destination transfer - Case 2: If destination data width &lt; source data width 1x: source data is FIFO queued and unpacked at the destination data width, to be transferred in a left (LSB) to right (MSB) order (named little endian) to the destination Note:
    static constexpr uint32_t GPDMA_C8TR1_SBX = 0x2000; // source byte exchange within the unaligned half-word of each source word If the source data width is shorter than a word, this bit is ignored. If the source data width is a word:
    static constexpr uint32_t GPDMA_C8TR1_SAP = 0x4000; // source allocated port This bit is used to allocate the master port for the source transfer Note: This bit must be written when EN=0. This bit is read-only when EN=1.
    static constexpr uint32_t GPDMA_C8TR1_SSEC = 0x8000; // security attribute of the GPDMA transfer from the source If GPDMA_SECCFGR.SECx=1 and the access is secure: This is a secure register bit. This bit can only be read by a secure software. This bit must be written by a secure software when GPDMA_SECCFGR.SECx=1. A secure write is ignored when GPDMA_SECCFGR.SECx=0. When GPDMA_SECCFGR.SECx is de-asserted, this SSEC bit is also de-asserted by hardware (on a secure reconfiguration of the channel as non-secure), and the GPDMA transfer from the source is non-secure.
    typedef bit_field_t<16, 0x3> GPDMA_C8TR1_DDW_LOG2; // binary logarithm of the destination data width of a burst, in bytes Note: Setting a 8-byte data width causes a user setting error to be reported and none transfer is issued. A destination burst transfer must have an aligned address with its data width (start address GPDMA_CxDAR[2:0] and address offset GPDMA_CxTR3.DAO[2:0], versus DDW_LOG2[1:0]). Otherwise a user setting error is reported and no transfer is issued.
    static constexpr uint32_t GPDMA_C8TR1_DINC = 0x80000; // destination incrementing burst The destination address, pointed by GPDMA_CxDAR, is kept constant after a burst beat/single transfer, or is incremented by the offset value corresponding to a contiguous data after a burst beat/single transfer.
    typedef bit_field_t<20, 0x3f> GPDMA_C8TR1_DBL_1; // destination burst length minus 1, between 0 and 63 The burst length unit is one data named beat within a burst. If DBL_1[5:0]=0, the burst can be named as single. Each data/beat has a width defined by the destination data width DDW_LOG2[1:0]. Note: If a burst transfer crossed a 1-Kbyte address boundary on a AHB transfer, the GPDMA modifies and shortens the programmed burst into singles or bursts of lower length, to be compliant with the AHB protocol. If a burst transfer is of length greater than the FIFO size of the channel x, the GPDMA modifies and shortens the programmed burst into singles or bursts of lower length, to be compliant with the FIFO size. Transfer performance is lower, with GPDMA re-arbitration between effective and lower bursts/singles, but the data integrity is guaranteed.
    static constexpr uint32_t GPDMA_C8TR1_DBX = 0x4000000; // destination byte exchange If the destination data size is a byte, this bit is ignored. If the destination data size is not a byte:
    static constexpr uint32_t GPDMA_C8TR1_DHX = 0x8000000; // destination half-word exchange If the destination data size is shorter than a word, this bit is ignored. If the destination data size is a word:
    static constexpr uint32_t GPDMA_C8TR1_DAP = 0x40000000; // destination allocated port This bit is used to allocate the master port for the destination transfer Note: This bit must be written when EN=0. This bit is read-only when EN=1.
    static constexpr uint32_t GPDMA_C8TR1_DSEC = 0x80000000; // security attribute of the GPDMA transfer to the destination If GPDMA_SECCFGR.SECx=1 and the access is secure: This is a secure register bit. This bit can only be read by a secure software. This bit must be written by a secure software when GPDMA_SECCFGR.SECx=1. A secure write is ignored when GPDMA_SECCFGR.SECx=0. When GPDMA_SECCFGR.SECx is de-asserted, this DSEC bit is also de-asserted by hardware (on a secure reconfiguration of the channel as non-secure), and the GPDMA transfer to the destination is non-secure.

    static constexpr uint32_t GPDMA_C8TR2_RESET_VALUE = 0x0; // Reset value
    typedef bit_field_t<0, 0x7f> GPDMA_C8TR2_REQSEL; // GPDMA hardware request selection These bits are ignored if channel x is activated (GPDMA_CxCR.EN asserted) with SWREQ=1 (software request for a memory-to-memory transfer). Else, the selected hardware request is internally taken into account as per . The user must not assign a same input hardware request (same REQSEL[6:0] value) to different active GPDMA channels (GPDMA_CxCR.EN=1 and GPDMA_CxTR2.SWREQ=0 for these channels). GPDMA is not intended to hardware support the case of simultaneous enabled channels incorrectly configured with a same hardware peripheral request signal, and there is no user setting error reporting.
    static constexpr uint32_t GPDMA_C8TR2_SWREQ = 0x200; // software request This bit is internally taken into account when GPDMA_CxCR.EN is asserted.
    static constexpr uint32_t GPDMA_C8TR2_DREQ = 0x400; // destination hardware request This bit is ignored if channel x is activated (GPDMA_CxCR.EN asserted) with SWREQ=1 (software request for a memory-to-memory transfer). Else: Note:
    static constexpr uint32_t GPDMA_C8TR2_BREQ = 0x800; // Block hardware request If the channel x is activated (GPDMA_CxCR.EN asserted) with SWREQ=1 (software request for a memory-to-memory transfer), this bit is ignored. Else:
    typedef bit_field_t<14, 0x3> GPDMA_C8TR2_TRIGM; // trigger mode These bits define the transfer granularity for its conditioning by the trigger. If the channel x is enabled (GPDMA_CxCR.EN asserted) with TRIGPOL[1:0]=00 or 11, these TRIGM[1:0] bits are ignored. Else, a GPDMA transfer is conditioned by at least one trigger hit: first burst read of a 2D/repeated block transfer is conditioned by one hit trigger. If the peripheral is programmed as a source (DREQ=0) of the LLI data transfer, each programmed burst read is conditioned. If the peripheral is programmed as a destination (DREQ=1) of the LLI data transfer, each programmed burst write is conditioned. The first memory burst read of a (possibly 2D/repeated) block, also named as the first ready FIFO-based source burst, is gated by the occurrence of both the hardware request and the first trigger hit. The GPDMA monitoring of a trigger for channel x is started when the channel is enabled/loaded with a new active trigger configuration: rising or falling edge on a selected trigger (TRIGPOL[1:0]=01 or respectively TRIGPOL[1:0]=10). The monitoring of this trigger is kept active during the triggered and uncompleted (data or link) transfer; and if a new trigger is detected then, this hit is internally memorized to grant the next transfer, as long as the defined rising or falling edge is not modified, and the TRIGSEL[5:0] is not modified, and the channel is enabled. Transferring a next LLIn+1 that updates the GPDMA_CxTR2 with a new value for any of TRIGSEL[5:0] or TRIGPOL[1:0], resets the monitoring, trashing the memorized hit of the formerly defined LLIn trigger. After a first new trigger hitn+1 is memorized, if another second trigger hitn+2 is detected and if the hitn triggered transfer is still not completed, hitn+2 is lost and not memorized.memorized. A trigger overrun flag is reported (GPDMA_CxSR.TOF=1), and an interrupt is generated if enabled (GPDMA_CxCR.TOIE=1). The channel is not automatically disabled by hardware due to a trigger overrun. Note: When the source block size is not a multiple of the source burst size and is a multiple of the source data width, then the last programmed source burst is not completed and is internally shorten to match the block size. In this case, if TRIGM[1:0]=11 and (SWREQ=1 or (SWREQ=0 and DREQ=0)), the shortened burst transfer (by singles or/and by bursts of lower length) is conditioned once by the trigger. When the programmed destination burst is internally shortened by singles or/and by bursts of lower length (versus FIFO size, versus block size, 1-Kbyte boundary address crossing): if the trigger is conditioning the programmed destination burst (if TRIGM[1:0]=11 and SWREQ=0 and DREQ=1), this shortened destination burst transfer is conditioned once by the trigger.
    typedef bit_field_t<16, 0x3f> GPDMA_C8TR2_TRIGSEL; // trigger event input selection These bits select the trigger event input of the GPDMA transfer (as per ), with an active trigger event if TRIGPOL[1:0]00.
    typedef bit_field_t<24, 0x3> GPDMA_C8TR2_TRIGPOL; // trigger event polarity These bits define the polarity of the selected trigger event input defined by TRIGSEL[5:0].
    typedef bit_field_t<30, 0x3> GPDMA_C8TR2_TCEM; // transfer complete event mode These bits define the transfer granularity for the transfer complete and half transfer complete events generation. Note: If the initial LLI0 data transfer is null/void (directly programmed by the internal register file with GPDMA_CxBR1.BNDT[15:0]=0), then neither the complete transfer event nor the half transfer event is generated. Note: If the initial LLI0 data transfer is null/void (directly programmed by the internal register file with GPDMA_CxBR1.BNDT[15:0]=0), then neither the complete transfer event nor the half transfer event is generated. Note: If the initial LLI0 data transfer is null/void (i.e. directly programmed by the internal register file with GPDMA_CxBR1.BNDT[15:0]=0), then the half transfer event is not generated, and the transfer complete event is generated when is completed the loading of the LLI1.

    static constexpr uint32_t GPDMA_C8BR1_RESET_VALUE = 0x0; // Reset value
    typedef bit_field_t<0, 0xffff> GPDMA_C8BR1_BNDT; // block number of data bytes to transfer from the source Block size transferred from the source. When the channel is enabled, this field becomes read-only and is decremented, indicating the remaining number of data items in the current source block to be transferred. BNDT[15:0] is programmed in number of bytes, maximum source block size is 64Kbytes -1. Once the last data transfer is completed (BNDT[15:0]=0): - if GPDMA_CxLLR.UB1=1, this field is updated by the LLI in the memory. - if GPDMA_CxLLR.UB1=0 and if there is at least one non null Uxx update bit, this field is internally restored to the programmed value. - if all GPDMA_CxLLR.Uxx=0 and if GPDMA_CxLLR.LA[15:0]=0, this field is internally restored to the programmed value (infinite/continuous last LLI). - if GPDMA_CxLLR=0, this field is kept as zero following the last LLI data transfer. Note: A non-null source block size must be a multiple of the source data width (BNDT[2:0] versus GPDMA_CxTR1.SDW_LOG2[1:0]). Else a user setting error is reported and no transfer is issued. When configured in packing mode (GPDMA_CxTR1.PAM[1]=1 and destination data width different from source data width), a non-null source block size must be a multiple of the destination data width (BNDT[2:0] versus GPDMA_CxTR1.DDW_LOG2[1:0]). Else a user setting error is reported and no transfer is issued.

    static constexpr uint32_t GPDMA_C8SAR_RESET_VALUE = 0x0; // Reset value
    typedef bit_field_t<0, 0xffffffff> GPDMA_C8SAR_SA; // source address This field is the pointer to the address from which the next data is read. During the channel activity, depending on the source addressing mode (GPDMA_CxTR1.SINC), this field is kept fixed or incremented by the data width (GPDMA_CxTR1.SDW_LOG2[1:0]) after each single source data, reflecting the next address from which data is read. During the channel activity, this address is updated after each completed source burst, consequently to: the programmed source burst; either in fixed addressing mode or in contiguous-data incremented mode. If contiguously incremented (GPDMA_CxTR1.SINC = 1), then the additional address offset value is the programmed burst size, as defined by GPDMA_CxTR1.SBL_1[5:0] and GPDMA_CxTR1.SDW_LOG2[21:0] the additional source incremented/decremented offset value as programmed by GPDMA_CxBR1.SDEC and GPDMA_CxTR3.SAO[12:0] once/if completed source block transfer, for a channel x with 2D addressing capability (x = 12 to 15). additional block repeat source incremented/decremented offset value as programmed by GPDMA_CxBR1.BRSDEC and GPDMA_CxBR2.BRSAO[15:0] In linked-list mode, after a LLI data transfer is completed, this register is automatically updated by GPDMA from the memory, provided the LLI is set with GPDMA_CxLLR.USA=1. Note: A source address must be aligned with the programmed data width of a source single (SA[2:0] versus GPDMA_CxTR1.SDW_LOG2[1:0]). Else, a user setting error is reported and no transfer is issued. When the source block size is not a multiple of the source burst size and is a multiple of the source data width, the last programmed source burst is not completed and is internally shorten to match the block size. In this case, the additional GPDMA_CxTR3.SAO[12:0] is not applied.

    static constexpr uint32_t GPDMA_C8DAR_RESET_VALUE = 0x0; // Reset value
    typedef bit_field_t<0, 0xffffffff> GPDMA_C8DAR_DA; // destination address This field is the pointer to the address from which the next data is written. During the channel activity, depending on the destination addressing mode (GPDMA_CxTR1.DINC), this field is kept fixed or incremented by the data width (GPDMA_CxTR1.DDW_LOG2[21:0]) after each single destination data, reflecting the next address from which data is written. During the channel activity, this address is updated after each completed destination burst, consequently to: the programmed destination burst; either in fixed addressing mode or in contiguous-data incremented mode. If contiguously incremented (GPDMA_CxTR1.DINC = 1), then the additional address offset value is the programmed burst size, as defined by GPDMA_CxTR1.DBL_1[5:0] and GPDMA_CxTR1.DDW_LOG2[1:0] the additional destination incremented/decremented offset value as programmed by GPDMA_CxBR1.DDEC and GPDMA_CxTR3.DAO[12:0] once/if completed destination block transfer, for a channel x with 2D addressing capability (x=12to15), the additional block repeat destination incremented/decremented offset value as programmed by GPDMA_CxBR1.BRDDEC and GPDMA_CxBR2.BRDAO[15:0] In linked-list mode, after a LLI data transfer is completed, this register is automatically updated by the GPDMA from the memory, provided the LLI is set with GPDMA_CxLLR.UDA=1. Note: A destination address must be aligned with the programmed data width of a destination burst (DA[2:0] versus GPDMA_CxTR1.DDW_LOG2[1:0]). Else, a user setting error is reported and no transfer is issued.


    static constexpr uint32_t GPDMA_C8LLR_RESET_VALUE = 0x0; // Reset value
    typedef bit_field_t<2, 0x3fff> GPDMA_C8LLR_LA; // pointer (16-bit low-significant address) to the next linked-list data structure If UT1=UT2=UB1=USA=UDA=ULL=0 and if LA[15:20]=0, the current LLI is the last one. The channel transfer is completed without any update of the linked-list GPDMA register file. Else, this field is the pointer to the memory address offset from which the next linked-list data structure is automatically fetched from, once the data transfer is completed, in order to conditionally update the linked-list GPDMA internal register file (GPDMA_CxCTR1, GPDMA_CxTR2, GPDMA_CxBR1, GPDMA_CxSAR, GPDMA_CxDAR and GPDMA_CxLLR). Note: The user must program the pointer to be 32-bit aligned. The two low-significant bits are write ignored.
    static constexpr uint32_t GPDMA_C8LLR_ULL = 0x10000; // Update GPDMA_CxLLR register from memory This bit is used to control the update of GPDMA_CxLLR from the memory during the link transfer.
    static constexpr uint32_t GPDMA_C8LLR_UDA = 0x8000000; // Update GPDMA_CxDAR register from memory This bit is used to control the update of GPDMA_CxDAR from the memory during the link transfer.
    static constexpr uint32_t GPDMA_C8LLR_USA = 0x10000000; // update GPDMA_CxSAR from memory This bit controls the update of GPDMA_CxSAR from the memory during the link transfer.
    static constexpr uint32_t GPDMA_C8LLR_UB1 = 0x20000000; // Update GPDMA_CxBR1 from memory This bit controls the update of GPDMA_CxBR1 from the memory during the link transfer. If UB1=0 and if GPDMA_CxLLR0, the linked-list is not completed. GPDMA_CxBR1.BNDT[15:0] is then restored to the programmed value after data transfer is completed and before the link transfer.
    static constexpr uint32_t GPDMA_C8LLR_UT2 = 0x40000000; // Update GPDMA_CxTR2 from memory This bit controls the update of GPDMA_CxTR2 from the memory during the link transfer.
    static constexpr uint32_t GPDMA_C8LLR_UT1 = 0x80000000; // Update GPDMA_CxTR1 from memory This bit controls the update of GPDMA_CxTR1 from the memory during the link transfer.

    static constexpr uint32_t GPDMA_C9LBAR_RESET_VALUE = 0x0; // Reset value
    typedef bit_field_t<16, 0xffff> GPDMA_C9LBAR_LBA; // linked-list base address of GPDMA channel x


    static constexpr uint32_t GPDMA_C9FCR_RESET_VALUE = 0x0; // Reset value
    static constexpr uint32_t GPDMA_C9FCR_TCF = 0x100; // transfer complete flag clear
    static constexpr uint32_t GPDMA_C9FCR_HTF = 0x200; // half transfer flag clear
    static constexpr uint32_t GPDMA_C9FCR_DTEF = 0x400; // data transfer error flag clear
    static constexpr uint32_t GPDMA_C9FCR_ULEF = 0x800; // update link transfer error flag clear
    static constexpr uint32_t GPDMA_C9FCR_USEF = 0x1000; // user setting error flag clear
    static constexpr uint32_t GPDMA_C9FCR_SUSPF = 0x2000; // completed suspension flag clear
    static constexpr uint32_t GPDMA_C9FCR_TOF = 0x4000; // trigger overrun flag clear

    static constexpr uint32_t GPDMA_C9SR_RESET_VALUE = 0x1; // Reset value
    static constexpr uint32_t GPDMA_C9SR_IDLEF = 0x1; // idle flag This idle flag is de-asserted by hardware when the channel is enabled (GPDMA_CxCR.EN=1) with a valid channel configuration (no USEF to be immediately reported). This idle flag is asserted after hard reset or by hardware when the channel is back in idle state (in suspended or disabled state).
    static constexpr uint32_t GPDMA_C9SR_TCF = 0x100; // transfer complete flag A transfer complete event is either a block transfer complete, a 2D/repeated block transfer complete, a LLI transfer complete including the upload of the next LLI if any, or the full linked-list completion, depending on the transfer complete event mode (GPDMA_CxTR2.TCEM[1:0]).
    static constexpr uint32_t GPDMA_C9SR_HTF = 0x200; // half transfer flag An half transfer event is either an half block transfer or an half 2D/repeated block transfer, depending on the transfer complete event mode (GPDMA_CxTR2.TCEM[1:0]). An half block transfer occurs when half of the bytes of the source block size (rounded up integer of GPDMA_CxBR1.BNDT[15:0]/2) has been transferred to the destination. An half 2D/repeated block transfer occurs when half of the repeated blocks (rounded up integer of (GPDMA_CxBR1.BRC[10:0]+1)/2)) has been transferred to the destination.
    static constexpr uint32_t GPDMA_C9SR_DTEF = 0x400; // data transfer error flag
    static constexpr uint32_t GPDMA_C9SR_ULEF = 0x800; // update link transfer error flag
    static constexpr uint32_t GPDMA_C9SR_USEF = 0x1000; // user setting error flag
    static constexpr uint32_t GPDMA_C9SR_SUSPF = 0x2000; // completed suspension flag
    static constexpr uint32_t GPDMA_C9SR_TOF = 0x4000; // trigger overrun flag
    typedef bit_field_t<16, 0xff> GPDMA_C9SR_FIFOL; // monitored FIFO level Number of available write beats in the FIFO, in units of the programmed destination data width (see GPDMA_CxTR1.DDW_LOG2[1:0], in units of bytes, half-words, or words). Note: After having suspended an active transfer, the user may need to read FIFOL[7:0], additionally to GPDMA_CxBR1.BDNT[15:0] and GPDMA_CxBR1.BRC[10:0], to know how many data have been transferred to the destination. Before reading, the user may wait for the transfer to be suspended (GPDMA_CxSR.SUSPF=1).

    static constexpr uint32_t GPDMA_C9CR_RESET_VALUE = 0x0; // Reset value
    static constexpr uint32_t GPDMA_C9CR_EN = 0x1; // enable Writing 1 into the field RESET (bit 1) causes the hardware to de-assert this bit, whatever is written into this bit 0. Else: this bit is de-asserted by hardware when there is a transfer error (master bus error or user setting error) or when there is a channel transfer complete (channel ready to be configured, e.g. if LSM=1 at the end of a single execution of the LLI). Else, this bit can be asserted by software. Writing 0 into this EN bit is ignored.
    static constexpr uint32_t GPDMA_C9CR_RESET = 0x2; // reset This bit is write only. Writing 0 has no impact. Writing 1 implies the reset of the following: the FIFO, the channel internal state, SUSP and EN bits (whatever is written receptively in bit 2 and bit 0). The reset is effective when the channel is in steady state, meaning one of the following: - active channel in suspended state (GPDMA_CxSR.SUSPF=1 and GPDMA_CxSR.IDLEF=GPDMA_CxCR.EN=1) - channel in disabled state (GPDMA_CxSR.IDLEF=1 and GPDMA_CxCR.EN=0). After writing a RESET, to continue using this channel, the user must explicitly reconfigure the channel including the hardware-modified configuration registers (GPDMA_CxBR1, GPDMA_CxSAR and GPDMA_CxDAR) before enabling again the channel (see the programming sequence in ).
    static constexpr uint32_t GPDMA_C9CR_SUSP = 0x4; // suspend Writing 1 into the field RESET (bit 1) causes the hardware to de-assert this bit, whatever is written into this bit 2. Else: Software must write 1 in order to suspend an active channel i.e. a channel with an on-going GPDMA transfer over its master ports. The software must write 0 in order to resume a suspended channel, following the programming sequence detailed in .
    static constexpr uint32_t GPDMA_C9CR_TCIE = 0x100; // transfer complete interrupt enable
    static constexpr uint32_t GPDMA_C9CR_HTIE = 0x200; // half transfer complete interrupt enable
    static constexpr uint32_t GPDMA_C9CR_DTEIE = 0x400; // data transfer error interrupt enable
    static constexpr uint32_t GPDMA_C9CR_ULEIE = 0x800; // update link transfer error interrupt enable
    static constexpr uint32_t GPDMA_C9CR_USEIE = 0x1000; // user setting error interrupt enable
    static constexpr uint32_t GPDMA_C9CR_SUSPIE = 0x2000; // completed suspension interrupt enable
    static constexpr uint32_t GPDMA_C9CR_TOIE = 0x4000; // trigger overrun interrupt enable
    static constexpr uint32_t GPDMA_C9CR_LSM = 0x10000; // Link step mode First the (possible 1D/repeated) block transfer is executed as defined by the current internal register file until GPDMA_CxBR1.BNDT[15:0]=0 and GPDMA_CxBR1.BRC[10:0]=0 if present. Secondly the next linked-list data structure is conditionally uploaded from memory as defined by GPDMA_CxLLR. Then channel execution is completed. Note: This bit must be written when EN=0. This bit is read-only when EN=1.
    static constexpr uint32_t GPDMA_C9CR_LAP = 0x20000; // linked-list allocated port This bit is used to allocate the master port for the update of the GPDMA linked-list registers from the memory. Note: This bit must be written when EN=0. This bit is read-only when EN=1.
    typedef bit_field_t<22, 0x3> GPDMA_C9CR_PRIO; // priority level of the channel x GPDMA transfer versus others Note: This bit must be written when EN=0. This bit is read-only when EN=1.


    static constexpr uint32_t GPDMA_C9TR1_RESET_VALUE = 0x0; // Reset value
    typedef bit_field_t<0, 0x3> GPDMA_C9TR1_SDW_LOG2; // binary logarithm of the source data width of a burst in bytes Note: Setting a 8-byte data width causes a user setting error to be reported and no transfer is issued. A source block size must be a multiple of the source data width (GPDMA_CxBR1.BNDT[2:0] versus SDW_LOG2[1:0]). Otherwise, a user setting error is reported and no transfer is issued. A source single transfer must have an aligned address with its data width (start address GPDMA_CxSAR[2:0] versus SDW_LOG2[1:0]). Otherwise, a user setting error is reported and none transfer is issued.
    static constexpr uint32_t GPDMA_C9TR1_SINC = 0x8; // source incrementing burst The source address, pointed by GPDMA_CxSAR, is kept constant after a burst beat/single transfer or is incremented by the offset value corresponding to a contiguous data after a burst beat/single transfer.
    typedef bit_field_t<4, 0x3f> GPDMA_C9TR1_SBL_1; // source burst length minus 1, between 0 and 63 The burst length unit is one data named beat within a burst. If SBL_1[5:0]=0, the burst can be named as single. Each data/beat has a width defined by the destination data width SDW_LOG2[1:0]. Note: If a burst transfer crossed a 1-Kbyte address boundary on a AHB transfer, the GPDMA modifies and shortens the programmed burst into singles or bursts of lower length, to be compliant with the AHB protocol. If a burst transfer is of length greater than the FIFO size of the channel x, the GPDMA modifies and shortens the programmed burst into singles or bursts of lower length, to be compliant with the FIFO size. Transfer performance is lower, with GPDMA re-arbitration between effective and lower bursts/singles, but the data integrity is guaranteed.
    typedef bit_field_t<11, 0x3> GPDMA_C9TR1_PAM; // padding/alignment mode If DDW_LOG2[1:0] = SDW_LOG2[1:0]: if the data width of a burst destination transfer is equal to the data width of a burst source transfer, these bits are ignored. Else: - Case 1: If destination data width &gt; source data width 1x: successive source data are FIFO queued and packed at the destination data width, in a left (LSB) to right (MSB) order (named little endian), before a destination transfer - Case 2: If destination data width &lt; source data width 1x: source data is FIFO queued and unpacked at the destination data width, to be transferred in a left (LSB) to right (MSB) order (named little endian) to the destination Note:
    static constexpr uint32_t GPDMA_C9TR1_SBX = 0x2000; // source byte exchange within the unaligned half-word of each source word If the source data width is shorter than a word, this bit is ignored. If the source data width is a word:
    static constexpr uint32_t GPDMA_C9TR1_SAP = 0x4000; // source allocated port This bit is used to allocate the master port for the source transfer Note: This bit must be written when EN=0. This bit is read-only when EN=1.
    static constexpr uint32_t GPDMA_C9TR1_SSEC = 0x8000; // security attribute of the GPDMA transfer from the source If GPDMA_SECCFGR.SECx=1 and the access is secure: This is a secure register bit. This bit can only be read by a secure software. This bit must be written by a secure software when GPDMA_SECCFGR.SECx=1. A secure write is ignored when GPDMA_SECCFGR.SECx=0. When GPDMA_SECCFGR.SECx is de-asserted, this SSEC bit is also de-asserted by hardware (on a secure reconfiguration of the channel as non-secure), and the GPDMA transfer from the source is non-secure.
    typedef bit_field_t<16, 0x3> GPDMA_C9TR1_DDW_LOG2; // binary logarithm of the destination data width of a burst, in bytes Note: Setting a 8-byte data width causes a user setting error to be reported and none transfer is issued. A destination burst transfer must have an aligned address with its data width (start address GPDMA_CxDAR[2:0] and address offset GPDMA_CxTR3.DAO[2:0], versus DDW_LOG2[1:0]). Otherwise a user setting error is reported and no transfer is issued.
    static constexpr uint32_t GPDMA_C9TR1_DINC = 0x80000; // destination incrementing burst The destination address, pointed by GPDMA_CxDAR, is kept constant after a burst beat/single transfer, or is incremented by the offset value corresponding to a contiguous data after a burst beat/single transfer.
    typedef bit_field_t<20, 0x3f> GPDMA_C9TR1_DBL_1; // destination burst length minus 1, between 0 and 63 The burst length unit is one data named beat within a burst. If DBL_1[5:0]=0, the burst can be named as single. Each data/beat has a width defined by the destination data width DDW_LOG2[1:0]. Note: If a burst transfer crossed a 1-Kbyte address boundary on a AHB transfer, the GPDMA modifies and shortens the programmed burst into singles or bursts of lower length, to be compliant with the AHB protocol. If a burst transfer is of length greater than the FIFO size of the channel x, the GPDMA modifies and shortens the programmed burst into singles or bursts of lower length, to be compliant with the FIFO size. Transfer performance is lower, with GPDMA re-arbitration between effective and lower bursts/singles, but the data integrity is guaranteed.
    static constexpr uint32_t GPDMA_C9TR1_DBX = 0x4000000; // destination byte exchange If the destination data size is a byte, this bit is ignored. If the destination data size is not a byte:
    static constexpr uint32_t GPDMA_C9TR1_DHX = 0x8000000; // destination half-word exchange If the destination data size is shorter than a word, this bit is ignored. If the destination data size is a word:
    static constexpr uint32_t GPDMA_C9TR1_DAP = 0x40000000; // destination allocated port This bit is used to allocate the master port for the destination transfer Note: This bit must be written when EN=0. This bit is read-only when EN=1.
    static constexpr uint32_t GPDMA_C9TR1_DSEC = 0x80000000; // security attribute of the GPDMA transfer to the destination If GPDMA_SECCFGR.SECx=1 and the access is secure: This is a secure register bit. This bit can only be read by a secure software. This bit must be written by a secure software when GPDMA_SECCFGR.SECx=1. A secure write is ignored when GPDMA_SECCFGR.SECx=0. When GPDMA_SECCFGR.SECx is de-asserted, this DSEC bit is also de-asserted by hardware (on a secure reconfiguration of the channel as non-secure), and the GPDMA transfer to the destination is non-secure.

    static constexpr uint32_t GPDMA_C9TR2_RESET_VALUE = 0x0; // Reset value
    typedef bit_field_t<0, 0x7f> GPDMA_C9TR2_REQSEL; // GPDMA hardware request selection These bits are ignored if channel x is activated (GPDMA_CxCR.EN asserted) with SWREQ=1 (software request for a memory-to-memory transfer). Else, the selected hardware request is internally taken into account as per . The user must not assign a same input hardware request (same REQSEL[6:0] value) to different active GPDMA channels (GPDMA_CxCR.EN=1 and GPDMA_CxTR2.SWREQ=0 for these channels). GPDMA is not intended to hardware support the case of simultaneous enabled channels incorrectly configured with a same hardware peripheral request signal, and there is no user setting error reporting.
    static constexpr uint32_t GPDMA_C9TR2_SWREQ = 0x200; // software request This bit is internally taken into account when GPDMA_CxCR.EN is asserted.
    static constexpr uint32_t GPDMA_C9TR2_DREQ = 0x400; // destination hardware request This bit is ignored if channel x is activated (GPDMA_CxCR.EN asserted) with SWREQ=1 (software request for a memory-to-memory transfer). Else: Note:
    static constexpr uint32_t GPDMA_C9TR2_BREQ = 0x800; // Block hardware request If the channel x is activated (GPDMA_CxCR.EN asserted) with SWREQ=1 (software request for a memory-to-memory transfer), this bit is ignored. Else:
    typedef bit_field_t<14, 0x3> GPDMA_C9TR2_TRIGM; // trigger mode These bits define the transfer granularity for its conditioning by the trigger. If the channel x is enabled (GPDMA_CxCR.EN asserted) with TRIGPOL[1:0]=00 or 11, these TRIGM[1:0] bits are ignored. Else, a GPDMA transfer is conditioned by at least one trigger hit: first burst read of a 2D/repeated block transfer is conditioned by one hit trigger. If the peripheral is programmed as a source (DREQ=0) of the LLI data transfer, each programmed burst read is conditioned. If the peripheral is programmed as a destination (DREQ=1) of the LLI data transfer, each programmed burst write is conditioned. The first memory burst read of a (possibly 2D/repeated) block, also named as the first ready FIFO-based source burst, is gated by the occurrence of both the hardware request and the first trigger hit. The GPDMA monitoring of a trigger for channel x is started when the channel is enabled/loaded with a new active trigger configuration: rising or falling edge on a selected trigger (TRIGPOL[1:0]=01 or respectively TRIGPOL[1:0]=10). The monitoring of this trigger is kept active during the triggered and uncompleted (data or link) transfer; and if a new trigger is detected then, this hit is internally memorized to grant the next transfer, as long as the defined rising or falling edge is not modified, and the TRIGSEL[5:0] is not modified, and the channel is enabled. Transferring a next LLIn+1 that updates the GPDMA_CxTR2 with a new value for any of TRIGSEL[5:0] or TRIGPOL[1:0], resets the monitoring, trashing the memorized hit of the formerly defined LLIn trigger. After a first new trigger hitn+1 is memorized, if another second trigger hitn+2 is detected and if the hitn triggered transfer is still not completed, hitn+2 is lost and not memorized.memorized. A trigger overrun flag is reported (GPDMA_CxSR.TOF=1), and an interrupt is generated if enabled (GPDMA_CxCR.TOIE=1). The channel is not automatically disabled by hardware due to a trigger overrun. Note: When the source block size is not a multiple of the source burst size and is a multiple of the source data width, then the last programmed source burst is not completed and is internally shorten to match the block size. In this case, if TRIGM[1:0]=11 and (SWREQ=1 or (SWREQ=0 and DREQ=0)), the shortened burst transfer (by singles or/and by bursts of lower length) is conditioned once by the trigger. When the programmed destination burst is internally shortened by singles or/and by bursts of lower length (versus FIFO size, versus block size, 1-Kbyte boundary address crossing): if the trigger is conditioning the programmed destination burst (if TRIGM[1:0]=11 and SWREQ=0 and DREQ=1), this shortened destination burst transfer is conditioned once by the trigger.
    typedef bit_field_t<16, 0x3f> GPDMA_C9TR2_TRIGSEL; // trigger event input selection These bits select the trigger event input of the GPDMA transfer (as per ), with an active trigger event if TRIGPOL[1:0]00.
    typedef bit_field_t<24, 0x3> GPDMA_C9TR2_TRIGPOL; // trigger event polarity These bits define the polarity of the selected trigger event input defined by TRIGSEL[5:0].
    typedef bit_field_t<30, 0x3> GPDMA_C9TR2_TCEM; // transfer complete event mode These bits define the transfer granularity for the transfer complete and half transfer complete events generation. Note: If the initial LLI0 data transfer is null/void (directly programmed by the internal register file with GPDMA_CxBR1.BNDT[15:0]=0), then neither the complete transfer event nor the half transfer event is generated. Note: If the initial LLI0 data transfer is null/void (directly programmed by the internal register file with GPDMA_CxBR1.BNDT[15:0]=0), then neither the complete transfer event nor the half transfer event is generated. Note: If the initial LLI0 data transfer is null/void (i.e. directly programmed by the internal register file with GPDMA_CxBR1.BNDT[15:0]=0), then the half transfer event is not generated, and the transfer complete event is generated when is completed the loading of the LLI1.

    static constexpr uint32_t GPDMA_C9BR1_RESET_VALUE = 0x0; // Reset value
    typedef bit_field_t<0, 0xffff> GPDMA_C9BR1_BNDT; // block number of data bytes to transfer from the source Block size transferred from the source. When the channel is enabled, this field becomes read-only and is decremented, indicating the remaining number of data items in the current source block to be transferred. BNDT[15:0] is programmed in number of bytes, maximum source block size is 64Kbytes -1. Once the last data transfer is completed (BNDT[15:0]=0): - if GPDMA_CxLLR.UB1=1, this field is updated by the LLI in the memory. - if GPDMA_CxLLR.UB1=0 and if there is at least one non null Uxx update bit, this field is internally restored to the programmed value. - if all GPDMA_CxLLR.Uxx=0 and if GPDMA_CxLLR.LA[15:0]=0, this field is internally restored to the programmed value (infinite/continuous last LLI). - if GPDMA_CxLLR=0, this field is kept as zero following the last LLI data transfer. Note: A non-null source block size must be a multiple of the source data width (BNDT[2:0] versus GPDMA_CxTR1.SDW_LOG2[1:0]). Else a user setting error is reported and no transfer is issued. When configured in packing mode (GPDMA_CxTR1.PAM[1]=1 and destination data width different from source data width), a non-null source block size must be a multiple of the destination data width (BNDT[2:0] versus GPDMA_CxTR1.DDW_LOG2[1:0]). Else a user setting error is reported and no transfer is issued.

    static constexpr uint32_t GPDMA_C9SAR_RESET_VALUE = 0x0; // Reset value
    typedef bit_field_t<0, 0xffffffff> GPDMA_C9SAR_SA; // source address This field is the pointer to the address from which the next data is read. During the channel activity, depending on the source addressing mode (GPDMA_CxTR1.SINC), this field is kept fixed or incremented by the data width (GPDMA_CxTR1.SDW_LOG2[1:0]) after each single source data, reflecting the next address from which data is read. During the channel activity, this address is updated after each completed source burst, consequently to: the programmed source burst; either in fixed addressing mode or in contiguous-data incremented mode. If contiguously incremented (GPDMA_CxTR1.SINC = 1), then the additional address offset value is the programmed burst size, as defined by GPDMA_CxTR1.SBL_1[5:0] and GPDMA_CxTR1.SDW_LOG2[21:0] the additional source incremented/decremented offset value as programmed by GPDMA_CxBR1.SDEC and GPDMA_CxTR3.SAO[12:0] once/if completed source block transfer, for a channel x with 2D addressing capability (x = 12 to 15). additional block repeat source incremented/decremented offset value as programmed by GPDMA_CxBR1.BRSDEC and GPDMA_CxBR2.BRSAO[15:0] In linked-list mode, after a LLI data transfer is completed, this register is automatically updated by GPDMA from the memory, provided the LLI is set with GPDMA_CxLLR.USA=1. Note: A source address must be aligned with the programmed data width of a source single (SA[2:0] versus GPDMA_CxTR1.SDW_LOG2[1:0]). Else, a user setting error is reported and no transfer is issued. When the source block size is not a multiple of the source burst size and is a multiple of the source data width, the last programmed source burst is not completed and is internally shorten to match the block size. In this case, the additional GPDMA_CxTR3.SAO[12:0] is not applied.

    static constexpr uint32_t GPDMA_C9DAR_RESET_VALUE = 0x0; // Reset value
    typedef bit_field_t<0, 0xffffffff> GPDMA_C9DAR_DA; // destination address This field is the pointer to the address from which the next data is written. During the channel activity, depending on the destination addressing mode (GPDMA_CxTR1.DINC), this field is kept fixed or incremented by the data width (GPDMA_CxTR1.DDW_LOG2[21:0]) after each single destination data, reflecting the next address from which data is written. During the channel activity, this address is updated after each completed destination burst, consequently to: the programmed destination burst; either in fixed addressing mode or in contiguous-data incremented mode. If contiguously incremented (GPDMA_CxTR1.DINC = 1), then the additional address offset value is the programmed burst size, as defined by GPDMA_CxTR1.DBL_1[5:0] and GPDMA_CxTR1.DDW_LOG2[1:0] the additional destination incremented/decremented offset value as programmed by GPDMA_CxBR1.DDEC and GPDMA_CxTR3.DAO[12:0] once/if completed destination block transfer, for a channel x with 2D addressing capability (x=12to15), the additional block repeat destination incremented/decremented offset value as programmed by GPDMA_CxBR1.BRDDEC and GPDMA_CxBR2.BRDAO[15:0] In linked-list mode, after a LLI data transfer is completed, this register is automatically updated by the GPDMA from the memory, provided the LLI is set with GPDMA_CxLLR.UDA=1. Note: A destination address must be aligned with the programmed data width of a destination burst (DA[2:0] versus GPDMA_CxTR1.DDW_LOG2[1:0]). Else, a user setting error is reported and no transfer is issued.


    static constexpr uint32_t GPDMA_C9LLR_RESET_VALUE = 0x0; // Reset value
    typedef bit_field_t<2, 0x3fff> GPDMA_C9LLR_LA; // pointer (16-bit low-significant address) to the next linked-list data structure If UT1=UT2=UB1=USA=UDA=ULL=0 and if LA[15:20]=0, the current LLI is the last one. The channel transfer is completed without any update of the linked-list GPDMA register file. Else, this field is the pointer to the memory address offset from which the next linked-list data structure is automatically fetched from, once the data transfer is completed, in order to conditionally update the linked-list GPDMA internal register file (GPDMA_CxCTR1, GPDMA_CxTR2, GPDMA_CxBR1, GPDMA_CxSAR, GPDMA_CxDAR and GPDMA_CxLLR). Note: The user must program the pointer to be 32-bit aligned. The two low-significant bits are write ignored.
    static constexpr uint32_t GPDMA_C9LLR_ULL = 0x10000; // Update GPDMA_CxLLR register from memory This bit is used to control the update of GPDMA_CxLLR from the memory during the link transfer.
    static constexpr uint32_t GPDMA_C9LLR_UDA = 0x8000000; // Update GPDMA_CxDAR register from memory This bit is used to control the update of GPDMA_CxDAR from the memory during the link transfer.
    static constexpr uint32_t GPDMA_C9LLR_USA = 0x10000000; // update GPDMA_CxSAR from memory This bit controls the update of GPDMA_CxSAR from the memory during the link transfer.
    static constexpr uint32_t GPDMA_C9LLR_UB1 = 0x20000000; // Update GPDMA_CxBR1 from memory This bit controls the update of GPDMA_CxBR1 from the memory during the link transfer. If UB1=0 and if GPDMA_CxLLR0, the linked-list is not completed. GPDMA_CxBR1.BNDT[15:0] is then restored to the programmed value after data transfer is completed and before the link transfer.
    static constexpr uint32_t GPDMA_C9LLR_UT2 = 0x40000000; // Update GPDMA_CxTR2 from memory This bit controls the update of GPDMA_CxTR2 from the memory during the link transfer.
    static constexpr uint32_t GPDMA_C9LLR_UT1 = 0x80000000; // Update GPDMA_CxTR1 from memory This bit controls the update of GPDMA_CxTR1 from the memory during the link transfer.

    static constexpr uint32_t GPDMA_C10LBAR_RESET_VALUE = 0x0; // Reset value
    typedef bit_field_t<16, 0xffff> GPDMA_C10LBAR_LBA; // linked-list base address of GPDMA channel x


    static constexpr uint32_t GPDMA_C10FCR_RESET_VALUE = 0x0; // Reset value
    static constexpr uint32_t GPDMA_C10FCR_TCF = 0x100; // transfer complete flag clear
    static constexpr uint32_t GPDMA_C10FCR_HTF = 0x200; // half transfer flag clear
    static constexpr uint32_t GPDMA_C10FCR_DTEF = 0x400; // data transfer error flag clear
    static constexpr uint32_t GPDMA_C10FCR_ULEF = 0x800; // update link transfer error flag clear
    static constexpr uint32_t GPDMA_C10FCR_USEF = 0x1000; // user setting error flag clear
    static constexpr uint32_t GPDMA_C10FCR_SUSPF = 0x2000; // completed suspension flag clear
    static constexpr uint32_t GPDMA_C10FCR_TOF = 0x4000; // trigger overrun flag clear

    static constexpr uint32_t GPDMA_C10SR_RESET_VALUE = 0x1; // Reset value
    static constexpr uint32_t GPDMA_C10SR_IDLEF = 0x1; // idle flag This idle flag is de-asserted by hardware when the channel is enabled (GPDMA_CxCR.EN=1) with a valid channel configuration (no USEF to be immediately reported). This idle flag is asserted after hard reset or by hardware when the channel is back in idle state (in suspended or disabled state).
    static constexpr uint32_t GPDMA_C10SR_TCF = 0x100; // transfer complete flag A transfer complete event is either a block transfer complete, a 2D/repeated block transfer complete, a LLI transfer complete including the upload of the next LLI if any, or the full linked-list completion, depending on the transfer complete event mode (GPDMA_CxTR2.TCEM[1:0]).
    static constexpr uint32_t GPDMA_C10SR_HTF = 0x200; // half transfer flag An half transfer event is either an half block transfer or an half 2D/repeated block transfer, depending on the transfer complete event mode (GPDMA_CxTR2.TCEM[1:0]). An half block transfer occurs when half of the bytes of the source block size (rounded up integer of GPDMA_CxBR1.BNDT[15:0]/2) has been transferred to the destination. An half 2D/repeated block transfer occurs when half of the repeated blocks (rounded up integer of (GPDMA_CxBR1.BRC[10:0]+1)/2)) has been transferred to the destination.
    static constexpr uint32_t GPDMA_C10SR_DTEF = 0x400; // data transfer error flag
    static constexpr uint32_t GPDMA_C10SR_ULEF = 0x800; // update link transfer error flag
    static constexpr uint32_t GPDMA_C10SR_USEF = 0x1000; // user setting error flag
    static constexpr uint32_t GPDMA_C10SR_SUSPF = 0x2000; // completed suspension flag
    static constexpr uint32_t GPDMA_C10SR_TOF = 0x4000; // trigger overrun flag
    typedef bit_field_t<16, 0xff> GPDMA_C10SR_FIFOL; // monitored FIFO level Number of available write beats in the FIFO, in units of the programmed destination data width (see GPDMA_CxTR1.DDW_LOG2[1:0], in units of bytes, half-words, or words). Note: After having suspended an active transfer, the user may need to read FIFOL[7:0], additionally to GPDMA_CxBR1.BDNT[15:0] and GPDMA_CxBR1.BRC[10:0], to know how many data have been transferred to the destination. Before reading, the user may wait for the transfer to be suspended (GPDMA_CxSR.SUSPF=1).

    static constexpr uint32_t GPDMA_C10CR_RESET_VALUE = 0x0; // Reset value
    static constexpr uint32_t GPDMA_C10CR_EN = 0x1; // enable Writing 1 into the field RESET (bit 1) causes the hardware to de-assert this bit, whatever is written into this bit 0. Else: this bit is de-asserted by hardware when there is a transfer error (master bus error or user setting error) or when there is a channel transfer complete (channel ready to be configured, e.g. if LSM=1 at the end of a single execution of the LLI). Else, this bit can be asserted by software. Writing 0 into this EN bit is ignored.
    static constexpr uint32_t GPDMA_C10CR_RESET = 0x2; // reset This bit is write only. Writing 0 has no impact. Writing 1 implies the reset of the following: the FIFO, the channel internal state, SUSP and EN bits (whatever is written receptively in bit 2 and bit 0). The reset is effective when the channel is in steady state, meaning one of the following: - active channel in suspended state (GPDMA_CxSR.SUSPF=1 and GPDMA_CxSR.IDLEF=GPDMA_CxCR.EN=1) - channel in disabled state (GPDMA_CxSR.IDLEF=1 and GPDMA_CxCR.EN=0). After writing a RESET, to continue using this channel, the user must explicitly reconfigure the channel including the hardware-modified configuration registers (GPDMA_CxBR1, GPDMA_CxSAR and GPDMA_CxDAR) before enabling again the channel (see the programming sequence in ).
    static constexpr uint32_t GPDMA_C10CR_SUSP = 0x4; // suspend Writing 1 into the field RESET (bit 1) causes the hardware to de-assert this bit, whatever is written into this bit 2. Else: Software must write 1 in order to suspend an active channel i.e. a channel with an on-going GPDMA transfer over its master ports. The software must write 0 in order to resume a suspended channel, following the programming sequence detailed in .
    static constexpr uint32_t GPDMA_C10CR_TCIE = 0x100; // transfer complete interrupt enable
    static constexpr uint32_t GPDMA_C10CR_HTIE = 0x200; // half transfer complete interrupt enable
    static constexpr uint32_t GPDMA_C10CR_DTEIE = 0x400; // data transfer error interrupt enable
    static constexpr uint32_t GPDMA_C10CR_ULEIE = 0x800; // update link transfer error interrupt enable
    static constexpr uint32_t GPDMA_C10CR_USEIE = 0x1000; // user setting error interrupt enable
    static constexpr uint32_t GPDMA_C10CR_SUSPIE = 0x2000; // completed suspension interrupt enable
    static constexpr uint32_t GPDMA_C10CR_TOIE = 0x4000; // trigger overrun interrupt enable
    static constexpr uint32_t GPDMA_C10CR_LSM = 0x10000; // Link step mode First the (possible 1D/repeated) block transfer is executed as defined by the current internal register file until GPDMA_CxBR1.BNDT[15:0]=0 and GPDMA_CxBR1.BRC[10:0]=0 if present. Secondly the next linked-list data structure is conditionally uploaded from memory as defined by GPDMA_CxLLR. Then channel execution is completed. Note: This bit must be written when EN=0. This bit is read-only when EN=1.
    static constexpr uint32_t GPDMA_C10CR_LAP = 0x20000; // linked-list allocated port This bit is used to allocate the master port for the update of the GPDMA linked-list registers from the memory. Note: This bit must be written when EN=0. This bit is read-only when EN=1.
    typedef bit_field_t<22, 0x3> GPDMA_C10CR_PRIO; // priority level of the channel x GPDMA transfer versus others Note: This bit must be written when EN=0. This bit is read-only when EN=1.


    static constexpr uint32_t GPDMA_C10TR1_RESET_VALUE = 0x0; // Reset value
    typedef bit_field_t<0, 0x3> GPDMA_C10TR1_SDW_LOG2; // binary logarithm of the source data width of a burst in bytes Note: Setting a 8-byte data width causes a user setting error to be reported and no transfer is issued. A source block size must be a multiple of the source data width (GPDMA_CxBR1.BNDT[2:0] versus SDW_LOG2[1:0]). Otherwise, a user setting error is reported and no transfer is issued. A source single transfer must have an aligned address with its data width (start address GPDMA_CxSAR[2:0] versus SDW_LOG2[1:0]). Otherwise, a user setting error is reported and none transfer is issued.
    static constexpr uint32_t GPDMA_C10TR1_SINC = 0x8; // source incrementing burst The source address, pointed by GPDMA_CxSAR, is kept constant after a burst beat/single transfer or is incremented by the offset value corresponding to a contiguous data after a burst beat/single transfer.
    typedef bit_field_t<4, 0x3f> GPDMA_C10TR1_SBL_1; // source burst length minus 1, between 0 and 63 The burst length unit is one data named beat within a burst. If SBL_1[5:0]=0, the burst can be named as single. Each data/beat has a width defined by the destination data width SDW_LOG2[1:0]. Note: If a burst transfer crossed a 1-Kbyte address boundary on a AHB transfer, the GPDMA modifies and shortens the programmed burst into singles or bursts of lower length, to be compliant with the AHB protocol. If a burst transfer is of length greater than the FIFO size of the channel x, the GPDMA modifies and shortens the programmed burst into singles or bursts of lower length, to be compliant with the FIFO size. Transfer performance is lower, with GPDMA re-arbitration between effective and lower bursts/singles, but the data integrity is guaranteed.
    typedef bit_field_t<11, 0x3> GPDMA_C10TR1_PAM; // padding/alignment mode If DDW_LOG2[1:0] = SDW_LOG2[1:0]: if the data width of a burst destination transfer is equal to the data width of a burst source transfer, these bits are ignored. Else: - Case 1: If destination data width &gt; source data width 1x: successive source data are FIFO queued and packed at the destination data width, in a left (LSB) to right (MSB) order (named little endian), before a destination transfer - Case 2: If destination data width &lt; source data width 1x: source data is FIFO queued and unpacked at the destination data width, to be transferred in a left (LSB) to right (MSB) order (named little endian) to the destination Note:
    static constexpr uint32_t GPDMA_C10TR1_SBX = 0x2000; // source byte exchange within the unaligned half-word of each source word If the source data width is shorter than a word, this bit is ignored. If the source data width is a word:
    static constexpr uint32_t GPDMA_C10TR1_SAP = 0x4000; // source allocated port This bit is used to allocate the master port for the source transfer Note: This bit must be written when EN=0. This bit is read-only when EN=1.
    static constexpr uint32_t GPDMA_C10TR1_SSEC = 0x8000; // security attribute of the GPDMA transfer from the source If GPDMA_SECCFGR.SECx=1 and the access is secure: This is a secure register bit. This bit can only be read by a secure software. This bit must be written by a secure software when GPDMA_SECCFGR.SECx=1. A secure write is ignored when GPDMA_SECCFGR.SECx=0. When GPDMA_SECCFGR.SECx is de-asserted, this SSEC bit is also de-asserted by hardware (on a secure reconfiguration of the channel as non-secure), and the GPDMA transfer from the source is non-secure.
    typedef bit_field_t<16, 0x3> GPDMA_C10TR1_DDW_LOG2; // binary logarithm of the destination data width of a burst, in bytes Note: Setting a 8-byte data width causes a user setting error to be reported and none transfer is issued. A destination burst transfer must have an aligned address with its data width (start address GPDMA_CxDAR[2:0] and address offset GPDMA_CxTR3.DAO[2:0], versus DDW_LOG2[1:0]). Otherwise a user setting error is reported and no transfer is issued.
    static constexpr uint32_t GPDMA_C10TR1_DINC = 0x80000; // destination incrementing burst The destination address, pointed by GPDMA_CxDAR, is kept constant after a burst beat/single transfer, or is incremented by the offset value corresponding to a contiguous data after a burst beat/single transfer.
    typedef bit_field_t<20, 0x3f> GPDMA_C10TR1_DBL_1; // destination burst length minus 1, between 0 and 63 The burst length unit is one data named beat within a burst. If DBL_1[5:0]=0, the burst can be named as single. Each data/beat has a width defined by the destination data width DDW_LOG2[1:0]. Note: If a burst transfer crossed a 1-Kbyte address boundary on a AHB transfer, the GPDMA modifies and shortens the programmed burst into singles or bursts of lower length, to be compliant with the AHB protocol. If a burst transfer is of length greater than the FIFO size of the channel x, the GPDMA modifies and shortens the programmed burst into singles or bursts of lower length, to be compliant with the FIFO size. Transfer performance is lower, with GPDMA re-arbitration between effective and lower bursts/singles, but the data integrity is guaranteed.
    static constexpr uint32_t GPDMA_C10TR1_DBX = 0x4000000; // destination byte exchange If the destination data size is a byte, this bit is ignored. If the destination data size is not a byte:
    static constexpr uint32_t GPDMA_C10TR1_DHX = 0x8000000; // destination half-word exchange If the destination data size is shorter than a word, this bit is ignored. If the destination data size is a word:
    static constexpr uint32_t GPDMA_C10TR1_DAP = 0x40000000; // destination allocated port This bit is used to allocate the master port for the destination transfer Note: This bit must be written when EN=0. This bit is read-only when EN=1.
    static constexpr uint32_t GPDMA_C10TR1_DSEC = 0x80000000; // security attribute of the GPDMA transfer to the destination If GPDMA_SECCFGR.SECx=1 and the access is secure: This is a secure register bit. This bit can only be read by a secure software. This bit must be written by a secure software when GPDMA_SECCFGR.SECx=1. A secure write is ignored when GPDMA_SECCFGR.SECx=0. When GPDMA_SECCFGR.SECx is de-asserted, this DSEC bit is also de-asserted by hardware (on a secure reconfiguration of the channel as non-secure), and the GPDMA transfer to the destination is non-secure.

    static constexpr uint32_t GPDMA_C10TR2_RESET_VALUE = 0x0; // Reset value
    typedef bit_field_t<0, 0x7f> GPDMA_C10TR2_REQSEL; // GPDMA hardware request selection These bits are ignored if channel x is activated (GPDMA_CxCR.EN asserted) with SWREQ=1 (software request for a memory-to-memory transfer). Else, the selected hardware request is internally taken into account as per . The user must not assign a same input hardware request (same REQSEL[6:0] value) to different active GPDMA channels (GPDMA_CxCR.EN=1 and GPDMA_CxTR2.SWREQ=0 for these channels). GPDMA is not intended to hardware support the case of simultaneous enabled channels incorrectly configured with a same hardware peripheral request signal, and there is no user setting error reporting.
    static constexpr uint32_t GPDMA_C10TR2_SWREQ = 0x200; // software request This bit is internally taken into account when GPDMA_CxCR.EN is asserted.
    static constexpr uint32_t GPDMA_C10TR2_DREQ = 0x400; // destination hardware request This bit is ignored if channel x is activated (GPDMA_CxCR.EN asserted) with SWREQ=1 (software request for a memory-to-memory transfer). Else: Note:
    static constexpr uint32_t GPDMA_C10TR2_BREQ = 0x800; // Block hardware request If the channel x is activated (GPDMA_CxCR.EN asserted) with SWREQ=1 (software request for a memory-to-memory transfer), this bit is ignored. Else:
    typedef bit_field_t<14, 0x3> GPDMA_C10TR2_TRIGM; // trigger mode These bits define the transfer granularity for its conditioning by the trigger. If the channel x is enabled (GPDMA_CxCR.EN asserted) with TRIGPOL[1:0]=00 or 11, these TRIGM[1:0] bits are ignored. Else, a GPDMA transfer is conditioned by at least one trigger hit: first burst read of a 2D/repeated block transfer is conditioned by one hit trigger. If the peripheral is programmed as a source (DREQ=0) of the LLI data transfer, each programmed burst read is conditioned. If the peripheral is programmed as a destination (DREQ=1) of the LLI data transfer, each programmed burst write is conditioned. The first memory burst read of a (possibly 2D/repeated) block, also named as the first ready FIFO-based source burst, is gated by the occurrence of both the hardware request and the first trigger hit. The GPDMA monitoring of a trigger for channel x is started when the channel is enabled/loaded with a new active trigger configuration: rising or falling edge on a selected trigger (TRIGPOL[1:0]=01 or respectively TRIGPOL[1:0]=10). The monitoring of this trigger is kept active during the triggered and uncompleted (data or link) transfer; and if a new trigger is detected then, this hit is internally memorized to grant the next transfer, as long as the defined rising or falling edge is not modified, and the TRIGSEL[5:0] is not modified, and the channel is enabled. Transferring a next LLIn+1 that updates the GPDMA_CxTR2 with a new value for any of TRIGSEL[5:0] or TRIGPOL[1:0], resets the monitoring, trashing the memorized hit of the formerly defined LLIn trigger. After a first new trigger hitn+1 is memorized, if another second trigger hitn+2 is detected and if the hitn triggered transfer is still not completed, hitn+2 is lost and not memorized.memorized. A trigger overrun flag is reported (GPDMA_CxSR.TOF=1), and an interrupt is generated if enabled (GPDMA_CxCR.TOIE=1). The channel is not automatically disabled by hardware due to a trigger overrun. Note: When the source block size is not a multiple of the source burst size and is a multiple of the source data width, then the last programmed source burst is not completed and is internally shorten to match the block size. In this case, if TRIGM[1:0]=11 and (SWREQ=1 or (SWREQ=0 and DREQ=0)), the shortened burst transfer (by singles or/and by bursts of lower length) is conditioned once by the trigger. When the programmed destination burst is internally shortened by singles or/and by bursts of lower length (versus FIFO size, versus block size, 1-Kbyte boundary address crossing): if the trigger is conditioning the programmed destination burst (if TRIGM[1:0]=11 and SWREQ=0 and DREQ=1), this shortened destination burst transfer is conditioned once by the trigger.
    typedef bit_field_t<16, 0x3f> GPDMA_C10TR2_TRIGSEL; // trigger event input selection These bits select the trigger event input of the GPDMA transfer (as per ), with an active trigger event if TRIGPOL[1:0]00.
    typedef bit_field_t<24, 0x3> GPDMA_C10TR2_TRIGPOL; // trigger event polarity These bits define the polarity of the selected trigger event input defined by TRIGSEL[5:0].
    typedef bit_field_t<30, 0x3> GPDMA_C10TR2_TCEM; // transfer complete event mode These bits define the transfer granularity for the transfer complete and half transfer complete events generation. Note: If the initial LLI0 data transfer is null/void (directly programmed by the internal register file with GPDMA_CxBR1.BNDT[15:0]=0), then neither the complete transfer event nor the half transfer event is generated. Note: If the initial LLI0 data transfer is null/void (directly programmed by the internal register file with GPDMA_CxBR1.BNDT[15:0]=0), then neither the complete transfer event nor the half transfer event is generated. Note: If the initial LLI0 data transfer is null/void (i.e. directly programmed by the internal register file with GPDMA_CxBR1.BNDT[15:0]=0), then the half transfer event is not generated, and the transfer complete event is generated when is completed the loading of the LLI1.

    static constexpr uint32_t GPDMA_C10BR1_RESET_VALUE = 0x0; // Reset value
    typedef bit_field_t<0, 0xffff> GPDMA_C10BR1_BNDT; // block number of data bytes to transfer from the source Block size transferred from the source. When the channel is enabled, this field becomes read-only and is decremented, indicating the remaining number of data items in the current source block to be transferred. BNDT[15:0] is programmed in number of bytes, maximum source block size is 64Kbytes -1. Once the last data transfer is completed (BNDT[15:0]=0): - if GPDMA_CxLLR.UB1=1, this field is updated by the LLI in the memory. - if GPDMA_CxLLR.UB1=0 and if there is at least one non null Uxx update bit, this field is internally restored to the programmed value. - if all GPDMA_CxLLR.Uxx=0 and if GPDMA_CxLLR.LA[15:0]=0, this field is internally restored to the programmed value (infinite/continuous last LLI). - if GPDMA_CxLLR=0, this field is kept as zero following the last LLI data transfer. Note: A non-null source block size must be a multiple of the source data width (BNDT[2:0] versus GPDMA_CxTR1.SDW_LOG2[1:0]). Else a user setting error is reported and no transfer is issued. When configured in packing mode (GPDMA_CxTR1.PAM[1]=1 and destination data width different from source data width), a non-null source block size must be a multiple of the destination data width (BNDT[2:0] versus GPDMA_CxTR1.DDW_LOG2[1:0]). Else a user setting error is reported and no transfer is issued.

    static constexpr uint32_t GPDMA_C10SAR_RESET_VALUE = 0x0; // Reset value
    typedef bit_field_t<0, 0xffffffff> GPDMA_C10SAR_SA; // source address This field is the pointer to the address from which the next data is read. During the channel activity, depending on the source addressing mode (GPDMA_CxTR1.SINC), this field is kept fixed or incremented by the data width (GPDMA_CxTR1.SDW_LOG2[1:0]) after each single source data, reflecting the next address from which data is read. During the channel activity, this address is updated after each completed source burst, consequently to: the programmed source burst; either in fixed addressing mode or in contiguous-data incremented mode. If contiguously incremented (GPDMA_CxTR1.SINC = 1), then the additional address offset value is the programmed burst size, as defined by GPDMA_CxTR1.SBL_1[5:0] and GPDMA_CxTR1.SDW_LOG2[21:0] the additional source incremented/decremented offset value as programmed by GPDMA_CxBR1.SDEC and GPDMA_CxTR3.SAO[12:0] once/if completed source block transfer, for a channel x with 2D addressing capability (x = 12 to 15). additional block repeat source incremented/decremented offset value as programmed by GPDMA_CxBR1.BRSDEC and GPDMA_CxBR2.BRSAO[15:0] In linked-list mode, after a LLI data transfer is completed, this register is automatically updated by GPDMA from the memory, provided the LLI is set with GPDMA_CxLLR.USA=1. Note: A source address must be aligned with the programmed data width of a source single (SA[2:0] versus GPDMA_CxTR1.SDW_LOG2[1:0]). Else, a user setting error is reported and no transfer is issued. When the source block size is not a multiple of the source burst size and is a multiple of the source data width, the last programmed source burst is not completed and is internally shorten to match the block size. In this case, the additional GPDMA_CxTR3.SAO[12:0] is not applied.

    static constexpr uint32_t GPDMA_C10DAR_RESET_VALUE = 0x0; // Reset value
    typedef bit_field_t<0, 0xffffffff> GPDMA_C10DAR_DA; // destination address This field is the pointer to the address from which the next data is written. During the channel activity, depending on the destination addressing mode (GPDMA_CxTR1.DINC), this field is kept fixed or incremented by the data width (GPDMA_CxTR1.DDW_LOG2[21:0]) after each single destination data, reflecting the next address from which data is written. During the channel activity, this address is updated after each completed destination burst, consequently to: the programmed destination burst; either in fixed addressing mode or in contiguous-data incremented mode. If contiguously incremented (GPDMA_CxTR1.DINC = 1), then the additional address offset value is the programmed burst size, as defined by GPDMA_CxTR1.DBL_1[5:0] and GPDMA_CxTR1.DDW_LOG2[1:0] the additional destination incremented/decremented offset value as programmed by GPDMA_CxBR1.DDEC and GPDMA_CxTR3.DAO[12:0] once/if completed destination block transfer, for a channel x with 2D addressing capability (x=12to15), the additional block repeat destination incremented/decremented offset value as programmed by GPDMA_CxBR1.BRDDEC and GPDMA_CxBR2.BRDAO[15:0] In linked-list mode, after a LLI data transfer is completed, this register is automatically updated by the GPDMA from the memory, provided the LLI is set with GPDMA_CxLLR.UDA=1. Note: A destination address must be aligned with the programmed data width of a destination burst (DA[2:0] versus GPDMA_CxTR1.DDW_LOG2[1:0]). Else, a user setting error is reported and no transfer is issued.


    static constexpr uint32_t GPDMA_C10LLR_RESET_VALUE = 0x0; // Reset value
    typedef bit_field_t<2, 0x3fff> GPDMA_C10LLR_LA; // pointer (16-bit low-significant address) to the next linked-list data structure If UT1=UT2=UB1=USA=UDA=ULL=0 and if LA[15:20]=0, the current LLI is the last one. The channel transfer is completed without any update of the linked-list GPDMA register file. Else, this field is the pointer to the memory address offset from which the next linked-list data structure is automatically fetched from, once the data transfer is completed, in order to conditionally update the linked-list GPDMA internal register file (GPDMA_CxCTR1, GPDMA_CxTR2, GPDMA_CxBR1, GPDMA_CxSAR, GPDMA_CxDAR and GPDMA_CxLLR). Note: The user must program the pointer to be 32-bit aligned. The two low-significant bits are write ignored.
    static constexpr uint32_t GPDMA_C10LLR_ULL = 0x10000; // Update GPDMA_CxLLR register from memory This bit is used to control the update of GPDMA_CxLLR from the memory during the link transfer.
    static constexpr uint32_t GPDMA_C10LLR_UDA = 0x8000000; // Update GPDMA_CxDAR register from memory This bit is used to control the update of GPDMA_CxDAR from the memory during the link transfer.
    static constexpr uint32_t GPDMA_C10LLR_USA = 0x10000000; // update GPDMA_CxSAR from memory This bit controls the update of GPDMA_CxSAR from the memory during the link transfer.
    static constexpr uint32_t GPDMA_C10LLR_UB1 = 0x20000000; // Update GPDMA_CxBR1 from memory This bit controls the update of GPDMA_CxBR1 from the memory during the link transfer. If UB1=0 and if GPDMA_CxLLR0, the linked-list is not completed. GPDMA_CxBR1.BNDT[15:0] is then restored to the programmed value after data transfer is completed and before the link transfer.
    static constexpr uint32_t GPDMA_C10LLR_UT2 = 0x40000000; // Update GPDMA_CxTR2 from memory This bit controls the update of GPDMA_CxTR2 from the memory during the link transfer.
    static constexpr uint32_t GPDMA_C10LLR_UT1 = 0x80000000; // Update GPDMA_CxTR1 from memory This bit controls the update of GPDMA_CxTR1 from the memory during the link transfer.

    static constexpr uint32_t GPDMA_C11LBAR_RESET_VALUE = 0x0; // Reset value
    typedef bit_field_t<16, 0xffff> GPDMA_C11LBAR_LBA; // linked-list base address of GPDMA channel x


    static constexpr uint32_t GPDMA_C11FCR_RESET_VALUE = 0x0; // Reset value
    static constexpr uint32_t GPDMA_C11FCR_TCF = 0x100; // transfer complete flag clear
    static constexpr uint32_t GPDMA_C11FCR_HTF = 0x200; // half transfer flag clear
    static constexpr uint32_t GPDMA_C11FCR_DTEF = 0x400; // data transfer error flag clear
    static constexpr uint32_t GPDMA_C11FCR_ULEF = 0x800; // update link transfer error flag clear
    static constexpr uint32_t GPDMA_C11FCR_USEF = 0x1000; // user setting error flag clear
    static constexpr uint32_t GPDMA_C11FCR_SUSPF = 0x2000; // completed suspension flag clear
    static constexpr uint32_t GPDMA_C11FCR_TOF = 0x4000; // trigger overrun flag clear

    static constexpr uint32_t GPDMA_C11SR_RESET_VALUE = 0x1; // Reset value
    static constexpr uint32_t GPDMA_C11SR_IDLEF = 0x1; // idle flag This idle flag is de-asserted by hardware when the channel is enabled (GPDMA_CxCR.EN=1) with a valid channel configuration (no USEF to be immediately reported). This idle flag is asserted after hard reset or by hardware when the channel is back in idle state (in suspended or disabled state).
    static constexpr uint32_t GPDMA_C11SR_TCF = 0x100; // transfer complete flag A transfer complete event is either a block transfer complete, a 2D/repeated block transfer complete, a LLI transfer complete including the upload of the next LLI if any, or the full linked-list completion, depending on the transfer complete event mode (GPDMA_CxTR2.TCEM[1:0]).
    static constexpr uint32_t GPDMA_C11SR_HTF = 0x200; // half transfer flag An half transfer event is either an half block transfer or an half 2D/repeated block transfer, depending on the transfer complete event mode (GPDMA_CxTR2.TCEM[1:0]). An half block transfer occurs when half of the bytes of the source block size (rounded up integer of GPDMA_CxBR1.BNDT[15:0]/2) has been transferred to the destination. An half 2D/repeated block transfer occurs when half of the repeated blocks (rounded up integer of (GPDMA_CxBR1.BRC[10:0]+1)/2)) has been transferred to the destination.
    static constexpr uint32_t GPDMA_C11SR_DTEF = 0x400; // data transfer error flag
    static constexpr uint32_t GPDMA_C11SR_ULEF = 0x800; // update link transfer error flag
    static constexpr uint32_t GPDMA_C11SR_USEF = 0x1000; // user setting error flag
    static constexpr uint32_t GPDMA_C11SR_SUSPF = 0x2000; // completed suspension flag
    static constexpr uint32_t GPDMA_C11SR_TOF = 0x4000; // trigger overrun flag
    typedef bit_field_t<16, 0xff> GPDMA_C11SR_FIFOL; // monitored FIFO level Number of available write beats in the FIFO, in units of the programmed destination data width (see GPDMA_CxTR1.DDW_LOG2[1:0], in units of bytes, half-words, or words). Note: After having suspended an active transfer, the user may need to read FIFOL[7:0], additionally to GPDMA_CxBR1.BDNT[15:0] and GPDMA_CxBR1.BRC[10:0], to know how many data have been transferred to the destination. Before reading, the user may wait for the transfer to be suspended (GPDMA_CxSR.SUSPF=1).

    static constexpr uint32_t GPDMA_C11CR_RESET_VALUE = 0x0; // Reset value
    static constexpr uint32_t GPDMA_C11CR_EN = 0x1; // enable Writing 1 into the field RESET (bit 1) causes the hardware to de-assert this bit, whatever is written into this bit 0. Else: this bit is de-asserted by hardware when there is a transfer error (master bus error or user setting error) or when there is a channel transfer complete (channel ready to be configured, e.g. if LSM=1 at the end of a single execution of the LLI). Else, this bit can be asserted by software. Writing 0 into this EN bit is ignored.
    static constexpr uint32_t GPDMA_C11CR_RESET = 0x2; // reset This bit is write only. Writing 0 has no impact. Writing 1 implies the reset of the following: the FIFO, the channel internal state, SUSP and EN bits (whatever is written receptively in bit 2 and bit 0). The reset is effective when the channel is in steady state, meaning one of the following: - active channel in suspended state (GPDMA_CxSR.SUSPF=1 and GPDMA_CxSR.IDLEF=GPDMA_CxCR.EN=1) - channel in disabled state (GPDMA_CxSR.IDLEF=1 and GPDMA_CxCR.EN=0). After writing a RESET, to continue using this channel, the user must explicitly reconfigure the channel including the hardware-modified configuration registers (GPDMA_CxBR1, GPDMA_CxSAR and GPDMA_CxDAR) before enabling again the channel (see the programming sequence in ).
    static constexpr uint32_t GPDMA_C11CR_SUSP = 0x4; // suspend Writing 1 into the field RESET (bit 1) causes the hardware to de-assert this bit, whatever is written into this bit 2. Else: Software must write 1 in order to suspend an active channel i.e. a channel with an on-going GPDMA transfer over its master ports. The software must write 0 in order to resume a suspended channel, following the programming sequence detailed in .
    static constexpr uint32_t GPDMA_C11CR_TCIE = 0x100; // transfer complete interrupt enable
    static constexpr uint32_t GPDMA_C11CR_HTIE = 0x200; // half transfer complete interrupt enable
    static constexpr uint32_t GPDMA_C11CR_DTEIE = 0x400; // data transfer error interrupt enable
    static constexpr uint32_t GPDMA_C11CR_ULEIE = 0x800; // update link transfer error interrupt enable
    static constexpr uint32_t GPDMA_C11CR_USEIE = 0x1000; // user setting error interrupt enable
    static constexpr uint32_t GPDMA_C11CR_SUSPIE = 0x2000; // completed suspension interrupt enable
    static constexpr uint32_t GPDMA_C11CR_TOIE = 0x4000; // trigger overrun interrupt enable
    static constexpr uint32_t GPDMA_C11CR_LSM = 0x10000; // Link step mode First the (possible 1D/repeated) block transfer is executed as defined by the current internal register file until GPDMA_CxBR1.BNDT[15:0]=0 and GPDMA_CxBR1.BRC[10:0]=0 if present. Secondly the next linked-list data structure is conditionally uploaded from memory as defined by GPDMA_CxLLR. Then channel execution is completed. Note: This bit must be written when EN=0. This bit is read-only when EN=1.
    static constexpr uint32_t GPDMA_C11CR_LAP = 0x20000; // linked-list allocated port This bit is used to allocate the master port for the update of the GPDMA linked-list registers from the memory. Note: This bit must be written when EN=0. This bit is read-only when EN=1.
    typedef bit_field_t<22, 0x3> GPDMA_C11CR_PRIO; // priority level of the channel x GPDMA transfer versus others Note: This bit must be written when EN=0. This bit is read-only when EN=1.


    static constexpr uint32_t GPDMA_C11TR1_RESET_VALUE = 0x0; // Reset value
    typedef bit_field_t<0, 0x3> GPDMA_C11TR1_SDW_LOG2; // binary logarithm of the source data width of a burst in bytes Note: Setting a 8-byte data width causes a user setting error to be reported and no transfer is issued. A source block size must be a multiple of the source data width (GPDMA_CxBR1.BNDT[2:0] versus SDW_LOG2[1:0]). Otherwise, a user setting error is reported and no transfer is issued. A source single transfer must have an aligned address with its data width (start address GPDMA_CxSAR[2:0] versus SDW_LOG2[1:0]). Otherwise, a user setting error is reported and none transfer is issued.
    static constexpr uint32_t GPDMA_C11TR1_SINC = 0x8; // source incrementing burst The source address, pointed by GPDMA_CxSAR, is kept constant after a burst beat/single transfer or is incremented by the offset value corresponding to a contiguous data after a burst beat/single transfer.
    typedef bit_field_t<4, 0x3f> GPDMA_C11TR1_SBL_1; // source burst length minus 1, between 0 and 63 The burst length unit is one data named beat within a burst. If SBL_1[5:0]=0, the burst can be named as single. Each data/beat has a width defined by the destination data width SDW_LOG2[1:0]. Note: If a burst transfer crossed a 1-Kbyte address boundary on a AHB transfer, the GPDMA modifies and shortens the programmed burst into singles or bursts of lower length, to be compliant with the AHB protocol. If a burst transfer is of length greater than the FIFO size of the channel x, the GPDMA modifies and shortens the programmed burst into singles or bursts of lower length, to be compliant with the FIFO size. Transfer performance is lower, with GPDMA re-arbitration between effective and lower bursts/singles, but the data integrity is guaranteed.
    typedef bit_field_t<11, 0x3> GPDMA_C11TR1_PAM; // padding/alignment mode If DDW_LOG2[1:0] = SDW_LOG2[1:0]: if the data width of a burst destination transfer is equal to the data width of a burst source transfer, these bits are ignored. Else: - Case 1: If destination data width &gt; source data width 1x: successive source data are FIFO queued and packed at the destination data width, in a left (LSB) to right (MSB) order (named little endian), before a destination transfer - Case 2: If destination data width &lt; source data width 1x: source data is FIFO queued and unpacked at the destination data width, to be transferred in a left (LSB) to right (MSB) order (named little endian) to the destination Note:
    static constexpr uint32_t GPDMA_C11TR1_SBX = 0x2000; // source byte exchange within the unaligned half-word of each source word If the source data width is shorter than a word, this bit is ignored. If the source data width is a word:
    static constexpr uint32_t GPDMA_C11TR1_SAP = 0x4000; // source allocated port This bit is used to allocate the master port for the source transfer Note: This bit must be written when EN=0. This bit is read-only when EN=1.
    static constexpr uint32_t GPDMA_C11TR1_SSEC = 0x8000; // security attribute of the GPDMA transfer from the source If GPDMA_SECCFGR.SECx=1 and the access is secure: This is a secure register bit. This bit can only be read by a secure software. This bit must be written by a secure software when GPDMA_SECCFGR.SECx=1. A secure write is ignored when GPDMA_SECCFGR.SECx=0. When GPDMA_SECCFGR.SECx is de-asserted, this SSEC bit is also de-asserted by hardware (on a secure reconfiguration of the channel as non-secure), and the GPDMA transfer from the source is non-secure.
    typedef bit_field_t<16, 0x3> GPDMA_C11TR1_DDW_LOG2; // binary logarithm of the destination data width of a burst, in bytes Note: Setting a 8-byte data width causes a user setting error to be reported and none transfer is issued. A destination burst transfer must have an aligned address with its data width (start address GPDMA_CxDAR[2:0] and address offset GPDMA_CxTR3.DAO[2:0], versus DDW_LOG2[1:0]). Otherwise a user setting error is reported and no transfer is issued.
    static constexpr uint32_t GPDMA_C11TR1_DINC = 0x80000; // destination incrementing burst The destination address, pointed by GPDMA_CxDAR, is kept constant after a burst beat/single transfer, or is incremented by the offset value corresponding to a contiguous data after a burst beat/single transfer.
    typedef bit_field_t<20, 0x3f> GPDMA_C11TR1_DBL_1; // destination burst length minus 1, between 0 and 63 The burst length unit is one data named beat within a burst. If DBL_1[5:0]=0, the burst can be named as single. Each data/beat has a width defined by the destination data width DDW_LOG2[1:0]. Note: If a burst transfer crossed a 1-Kbyte address boundary on a AHB transfer, the GPDMA modifies and shortens the programmed burst into singles or bursts of lower length, to be compliant with the AHB protocol. If a burst transfer is of length greater than the FIFO size of the channel x, the GPDMA modifies and shortens the programmed burst into singles or bursts of lower length, to be compliant with the FIFO size. Transfer performance is lower, with GPDMA re-arbitration between effective and lower bursts/singles, but the data integrity is guaranteed.
    static constexpr uint32_t GPDMA_C11TR1_DBX = 0x4000000; // destination byte exchange If the destination data size is a byte, this bit is ignored. If the destination data size is not a byte:
    static constexpr uint32_t GPDMA_C11TR1_DHX = 0x8000000; // destination half-word exchange If the destination data size is shorter than a word, this bit is ignored. If the destination data size is a word:
    static constexpr uint32_t GPDMA_C11TR1_DAP = 0x40000000; // destination allocated port This bit is used to allocate the master port for the destination transfer Note: This bit must be written when EN=0. This bit is read-only when EN=1.
    static constexpr uint32_t GPDMA_C11TR1_DSEC = 0x80000000; // security attribute of the GPDMA transfer to the destination If GPDMA_SECCFGR.SECx=1 and the access is secure: This is a secure register bit. This bit can only be read by a secure software. This bit must be written by a secure software when GPDMA_SECCFGR.SECx=1. A secure write is ignored when GPDMA_SECCFGR.SECx=0. When GPDMA_SECCFGR.SECx is de-asserted, this DSEC bit is also de-asserted by hardware (on a secure reconfiguration of the channel as non-secure), and the GPDMA transfer to the destination is non-secure.

    static constexpr uint32_t GPDMA_C11TR2_RESET_VALUE = 0x0; // Reset value
    typedef bit_field_t<0, 0x7f> GPDMA_C11TR2_REQSEL; // GPDMA hardware request selection These bits are ignored if channel x is activated (GPDMA_CxCR.EN asserted) with SWREQ=1 (software request for a memory-to-memory transfer). Else, the selected hardware request is internally taken into account as per . The user must not assign a same input hardware request (same REQSEL[6:0] value) to different active GPDMA channels (GPDMA_CxCR.EN=1 and GPDMA_CxTR2.SWREQ=0 for these channels). GPDMA is not intended to hardware support the case of simultaneous enabled channels incorrectly configured with a same hardware peripheral request signal, and there is no user setting error reporting.
    static constexpr uint32_t GPDMA_C11TR2_SWREQ = 0x200; // software request This bit is internally taken into account when GPDMA_CxCR.EN is asserted.
    static constexpr uint32_t GPDMA_C11TR2_DREQ = 0x400; // destination hardware request This bit is ignored if channel x is activated (GPDMA_CxCR.EN asserted) with SWREQ=1 (software request for a memory-to-memory transfer). Else: Note:
    static constexpr uint32_t GPDMA_C11TR2_BREQ = 0x800; // Block hardware request If the channel x is activated (GPDMA_CxCR.EN asserted) with SWREQ=1 (software request for a memory-to-memory transfer), this bit is ignored. Else:
    typedef bit_field_t<14, 0x3> GPDMA_C11TR2_TRIGM; // trigger mode These bits define the transfer granularity for its conditioning by the trigger. If the channel x is enabled (GPDMA_CxCR.EN asserted) with TRIGPOL[1:0]=00 or 11, these TRIGM[1:0] bits are ignored. Else, a GPDMA transfer is conditioned by at least one trigger hit: first burst read of a 2D/repeated block transfer is conditioned by one hit trigger. If the peripheral is programmed as a source (DREQ=0) of the LLI data transfer, each programmed burst read is conditioned. If the peripheral is programmed as a destination (DREQ=1) of the LLI data transfer, each programmed burst write is conditioned. The first memory burst read of a (possibly 2D/repeated) block, also named as the first ready FIFO-based source burst, is gated by the occurrence of both the hardware request and the first trigger hit. The GPDMA monitoring of a trigger for channel x is started when the channel is enabled/loaded with a new active trigger configuration: rising or falling edge on a selected trigger (TRIGPOL[1:0]=01 or respectively TRIGPOL[1:0]=10). The monitoring of this trigger is kept active during the triggered and uncompleted (data or link) transfer; and if a new trigger is detected then, this hit is internally memorized to grant the next transfer, as long as the defined rising or falling edge is not modified, and the TRIGSEL[5:0] is not modified, and the channel is enabled. Transferring a next LLIn+1 that updates the GPDMA_CxTR2 with a new value for any of TRIGSEL[5:0] or TRIGPOL[1:0], resets the monitoring, trashing the memorized hit of the formerly defined LLIn trigger. After a first new trigger hitn+1 is memorized, if another second trigger hitn+2 is detected and if the hitn triggered transfer is still not completed, hitn+2 is lost and not memorized.memorized. A trigger overrun flag is reported (GPDMA_CxSR.TOF=1), and an interrupt is generated if enabled (GPDMA_CxCR.TOIE=1). The channel is not automatically disabled by hardware due to a trigger overrun. Note: When the source block size is not a multiple of the source burst size and is a multiple of the source data width, then the last programmed source burst is not completed and is internally shorten to match the block size. In this case, if TRIGM[1:0]=11 and (SWREQ=1 or (SWREQ=0 and DREQ=0)), the shortened burst transfer (by singles or/and by bursts of lower length) is conditioned once by the trigger. When the programmed destination burst is internally shortened by singles or/and by bursts of lower length (versus FIFO size, versus block size, 1-Kbyte boundary address crossing): if the trigger is conditioning the programmed destination burst (if TRIGM[1:0]=11 and SWREQ=0 and DREQ=1), this shortened destination burst transfer is conditioned once by the trigger.
    typedef bit_field_t<16, 0x3f> GPDMA_C11TR2_TRIGSEL; // trigger event input selection These bits select the trigger event input of the GPDMA transfer (as per ), with an active trigger event if TRIGPOL[1:0]00.
    typedef bit_field_t<24, 0x3> GPDMA_C11TR2_TRIGPOL; // trigger event polarity These bits define the polarity of the selected trigger event input defined by TRIGSEL[5:0].
    typedef bit_field_t<30, 0x3> GPDMA_C11TR2_TCEM; // transfer complete event mode These bits define the transfer granularity for the transfer complete and half transfer complete events generation. Note: If the initial LLI0 data transfer is null/void (directly programmed by the internal register file with GPDMA_CxBR1.BNDT[15:0]=0), then neither the complete transfer event nor the half transfer event is generated. Note: If the initial LLI0 data transfer is null/void (directly programmed by the internal register file with GPDMA_CxBR1.BNDT[15:0]=0), then neither the complete transfer event nor the half transfer event is generated. Note: If the initial LLI0 data transfer is null/void (i.e. directly programmed by the internal register file with GPDMA_CxBR1.BNDT[15:0]=0), then the half transfer event is not generated, and the transfer complete event is generated when is completed the loading of the LLI1.

    static constexpr uint32_t GPDMA_C11BR1_RESET_VALUE = 0x0; // Reset value
    typedef bit_field_t<0, 0xffff> GPDMA_C11BR1_BNDT; // block number of data bytes to transfer from the source Block size transferred from the source. When the channel is enabled, this field becomes read-only and is decremented, indicating the remaining number of data items in the current source block to be transferred. BNDT[15:0] is programmed in number of bytes, maximum source block size is 64Kbytes -1. Once the last data transfer is completed (BNDT[15:0]=0): - if GPDMA_CxLLR.UB1=1, this field is updated by the LLI in the memory. - if GPDMA_CxLLR.UB1=0 and if there is at least one non null Uxx update bit, this field is internally restored to the programmed value. - if all GPDMA_CxLLR.Uxx=0 and if GPDMA_CxLLR.LA[15:0]=0, this field is internally restored to the programmed value (infinite/continuous last LLI). - if GPDMA_CxLLR=0, this field is kept as zero following the last LLI data transfer. Note: A non-null source block size must be a multiple of the source data width (BNDT[2:0] versus GPDMA_CxTR1.SDW_LOG2[1:0]). Else a user setting error is reported and no transfer is issued. When configured in packing mode (GPDMA_CxTR1.PAM[1]=1 and destination data width different from source data width), a non-null source block size must be a multiple of the destination data width (BNDT[2:0] versus GPDMA_CxTR1.DDW_LOG2[1:0]). Else a user setting error is reported and no transfer is issued.

    static constexpr uint32_t GPDMA_C11SAR_RESET_VALUE = 0x0; // Reset value
    typedef bit_field_t<0, 0xffffffff> GPDMA_C11SAR_SA; // source address This field is the pointer to the address from which the next data is read. During the channel activity, depending on the source addressing mode (GPDMA_CxTR1.SINC), this field is kept fixed or incremented by the data width (GPDMA_CxTR1.SDW_LOG2[1:0]) after each single source data, reflecting the next address from which data is read. During the channel activity, this address is updated after each completed source burst, consequently to: the programmed source burst; either in fixed addressing mode or in contiguous-data incremented mode. If contiguously incremented (GPDMA_CxTR1.SINC = 1), then the additional address offset value is the programmed burst size, as defined by GPDMA_CxTR1.SBL_1[5:0] and GPDMA_CxTR1.SDW_LOG2[21:0] the additional source incremented/decremented offset value as programmed by GPDMA_CxBR1.SDEC and GPDMA_CxTR3.SAO[12:0] once/if completed source block transfer, for a channel x with 2D addressing capability (x = 12 to 15). additional block repeat source incremented/decremented offset value as programmed by GPDMA_CxBR1.BRSDEC and GPDMA_CxBR2.BRSAO[15:0] In linked-list mode, after a LLI data transfer is completed, this register is automatically updated by GPDMA from the memory, provided the LLI is set with GPDMA_CxLLR.USA=1. Note: A source address must be aligned with the programmed data width of a source single (SA[2:0] versus GPDMA_CxTR1.SDW_LOG2[1:0]). Else, a user setting error is reported and no transfer is issued. When the source block size is not a multiple of the source burst size and is a multiple of the source data width, the last programmed source burst is not completed and is internally shorten to match the block size. In this case, the additional GPDMA_CxTR3.SAO[12:0] is not applied.

    static constexpr uint32_t GPDMA_C11DAR_RESET_VALUE = 0x0; // Reset value
    typedef bit_field_t<0, 0xffffffff> GPDMA_C11DAR_DA; // destination address This field is the pointer to the address from which the next data is written. During the channel activity, depending on the destination addressing mode (GPDMA_CxTR1.DINC), this field is kept fixed or incremented by the data width (GPDMA_CxTR1.DDW_LOG2[21:0]) after each single destination data, reflecting the next address from which data is written. During the channel activity, this address is updated after each completed destination burst, consequently to: the programmed destination burst; either in fixed addressing mode or in contiguous-data incremented mode. If contiguously incremented (GPDMA_CxTR1.DINC = 1), then the additional address offset value is the programmed burst size, as defined by GPDMA_CxTR1.DBL_1[5:0] and GPDMA_CxTR1.DDW_LOG2[1:0] the additional destination incremented/decremented offset value as programmed by GPDMA_CxBR1.DDEC and GPDMA_CxTR3.DAO[12:0] once/if completed destination block transfer, for a channel x with 2D addressing capability (x=12to15), the additional block repeat destination incremented/decremented offset value as programmed by GPDMA_CxBR1.BRDDEC and GPDMA_CxBR2.BRDAO[15:0] In linked-list mode, after a LLI data transfer is completed, this register is automatically updated by the GPDMA from the memory, provided the LLI is set with GPDMA_CxLLR.UDA=1. Note: A destination address must be aligned with the programmed data width of a destination burst (DA[2:0] versus GPDMA_CxTR1.DDW_LOG2[1:0]). Else, a user setting error is reported and no transfer is issued.


    static constexpr uint32_t GPDMA_C11LLR_RESET_VALUE = 0x0; // Reset value
    typedef bit_field_t<2, 0x3fff> GPDMA_C11LLR_LA; // pointer (16-bit low-significant address) to the next linked-list data structure If UT1=UT2=UB1=USA=UDA=ULL=0 and if LA[15:20]=0, the current LLI is the last one. The channel transfer is completed without any update of the linked-list GPDMA register file. Else, this field is the pointer to the memory address offset from which the next linked-list data structure is automatically fetched from, once the data transfer is completed, in order to conditionally update the linked-list GPDMA internal register file (GPDMA_CxCTR1, GPDMA_CxTR2, GPDMA_CxBR1, GPDMA_CxSAR, GPDMA_CxDAR and GPDMA_CxLLR). Note: The user must program the pointer to be 32-bit aligned. The two low-significant bits are write ignored.
    static constexpr uint32_t GPDMA_C11LLR_ULL = 0x10000; // Update GPDMA_CxLLR register from memory This bit is used to control the update of GPDMA_CxLLR from the memory during the link transfer.
    static constexpr uint32_t GPDMA_C11LLR_UDA = 0x8000000; // Update GPDMA_CxDAR register from memory This bit is used to control the update of GPDMA_CxDAR from the memory during the link transfer.
    static constexpr uint32_t GPDMA_C11LLR_USA = 0x10000000; // update GPDMA_CxSAR from memory This bit controls the update of GPDMA_CxSAR from the memory during the link transfer.
    static constexpr uint32_t GPDMA_C11LLR_UB1 = 0x20000000; // Update GPDMA_CxBR1 from memory This bit controls the update of GPDMA_CxBR1 from the memory during the link transfer. If UB1=0 and if GPDMA_CxLLR0, the linked-list is not completed. GPDMA_CxBR1.BNDT[15:0] is then restored to the programmed value after data transfer is completed and before the link transfer.
    static constexpr uint32_t GPDMA_C11LLR_UT2 = 0x40000000; // Update GPDMA_CxTR2 from memory This bit controls the update of GPDMA_CxTR2 from the memory during the link transfer.
    static constexpr uint32_t GPDMA_C11LLR_UT1 = 0x80000000; // Update GPDMA_CxTR1 from memory This bit controls the update of GPDMA_CxTR1 from the memory during the link transfer.

    static constexpr uint32_t GPDMA_C12LBAR_RESET_VALUE = 0x0; // Reset value
    typedef bit_field_t<16, 0xffff> GPDMA_C12LBAR_LBA; // linked-list base address of GPDMA channel x


    static constexpr uint32_t GPDMA_C12FCR_RESET_VALUE = 0x0; // Reset value
    static constexpr uint32_t GPDMA_C12FCR_TCF = 0x100; // transfer complete flag clear
    static constexpr uint32_t GPDMA_C12FCR_HTF = 0x200; // half transfer flag clear
    static constexpr uint32_t GPDMA_C12FCR_DTEF = 0x400; // data transfer error flag clear
    static constexpr uint32_t GPDMA_C12FCR_ULEF = 0x800; // update link transfer error flag clear
    static constexpr uint32_t GPDMA_C12FCR_USEF = 0x1000; // user setting error flag clear
    static constexpr uint32_t GPDMA_C12FCR_SUSPF = 0x2000; // completed suspension flag clear
    static constexpr uint32_t GPDMA_C12FCR_TOF = 0x4000; // trigger overrun flag clear

    static constexpr uint32_t GPDMA_C12SR_RESET_VALUE = 0x1; // Reset value
    static constexpr uint32_t GPDMA_C12SR_IDLEF = 0x1; // idle flag This idle flag is de-asserted by hardware when the channel is enabled (GPDMA_CxCR.EN=1) with a valid channel configuration (no USEF to be immediately reported). This idle flag is asserted after hard reset or by hardware when the channel is back in idle state (in suspended or disabled state).
    static constexpr uint32_t GPDMA_C12SR_TCF = 0x100; // transfer complete flag A transfer complete event is either a block transfer complete, a 2D/repeated block transfer complete, a LLI transfer complete including the upload of the next LLI if any, or the full linked-list completion, depending on the transfer complete event mode (GPDMA_CxTR2.TCEM[1:0]).
    static constexpr uint32_t GPDMA_C12SR_HTF = 0x200; // half transfer flag An half transfer event is either an half block transfer or an half 2D/repeated block transfer, depending on the transfer complete event mode (GPDMA_CxTR2.TCEM[1:0]). An half block transfer occurs when half of the bytes of the source block size (rounded up integer of GPDMA_CxBR1.BNDT[15:0]/2) has been transferred to the destination. An half 2D/repeated block transfer occurs when half of the repeated blocks (rounded up integer of (GPDMA_CxBR1.BRC[10:0]+1)/2)) has been transferred to the destination.
    static constexpr uint32_t GPDMA_C12SR_DTEF = 0x400; // data transfer error flag
    static constexpr uint32_t GPDMA_C12SR_ULEF = 0x800; // update link transfer error flag
    static constexpr uint32_t GPDMA_C12SR_USEF = 0x1000; // user setting error flag
    static constexpr uint32_t GPDMA_C12SR_SUSPF = 0x2000; // completed suspension flag
    static constexpr uint32_t GPDMA_C12SR_TOF = 0x4000; // trigger overrun flag
    typedef bit_field_t<16, 0xff> GPDMA_C12SR_FIFOL; // monitored FIFO level Number of available write beats in the FIFO, in units of the programmed destination data width (see GPDMA_CxTR1.DDW_LOG2[1:0], in units of bytes, half-words, or words). Note: After having suspended an active transfer, the user may need to read FIFOL[7:0], additionally to GPDMA_CxBR1.BDNT[15:0] and GPDMA_CxBR1.BRC[10:0], to know how many data have been transferred to the destination. Before reading, the user may wait for the transfer to be suspended (GPDMA_CxSR.SUSPF=1).

    static constexpr uint32_t GPDMA_C12CR_RESET_VALUE = 0x0; // Reset value
    static constexpr uint32_t GPDMA_C12CR_EN = 0x1; // enable Writing 1 into the field RESET (bit 1) causes the hardware to de-assert this bit, whatever is written into this bit 0. Else: this bit is de-asserted by hardware when there is a transfer error (master bus error or user setting error) or when there is a channel transfer complete (channel ready to be configured, e.g. if LSM=1 at the end of a single execution of the LLI). Else, this bit can be asserted by software. Writing 0 into this EN bit is ignored.
    static constexpr uint32_t GPDMA_C12CR_RESET = 0x2; // reset This bit is write only. Writing 0 has no impact. Writing 1 implies the reset of the following: the FIFO, the channel internal state, SUSP and EN bits (whatever is written receptively in bit 2 and bit 0). The reset is effective when the channel is in steady state, meaning one of the following: - active channel in suspended state (GPDMA_CxSR.SUSPF=1 and GPDMA_CxSR.IDLEF=GPDMA_CxCR.EN=1) - channel in disabled state (GPDMA_CxSR.IDLEF=1 and GPDMA_CxCR.EN=0). After writing a RESET, to continue using this channel, the user must explicitly reconfigure the channel including the hardware-modified configuration registers (GPDMA_CxBR1, GPDMA_CxSAR and GPDMA_CxDAR) before enabling again the channel (see the programming sequence in ).
    static constexpr uint32_t GPDMA_C12CR_SUSP = 0x4; // suspend Writing 1 into the field RESET (bit 1) causes the hardware to de-assert this bit, whatever is written into this bit 2. Else: Software must write 1 in order to suspend an active channel i.e. a channel with an on-going GPDMA transfer over its master ports. The software must write 0 in order to resume a suspended channel, following the programming sequence detailed in .
    static constexpr uint32_t GPDMA_C12CR_TCIE = 0x100; // transfer complete interrupt enable
    static constexpr uint32_t GPDMA_C12CR_HTIE = 0x200; // half transfer complete interrupt enable
    static constexpr uint32_t GPDMA_C12CR_DTEIE = 0x400; // data transfer error interrupt enable
    static constexpr uint32_t GPDMA_C12CR_ULEIE = 0x800; // update link transfer error interrupt enable
    static constexpr uint32_t GPDMA_C12CR_USEIE = 0x1000; // user setting error interrupt enable
    static constexpr uint32_t GPDMA_C12CR_SUSPIE = 0x2000; // completed suspension interrupt enable
    static constexpr uint32_t GPDMA_C12CR_TOIE = 0x4000; // trigger overrun interrupt enable
    static constexpr uint32_t GPDMA_C12CR_LSM = 0x10000; // Link step mode First the (possible 1D/repeated) block transfer is executed as defined by the current internal register file until GPDMA_CxBR1.BNDT[15:0]=0 and GPDMA_CxBR1.BRC[10:0]=0 if present. Secondly the next linked-list data structure is conditionally uploaded from memory as defined by GPDMA_CxLLR. Then channel execution is completed. Note: This bit must be written when EN=0. This bit is read-only when EN=1.
    static constexpr uint32_t GPDMA_C12CR_LAP = 0x20000; // linked-list allocated port This bit is used to allocate the master port for the update of the GPDMA linked-list registers from the memory. Note: This bit must be written when EN=0. This bit is read-only when EN=1.
    typedef bit_field_t<22, 0x3> GPDMA_C12CR_PRIO; // priority level of the channel x GPDMA transfer versus others Note: This bit must be written when EN=0. This bit is read-only when EN=1.


    static constexpr uint32_t GPDMA_C12TR1_RESET_VALUE = 0x0; // Reset value
    typedef bit_field_t<0, 0x3> GPDMA_C12TR1_SDW_LOG2; // binary logarithm of the source data width of a burst in bytes Note: Setting a 8-byte data width causes a user setting error to be reported and no transfer is issued. A source block size must be a multiple of the source data width (GPDMA_CxBR1.BNDT[2:0] versus SDW_LOG2[1:0]). Otherwise, a user setting error is reported and no transfer is issued. A source single transfer must have an aligned address with its data width (start address GPDMA_CxSAR[2:0] versus SDW_LOG2[1:0]). Otherwise, a user setting error is reported and none transfer is issued.
    static constexpr uint32_t GPDMA_C12TR1_SINC = 0x8; // source incrementing burst The source address, pointed by GPDMA_CxSAR, is kept constant after a burst beat/single transfer or is incremented by the offset value corresponding to a contiguous data after a burst beat/single transfer.
    typedef bit_field_t<4, 0x3f> GPDMA_C12TR1_SBL_1; // source burst length minus 1, between 0 and 63 The burst length unit is one data named beat within a burst. If SBL_1[5:0]=0, the burst can be named as single. Each data/beat has a width defined by the destination data width SDW_LOG2[1:0]. Note: If a burst transfer crossed a 1-Kbyte address boundary on a AHB transfer, the GPDMA modifies and shortens the programmed burst into singles or bursts of lower length, to be compliant with the AHB protocol. If a burst transfer is of length greater than the FIFO size of the channel x, the GPDMA modifies and shortens the programmed burst into singles or bursts of lower length, to be compliant with the FIFO size. Transfer performance is lower, with GPDMA re-arbitration between effective and lower bursts/singles, but the data integrity is guaranteed.
    typedef bit_field_t<11, 0x3> GPDMA_C12TR1_PAM; // padding/alignment mode If DDW_LOG2[1:0] = SDW_LOG2[1:0]: if the data width of a burst destination transfer is equal to the data width of a burst source transfer, these bits are ignored. Else: - Case 1: If destination data width &gt; source data width 1x: successive source data are FIFO queued and packed at the destination data width, in a left (LSB) to right (MSB) order (named little endian), before a destination transfer - Case 2: If destination data width &lt; source data width 1x: source data is FIFO queued and unpacked at the destination data width, to be transferred in a left (LSB) to right (MSB) order (named little endian) to the destination Note:
    static constexpr uint32_t GPDMA_C12TR1_SBX = 0x2000; // source byte exchange within the unaligned half-word of each source word If the source data width is shorter than a word, this bit is ignored. If the source data width is a word:
    static constexpr uint32_t GPDMA_C12TR1_SAP = 0x4000; // source allocated port This bit is used to allocate the master port for the source transfer Note: This bit must be written when EN=0. This bit is read-only when EN=1.
    static constexpr uint32_t GPDMA_C12TR1_SSEC = 0x8000; // security attribute of the GPDMA transfer from the source If GPDMA_SECCFGR.SECx=1 and the access is secure: This is a secure register bit. This bit can only be read by a secure software. This bit must be written by a secure software when GPDMA_SECCFGR.SECx=1. A secure write is ignored when GPDMA_SECCFGR.SECx=0. When GPDMA_SECCFGR.SECx is de-asserted, this SSEC bit is also de-asserted by hardware (on a secure reconfiguration of the channel as non-secure), and the GPDMA transfer from the source is non-secure.
    typedef bit_field_t<16, 0x3> GPDMA_C12TR1_DDW_LOG2; // binary logarithm of the destination data width of a burst, in bytes Note: Setting a 8-byte data width causes a user setting error to be reported and none transfer is issued. A destination burst transfer must have an aligned address with its data width (start address GPDMA_CxDAR[2:0] and address offset GPDMA_CxTR3.DAO[2:0], versus DDW_LOG2[1:0]). Otherwise a user setting error is reported and no transfer is issued.
    static constexpr uint32_t GPDMA_C12TR1_DINC = 0x80000; // destination incrementing burst The destination address, pointed by GPDMA_CxDAR, is kept constant after a burst beat/single transfer, or is incremented by the offset value corresponding to a contiguous data after a burst beat/single transfer.
    typedef bit_field_t<20, 0x3f> GPDMA_C12TR1_DBL_1; // destination burst length minus 1, between 0 and 63 The burst length unit is one data named beat within a burst. If DBL_1[5:0]=0, the burst can be named as single. Each data/beat has a width defined by the destination data width DDW_LOG2[1:0]. Note: If a burst transfer crossed a 1-Kbyte address boundary on a AHB transfer, the GPDMA modifies and shortens the programmed burst into singles or bursts of lower length, to be compliant with the AHB protocol. If a burst transfer is of length greater than the FIFO size of the channel x, the GPDMA modifies and shortens the programmed burst into singles or bursts of lower length, to be compliant with the FIFO size. Transfer performance is lower, with GPDMA re-arbitration between effective and lower bursts/singles, but the data integrity is guaranteed.
    static constexpr uint32_t GPDMA_C12TR1_DBX = 0x4000000; // destination byte exchange If the destination data size is a byte, this bit is ignored. If the destination data size is not a byte:
    static constexpr uint32_t GPDMA_C12TR1_DHX = 0x8000000; // destination half-word exchange If the destination data size is shorter than a word, this bit is ignored. If the destination data size is a word:
    static constexpr uint32_t GPDMA_C12TR1_DAP = 0x40000000; // destination allocated port This bit is used to allocate the master port for the destination transfer Note: This bit must be written when EN=0. This bit is read-only when EN=1.
    static constexpr uint32_t GPDMA_C12TR1_DSEC = 0x80000000; // security attribute of the GPDMA transfer to the destination If GPDMA_SECCFGR.SECx=1 and the access is secure: This is a secure register bit. This bit can only be read by a secure software. This bit must be written by a secure software when GPDMA_SECCFGR.SECx=1. A secure write is ignored when GPDMA_SECCFGR.SECx=0. When GPDMA_SECCFGR.SECx is de-asserted, this DSEC bit is also de-asserted by hardware (on a secure reconfiguration of the channel as non-secure), and the GPDMA transfer to the destination is non-secure.

    static constexpr uint32_t GPDMA_C12TR2_RESET_VALUE = 0x0; // Reset value
    typedef bit_field_t<0, 0x7f> GPDMA_C12TR2_REQSEL; // GPDMA hardware request selection These bits are ignored if channel x is activated (GPDMA_CxCR.EN asserted) with SWREQ=1 (software request for a memory-to-memory transfer). Else, the selected hardware request is internally taken into account as per . The user must not assign a same input hardware request (same REQSEL[6:0] value) to different active GPDMA channels (GPDMA_CxCR.EN=1 and GPDMA_CxTR2.SWREQ=0 for these channels). GPDMA is not intended to hardware support the case of simultaneous enabled channels incorrectly configured with a same hardware peripheral request signal, and there is no user setting error reporting.
    static constexpr uint32_t GPDMA_C12TR2_SWREQ = 0x200; // software request This bit is internally taken into account when GPDMA_CxCR.EN is asserted.
    static constexpr uint32_t GPDMA_C12TR2_DREQ = 0x400; // destination hardware request This bit is ignored if channel x is activated (GPDMA_CxCR.EN asserted) with SWREQ=1 (software request for a memory-to-memory transfer). Else: Note:
    static constexpr uint32_t GPDMA_C12TR2_BREQ = 0x800; // Block hardware request If the channel x is activated (GPDMA_CxCR.EN asserted) with SWREQ=1 (software request for a memory-to-memory transfer), this bit is ignored. Else:
    typedef bit_field_t<14, 0x3> GPDMA_C12TR2_TRIGM; // trigger mode These bits define the transfer granularity for its conditioning by the trigger. If the channel x is enabled (GPDMA_CxCR.EN asserted) with TRIGPOL[1:0]=00 or 11, these TRIGM[1:0] bits are ignored. Else, a GPDMA transfer is conditioned by at least one trigger hit: first burst read of a 2D/repeated block transfer is conditioned by one hit trigger. If the peripheral is programmed as a source (DREQ=0) of the LLI data transfer, each programmed burst read is conditioned. If the peripheral is programmed as a destination (DREQ=1) of the LLI data transfer, each programmed burst write is conditioned. The first memory burst read of a (possibly 2D/repeated) block, also named as the first ready FIFO-based source burst, is gated by the occurrence of both the hardware request and the first trigger hit. The GPDMA monitoring of a trigger for channel x is started when the channel is enabled/loaded with a new active trigger configuration: rising or falling edge on a selected trigger (TRIGPOL[1:0]=01 or respectively TRIGPOL[1:0]=10). The monitoring of this trigger is kept active during the triggered and uncompleted (data or link) transfer; and if a new trigger is detected then, this hit is internally memorized to grant the next transfer, as long as the defined rising or falling edge is not modified, and the TRIGSEL[5:0] is not modified, and the channel is enabled. Transferring a next LLIn+1 that updates the GPDMA_CxTR2 with a new value for any of TRIGSEL[5:0] or TRIGPOL[1:0], resets the monitoring, trashing the memorized hit of the formerly defined LLIn trigger. After a first new trigger hitn+1 is memorized, if another second trigger hitn+2 is detected and if the hitn triggered transfer is still not completed, hitn+2 is lost and not memorized.memorized. A trigger overrun flag is reported (GPDMA_CxSR.TOF=1), and an interrupt is generated if enabled (GPDMA_CxCR.TOIE=1). The channel is not automatically disabled by hardware due to a trigger overrun. Note: When the source block size is not a multiple of the source burst size and is a multiple of the source data width, then the last programmed source burst is not completed and is internally shorten to match the block size. In this case, if TRIGM[1:0]=11 and (SWREQ=1 or (SWREQ=0 and DREQ=0)), the shortened burst transfer (by singles or/and by bursts of lower length) is conditioned once by the trigger. When the programmed destination burst is internally shortened by singles or/and by bursts of lower length (versus FIFO size, versus block size, 1-Kbyte boundary address crossing): if the trigger is conditioning the programmed destination burst (if TRIGM[1:0]=11 and SWREQ=0 and DREQ=1), this shortened destination burst transfer is conditioned once by the trigger.
    typedef bit_field_t<16, 0x3f> GPDMA_C12TR2_TRIGSEL; // trigger event input selection These bits select the trigger event input of the GPDMA transfer (as per ), with an active trigger event if TRIGPOL[1:0]00.
    typedef bit_field_t<24, 0x3> GPDMA_C12TR2_TRIGPOL; // trigger event polarity These bits define the polarity of the selected trigger event input defined by TRIGSEL[5:0].
    typedef bit_field_t<30, 0x3> GPDMA_C12TR2_TCEM; // transfer complete event mode These bits define the transfer granularity for the transfer complete and half transfer complete events generation. Note: If the initial LLI0 data transfer is null/void (directly programmed by the internal register file with GPDMA_CxBR1.BNDT[15:0]=0), then neither the complete transfer event nor the half transfer event is generated. Note: If the initial LLI0 data transfer is null/void (directly programmed by the internal register file with GPDMA_CxBR1.BNDT[15:0]=0), then neither the complete transfer event nor the half transfer event is generated. Note: If the initial LLI0 data transfer is null/void (i.e. directly programmed by the internal register file with GPDMA_CxBR1.BNDT[15:0]=0), then the half transfer event is not generated, and the transfer complete event is generated when is completed the loading of the LLI1.

    static constexpr uint32_t GPDMA_C12BR1_RESET_VALUE = 0x0; // Reset value
    typedef bit_field_t<0, 0xffff> GPDMA_C12BR1_BNDT; // block number of data bytes to transfer from the source Block size transferred from the source. When the channel is enabled, this field becomes read-only and is decremented, indicating the remaining number of data items in the current source block to be transferred. BNDT[15:0] is programmed in number of bytes, maximum source block size is 64Kbytes -1. Once the last data transfer is completed (BNDT[15:0]=0): - if GPDMA_CxLLR.UB1=1, this field is updated by the LLI in the memory. - if GPDMA_CxLLR.UB1=0 and if there is at least one not null Uxx update bit, this field is internally restored to the programmed value. - if all GPDMA_CxLLR.Uxx=0 and if GPDMA_CxLLR.LA[15:0]0, this field is internally restored to the programmed value (infinite/continuous last LLI). - if GPDMA_CxLLR=0, this field is kept as zero following the last LLI data transfer. Note: A non-null source block size must be a multiple of the source data width (BNDT[2:0] versus GPDMA_CxTR1.SDW_LOG2[1:0]). Else a user setting error is reported and no transfer is issued. When configured in packing mode (GPDMA_CxTR1.PAM[1]=1 and destination data width different from source data width), a non-null source block size must be a multiple of the destination data width (BNDT[2:0] versus GPDMA_CxTR1.DDW_LOG2[1:0]). Else a user setting error is reported and no transfer is issued.
    typedef bit_field_t<16, 0x7ff> GPDMA_C12BR1_BRC; // Block repeat counter This field contains the number of repetitions of the current block (0 to 2047). When the channel is enabled, this field becomes read-only. After decrements, this field indicates the remaining number of blocks, excluding the current one. This counter is hardware decremented for each completed block transfer. Once the last block transfer is completed (BRC[10:0]=BNDT[15:0]=0): If GPDMA_CxLLR.UB1=1, all GPDMA_CxBR1 fields are updated by the next LLI in the memory. If GPDMA_CxLLR.UB1=0 and if there is at least one not null Uxx update bit, this field is internally restored to the programmed value. if all GPDMA_CxLLR.Uxx=0 and if GPDMA_CxLLR.LA[15:0]0, this field is internally restored to the programmed value (infinite/continuous last LLI). if GPDMA_CxLLR=0, this field is kept as zero following the last LLI and data transfer.
    static constexpr uint32_t GPDMA_C12BR1_SDEC = 0x10000000; // source address decrement
    static constexpr uint32_t GPDMA_C12BR1_DDEC = 0x20000000; // destination address decrement
    static constexpr uint32_t GPDMA_C12BR1_BRSDEC = 0x40000000; // Block repeat source address decrement Note: On top of this increment/decrement (depending on BRSDEC), GPDMA_CxSAR is in the same time also updated by the increment/decrement (depending on SDEC) of the GPDMA_CxTR3.SAO value, as it is done after any programmed burst transfer.
    static constexpr uint32_t GPDMA_C12BR1_BRDDEC = 0x80000000; // Block repeat destination address decrement Note: On top of this increment/decrement (depending on BRDDEC), GPDMA_CxDAR is in the same time also updated by the increment/decrement (depending on DDEC) of the GPDMA_CxTR3.DAO value, as it is usually done at the end of each programmed burst transfer.

    static constexpr uint32_t GPDMA_C12SAR_RESET_VALUE = 0x0; // Reset value
    typedef bit_field_t<0, 0xffffffff> GPDMA_C12SAR_SA; // source address This field is the pointer to the address from which the next data is read. During the channel activity, depending on the source addressing mode (GPDMA_CxTR1.SINC), this field is kept fixed or incremented by the data width (GPDMA_CxTR1.SDW_LOG2[1:0]) after each single source data, reflecting the next address from which data is read. During the channel activity, this address is updated after each completed source burst, consequently to: the programmed source burst; either in fixed addressing mode or in contiguous-data incremented mode. If contiguously incremented (GPDMA_CxTR1.SINC = 1), then the additional address offset value is the programmed burst size, as defined by GPDMA_CxTR1.SBL_1[5:0] and GPDMA_CxTR1.SDW_LOG2[21:0] the additional source incremented/decremented offset value as programmed by GPDMA_CxBR1.SDEC and GPDMA_CxTR3.SAO[12:0] once/if completed source block transfer, for a channel x with 2D addressing capability (x = 12 to 15). additional block repeat source incremented/decremented offset value as programmed by GPDMA_CxBR1.BRSDEC and GPDMA_CxBR2.BRSAO[15:0] In linked-list mode, after a LLI data transfer is completed, this register is automatically updated by GPDMA from the memory, provided the LLI is set with GPDMA_CxLLR.USA=1. Note: A source address must be aligned with the programmed data width of a source single (SA[2:0] versus GPDMA_CxTR1.SDW_LOG2[1:0]). Else, a user setting error is reported and no transfer is issued. When the source block size is not a multiple of the source burst size and is a multiple of the source data width, the last programmed source burst is not completed and is internally shorten to match the block size. In this case, the additional GPDMA_CxTR3.SAO[12:0] is not applied.

    static constexpr uint32_t GPDMA_C12DAR_RESET_VALUE = 0x0; // Reset value
    typedef bit_field_t<0, 0xffffffff> GPDMA_C12DAR_DA; // destination address This field is the pointer to the address from which the next data is written. During the channel activity, depending on the destination addressing mode (GPDMA_CxTR1.DINC), this field is kept fixed or incremented by the data width (GPDMA_CxTR1.DDW_LOG2[21:0]) after each single destination data, reflecting the next address from which data is written. During the channel activity, this address is updated after each completed destination burst, consequently to: the programmed destination burst; either in fixed addressing mode or in contiguous-data incremented mode. If contiguously incremented (GPDMA_CxTR1.DINC = 1), then the additional address offset value is the programmed burst size, as defined by GPDMA_CxTR1.DBL_1[5:0] and GPDMA_CxTR1.DDW_LOG2[1:0] the additional destination incremented/decremented offset value as programmed by GPDMA_CxBR1.DDEC and GPDMA_CxTR3.DAO[12:0] once/if completed destination block transfer, for a channel x with 2D addressing capability (x=12to15), the additional block repeat destination incremented/decremented offset value as programmed by GPDMA_CxBR1.BRDDEC and GPDMA_CxBR2.BRDAO[15:0] In linked-list mode, after a LLI data transfer is completed, this register is automatically updated by the GPDMA from the memory, provided the LLI is set with GPDMA_CxLLR.UDA=1. Note: A destination address must be aligned with the programmed data width of a destination burst (DA[2:0] versus GPDMA_CxTR1.DDW_LOG2[1:0]). Else, a user setting error is reported and no transfer is issued.

    static constexpr uint32_t GPDMA_C12TR3_RESET_VALUE = 0x0; // Reset value
    typedef bit_field_t<0, 0x1fff> GPDMA_C12TR3_SAO; // source address offset increment The source address, pointed by GPDMA_CxSAR, is incremented or decremented (depending on GPDMA_CxBR1.SDEC) by this offset SAO[12:0] for each programmed source burst. This offset is not including and is added to the programmed burst size when the completed burst is addressed in incremented mode (GPDMA_CxTR1.SINC=1). Note: A source address offset must be aligned with the programmed data width of a source burst (SAO[2:0] versus GPDMA_CxTR1.SDW_LOG2[1:0]). Else a user setting error is reported and none transfer is issued. When the source block size is not a multiple of the destination burst size and is a multiple of the source data width, then the last programmed source burst is not completed and is internally shorten to match the block size. In this case, the additional GPDMA_CxTR3.SAO[12:0] is not applied.
    typedef bit_field_t<16, 0x1fff> GPDMA_C12TR3_DAO; // destination address offset increment The destination address, pointed by GPDMA_CxDAR, is incremented or decremented (depending on GPDMA_CxBR1.DDEC) by this offset DAO[12:0] for each programmed destination burst. This offset is not including and is added to the programmed burst size when the completed burst is addressed in incremented mode (GPDMA_CxTR1.DINC=1). Note: A destination address offset must be aligned with the programmed data width of a destination burst (DAO[2:0] versus GPDMA_CxTR1.DDW_LOG2[1:0]). Else, a user setting error is reported and no transfer is issued.

    static constexpr uint32_t GPDMA_C12BR2_RESET_VALUE = 0x0; // Reset value
    typedef bit_field_t<0, 0xffff> GPDMA_C12BR2_BRSAO; // Block repeated source address offset For a channel with 2D addressing capability, this field is used to update (by addition or subtraction depending on GPDMA_CxBR1.BRSDEC) the current source address (GPDMA_CxSAR) at the end of a block transfer. Note: A block repeated source address offset must be aligned with the programmed data width of a source burst (BRSAO[2:0] versus GPDMA_CxTR1.SDW_LOG2[1:0]). Else a user setting error is reported and no transfer is issued.
    typedef bit_field_t<16, 0xffff> GPDMA_C12BR2_BRDAO; // Block repeated destination address offset For a channel with 2D addressing capability, this field is used to update (by addition or subtraction depending on GPDMA_CxBR1.BRDDEC) the current destination address (GPDMA_CxDAR) at the end of a block transfer. Note: A block repeated destination address offset must be aligned with the programmed data width of a destination burst (BRDAO[2:0] versus GPDMA_CxTR1.DDW_LOG2[1:0]). Else a user setting error is reported and no transfer is issued.


    static constexpr uint32_t GPDMA_C12LLR_RESET_VALUE = 0x0; // Reset value
    typedef bit_field_t<2, 0x3fff> GPDMA_C12LLR_LA; // pointer (16-bit low-significant address) to the next linked-list data structure If UT1=UT2=UB1=USA=UDA=ULL=0 and if LA[15:20]=0, the current LLI is the last one. The channel transfer is completed without any update of the linked-list GPDMA register file. Else, this field is the pointer to the memory address offset from which the next linked-list data structure is automatically fetched from, once the data transfer is completed, in order to conditionally update the linked-list GPDMA internal register file (GPDMA_CxCTR1, GPDMA_CxTR2, GPDMA_CxBR1, GPDMA_CxSAR, GPDMA_CxDAR and GPDMA_CxLLR). Note: The user must program the pointer to be 32-bit aligned. The two low-significant bits are write ignored.
    static constexpr uint32_t GPDMA_C12LLR_ULL = 0x10000; // Update GPDMA_CxLLR register from memory This bit is used to control the update of GPDMA_CxLLR from the memory during the link transfer.
    static constexpr uint32_t GPDMA_C12LLR_UB2 = 0x2000000; // Update GPDMA_CxBR2 from memory This bit controls the update of GPDMA_CxBR2 from the memory during the link transfer.
    static constexpr uint32_t GPDMA_C12LLR_UT3 = 0x4000000; // Update GPDMA_CxTR3 from memory This bit controls the update of GPDMA_CxTR3 from the memory during the link transfer.
    static constexpr uint32_t GPDMA_C12LLR_UDA = 0x8000000; // Update GPDMA_CxDAR register from memory This bit is used to control the update of GPDMA_CxDAR from the memory during the link transfer.
    static constexpr uint32_t GPDMA_C12LLR_USA = 0x10000000; // update GPDMA_CxSAR from memory This bit controls the update of GPDMA_CxSAR from the memory during the link transfer.
    static constexpr uint32_t GPDMA_C12LLR_UB1 = 0x20000000; // Update GPDMA_CxBR1 from memory This bit controls the update of GPDMA_CxBR1 from the memory during the link transfer. If UB1=0 and if GPDMA_CxLLR0, the linked-list is not completed. GPDMA_CxBR1.BNDT[15:0] is then restored to the programmed value after data transfer is completed and before the link transfer.
    static constexpr uint32_t GPDMA_C12LLR_UT2 = 0x40000000; // Update GPDMA_CxTR2 from memory This bit controls the update of GPDMA_CxTR2 from the memory during the link transfer.
    static constexpr uint32_t GPDMA_C12LLR_UT1 = 0x80000000; // Update GPDMA_CxTR1 from memory This bit controls the update of GPDMA_CxTR1 from the memory during the link transfer.

    static constexpr uint32_t GPDMA_C13LBAR_RESET_VALUE = 0x0; // Reset value
    typedef bit_field_t<16, 0xffff> GPDMA_C13LBAR_LBA; // linked-list base address of GPDMA channel x


    static constexpr uint32_t GPDMA_C13FCR_RESET_VALUE = 0x0; // Reset value
    static constexpr uint32_t GPDMA_C13FCR_TCF = 0x100; // transfer complete flag clear
    static constexpr uint32_t GPDMA_C13FCR_HTF = 0x200; // half transfer flag clear
    static constexpr uint32_t GPDMA_C13FCR_DTEF = 0x400; // data transfer error flag clear
    static constexpr uint32_t GPDMA_C13FCR_ULEF = 0x800; // update link transfer error flag clear
    static constexpr uint32_t GPDMA_C13FCR_USEF = 0x1000; // user setting error flag clear
    static constexpr uint32_t GPDMA_C13FCR_SUSPF = 0x2000; // completed suspension flag clear
    static constexpr uint32_t GPDMA_C13FCR_TOF = 0x4000; // trigger overrun flag clear

    static constexpr uint32_t GPDMA_C13SR_RESET_VALUE = 0x1; // Reset value
    static constexpr uint32_t GPDMA_C13SR_IDLEF = 0x1; // idle flag This idle flag is de-asserted by hardware when the channel is enabled (GPDMA_CxCR.EN=1) with a valid channel configuration (no USEF to be immediately reported). This idle flag is asserted after hard reset or by hardware when the channel is back in idle state (in suspended or disabled state).
    static constexpr uint32_t GPDMA_C13SR_TCF = 0x100; // transfer complete flag A transfer complete event is either a block transfer complete, a 2D/repeated block transfer complete, a LLI transfer complete including the upload of the next LLI if any, or the full linked-list completion, depending on the transfer complete event mode (GPDMA_CxTR2.TCEM[1:0]).
    static constexpr uint32_t GPDMA_C13SR_HTF = 0x200; // half transfer flag An half transfer event is either an half block transfer or an half 2D/repeated block transfer, depending on the transfer complete event mode (GPDMA_CxTR2.TCEM[1:0]). An half block transfer occurs when half of the bytes of the source block size (rounded up integer of GPDMA_CxBR1.BNDT[15:0]/2) has been transferred to the destination. An half 2D/repeated block transfer occurs when half of the repeated blocks (rounded up integer of (GPDMA_CxBR1.BRC[10:0]+1)/2)) has been transferred to the destination.
    static constexpr uint32_t GPDMA_C13SR_DTEF = 0x400; // data transfer error flag
    static constexpr uint32_t GPDMA_C13SR_ULEF = 0x800; // update link transfer error flag
    static constexpr uint32_t GPDMA_C13SR_USEF = 0x1000; // user setting error flag
    static constexpr uint32_t GPDMA_C13SR_SUSPF = 0x2000; // completed suspension flag
    static constexpr uint32_t GPDMA_C13SR_TOF = 0x4000; // trigger overrun flag
    typedef bit_field_t<16, 0xff> GPDMA_C13SR_FIFOL; // monitored FIFO level Number of available write beats in the FIFO, in units of the programmed destination data width (see GPDMA_CxTR1.DDW_LOG2[1:0], in units of bytes, half-words, or words). Note: After having suspended an active transfer, the user may need to read FIFOL[7:0], additionally to GPDMA_CxBR1.BDNT[15:0] and GPDMA_CxBR1.BRC[10:0], to know how many data have been transferred to the destination. Before reading, the user may wait for the transfer to be suspended (GPDMA_CxSR.SUSPF=1).

    static constexpr uint32_t GPDMA_C13CR_RESET_VALUE = 0x0; // Reset value
    static constexpr uint32_t GPDMA_C13CR_EN = 0x1; // enable Writing 1 into the field RESET (bit 1) causes the hardware to de-assert this bit, whatever is written into this bit 0. Else: this bit is de-asserted by hardware when there is a transfer error (master bus error or user setting error) or when there is a channel transfer complete (channel ready to be configured, e.g. if LSM=1 at the end of a single execution of the LLI). Else, this bit can be asserted by software. Writing 0 into this EN bit is ignored.
    static constexpr uint32_t GPDMA_C13CR_RESET = 0x2; // reset This bit is write only. Writing 0 has no impact. Writing 1 implies the reset of the following: the FIFO, the channel internal state, SUSP and EN bits (whatever is written receptively in bit 2 and bit 0). The reset is effective when the channel is in steady state, meaning one of the following: - active channel in suspended state (GPDMA_CxSR.SUSPF=1 and GPDMA_CxSR.IDLEF=GPDMA_CxCR.EN=1) - channel in disabled state (GPDMA_CxSR.IDLEF=1 and GPDMA_CxCR.EN=0). After writing a RESET, to continue using this channel, the user must explicitly reconfigure the channel including the hardware-modified configuration registers (GPDMA_CxBR1, GPDMA_CxSAR and GPDMA_CxDAR) before enabling again the channel (see the programming sequence in ).
    static constexpr uint32_t GPDMA_C13CR_SUSP = 0x4; // suspend Writing 1 into the field RESET (bit 1) causes the hardware to de-assert this bit, whatever is written into this bit 2. Else: Software must write 1 in order to suspend an active channel i.e. a channel with an on-going GPDMA transfer over its master ports. The software must write 0 in order to resume a suspended channel, following the programming sequence detailed in .
    static constexpr uint32_t GPDMA_C13CR_TCIE = 0x100; // transfer complete interrupt enable
    static constexpr uint32_t GPDMA_C13CR_HTIE = 0x200; // half transfer complete interrupt enable
    static constexpr uint32_t GPDMA_C13CR_DTEIE = 0x400; // data transfer error interrupt enable
    static constexpr uint32_t GPDMA_C13CR_ULEIE = 0x800; // update link transfer error interrupt enable
    static constexpr uint32_t GPDMA_C13CR_USEIE = 0x1000; // user setting error interrupt enable
    static constexpr uint32_t GPDMA_C13CR_SUSPIE = 0x2000; // completed suspension interrupt enable
    static constexpr uint32_t GPDMA_C13CR_TOIE = 0x4000; // trigger overrun interrupt enable
    static constexpr uint32_t GPDMA_C13CR_LSM = 0x10000; // Link step mode First the (possible 1D/repeated) block transfer is executed as defined by the current internal register file until GPDMA_CxBR1.BNDT[15:0]=0 and GPDMA_CxBR1.BRC[10:0]=0 if present. Secondly the next linked-list data structure is conditionally uploaded from memory as defined by GPDMA_CxLLR. Then channel execution is completed. Note: This bit must be written when EN=0. This bit is read-only when EN=1.
    static constexpr uint32_t GPDMA_C13CR_LAP = 0x20000; // linked-list allocated port This bit is used to allocate the master port for the update of the GPDMA linked-list registers from the memory. Note: This bit must be written when EN=0. This bit is read-only when EN=1.
    typedef bit_field_t<22, 0x3> GPDMA_C13CR_PRIO; // priority level of the channel x GPDMA transfer versus others Note: This bit must be written when EN=0. This bit is read-only when EN=1.


    static constexpr uint32_t GPDMA_C13TR1_RESET_VALUE = 0x0; // Reset value
    typedef bit_field_t<0, 0x3> GPDMA_C13TR1_SDW_LOG2; // binary logarithm of the source data width of a burst in bytes Note: Setting a 8-byte data width causes a user setting error to be reported and no transfer is issued. A source block size must be a multiple of the source data width (GPDMA_CxBR1.BNDT[2:0] versus SDW_LOG2[1:0]). Otherwise, a user setting error is reported and no transfer is issued. A source single transfer must have an aligned address with its data width (start address GPDMA_CxSAR[2:0] versus SDW_LOG2[1:0]). Otherwise, a user setting error is reported and none transfer is issued.
    static constexpr uint32_t GPDMA_C13TR1_SINC = 0x8; // source incrementing burst The source address, pointed by GPDMA_CxSAR, is kept constant after a burst beat/single transfer or is incremented by the offset value corresponding to a contiguous data after a burst beat/single transfer.
    typedef bit_field_t<4, 0x3f> GPDMA_C13TR1_SBL_1; // source burst length minus 1, between 0 and 63 The burst length unit is one data named beat within a burst. If SBL_1[5:0]=0, the burst can be named as single. Each data/beat has a width defined by the destination data width SDW_LOG2[1:0]. Note: If a burst transfer crossed a 1-Kbyte address boundary on a AHB transfer, the GPDMA modifies and shortens the programmed burst into singles or bursts of lower length, to be compliant with the AHB protocol. If a burst transfer is of length greater than the FIFO size of the channel x, the GPDMA modifies and shortens the programmed burst into singles or bursts of lower length, to be compliant with the FIFO size. Transfer performance is lower, with GPDMA re-arbitration between effective and lower bursts/singles, but the data integrity is guaranteed.
    typedef bit_field_t<11, 0x3> GPDMA_C13TR1_PAM; // padding/alignment mode If DDW_LOG2[1:0] = SDW_LOG2[1:0]: if the data width of a burst destination transfer is equal to the data width of a burst source transfer, these bits are ignored. Else: - Case 1: If destination data width &gt; source data width 1x: successive source data are FIFO queued and packed at the destination data width, in a left (LSB) to right (MSB) order (named little endian), before a destination transfer - Case 2: If destination data width &lt; source data width 1x: source data is FIFO queued and unpacked at the destination data width, to be transferred in a left (LSB) to right (MSB) order (named little endian) to the destination Note:
    static constexpr uint32_t GPDMA_C13TR1_SBX = 0x2000; // source byte exchange within the unaligned half-word of each source word If the source data width is shorter than a word, this bit is ignored. If the source data width is a word:
    static constexpr uint32_t GPDMA_C13TR1_SAP = 0x4000; // source allocated port This bit is used to allocate the master port for the source transfer Note: This bit must be written when EN=0. This bit is read-only when EN=1.
    static constexpr uint32_t GPDMA_C13TR1_SSEC = 0x8000; // security attribute of the GPDMA transfer from the source If GPDMA_SECCFGR.SECx=1 and the access is secure: This is a secure register bit. This bit can only be read by a secure software. This bit must be written by a secure software when GPDMA_SECCFGR.SECx=1. A secure write is ignored when GPDMA_SECCFGR.SECx=0. When GPDMA_SECCFGR.SECx is de-asserted, this SSEC bit is also de-asserted by hardware (on a secure reconfiguration of the channel as non-secure), and the GPDMA transfer from the source is non-secure.
    typedef bit_field_t<16, 0x3> GPDMA_C13TR1_DDW_LOG2; // binary logarithm of the destination data width of a burst, in bytes Note: Setting a 8-byte data width causes a user setting error to be reported and none transfer is issued. A destination burst transfer must have an aligned address with its data width (start address GPDMA_CxDAR[2:0] and address offset GPDMA_CxTR3.DAO[2:0], versus DDW_LOG2[1:0]). Otherwise a user setting error is reported and no transfer is issued.
    static constexpr uint32_t GPDMA_C13TR1_DINC = 0x80000; // destination incrementing burst The destination address, pointed by GPDMA_CxDAR, is kept constant after a burst beat/single transfer, or is incremented by the offset value corresponding to a contiguous data after a burst beat/single transfer.
    typedef bit_field_t<20, 0x3f> GPDMA_C13TR1_DBL_1; // destination burst length minus 1, between 0 and 63 The burst length unit is one data named beat within a burst. If DBL_1[5:0]=0, the burst can be named as single. Each data/beat has a width defined by the destination data width DDW_LOG2[1:0]. Note: If a burst transfer crossed a 1-Kbyte address boundary on a AHB transfer, the GPDMA modifies and shortens the programmed burst into singles or bursts of lower length, to be compliant with the AHB protocol. If a burst transfer is of length greater than the FIFO size of the channel x, the GPDMA modifies and shortens the programmed burst into singles or bursts of lower length, to be compliant with the FIFO size. Transfer performance is lower, with GPDMA re-arbitration between effective and lower bursts/singles, but the data integrity is guaranteed.
    static constexpr uint32_t GPDMA_C13TR1_DBX = 0x4000000; // destination byte exchange If the destination data size is a byte, this bit is ignored. If the destination data size is not a byte:
    static constexpr uint32_t GPDMA_C13TR1_DHX = 0x8000000; // destination half-word exchange If the destination data size is shorter than a word, this bit is ignored. If the destination data size is a word:
    static constexpr uint32_t GPDMA_C13TR1_DAP = 0x40000000; // destination allocated port This bit is used to allocate the master port for the destination transfer Note: This bit must be written when EN=0. This bit is read-only when EN=1.
    static constexpr uint32_t GPDMA_C13TR1_DSEC = 0x80000000; // security attribute of the GPDMA transfer to the destination If GPDMA_SECCFGR.SECx=1 and the access is secure: This is a secure register bit. This bit can only be read by a secure software. This bit must be written by a secure software when GPDMA_SECCFGR.SECx=1. A secure write is ignored when GPDMA_SECCFGR.SECx=0. When GPDMA_SECCFGR.SECx is de-asserted, this DSEC bit is also de-asserted by hardware (on a secure reconfiguration of the channel as non-secure), and the GPDMA transfer to the destination is non-secure.

    static constexpr uint32_t GPDMA_C13TR2_RESET_VALUE = 0x0; // Reset value
    typedef bit_field_t<0, 0x7f> GPDMA_C13TR2_REQSEL; // GPDMA hardware request selection These bits are ignored if channel x is activated (GPDMA_CxCR.EN asserted) with SWREQ=1 (software request for a memory-to-memory transfer). Else, the selected hardware request is internally taken into account as per . The user must not assign a same input hardware request (same REQSEL[6:0] value) to different active GPDMA channels (GPDMA_CxCR.EN=1 and GPDMA_CxTR2.SWREQ=0 for these channels). GPDMA is not intended to hardware support the case of simultaneous enabled channels incorrectly configured with a same hardware peripheral request signal, and there is no user setting error reporting.
    static constexpr uint32_t GPDMA_C13TR2_SWREQ = 0x200; // software request This bit is internally taken into account when GPDMA_CxCR.EN is asserted.
    static constexpr uint32_t GPDMA_C13TR2_DREQ = 0x400; // destination hardware request This bit is ignored if channel x is activated (GPDMA_CxCR.EN asserted) with SWREQ=1 (software request for a memory-to-memory transfer). Else: Note:
    static constexpr uint32_t GPDMA_C13TR2_BREQ = 0x800; // Block hardware request If the channel x is activated (GPDMA_CxCR.EN asserted) with SWREQ=1 (software request for a memory-to-memory transfer), this bit is ignored. Else:
    typedef bit_field_t<14, 0x3> GPDMA_C13TR2_TRIGM; // trigger mode These bits define the transfer granularity for its conditioning by the trigger. If the channel x is enabled (GPDMA_CxCR.EN asserted) with TRIGPOL[1:0]=00 or 11, these TRIGM[1:0] bits are ignored. Else, a GPDMA transfer is conditioned by at least one trigger hit: first burst read of a 2D/repeated block transfer is conditioned by one hit trigger. If the peripheral is programmed as a source (DREQ=0) of the LLI data transfer, each programmed burst read is conditioned. If the peripheral is programmed as a destination (DREQ=1) of the LLI data transfer, each programmed burst write is conditioned. The first memory burst read of a (possibly 2D/repeated) block, also named as the first ready FIFO-based source burst, is gated by the occurrence of both the hardware request and the first trigger hit. The GPDMA monitoring of a trigger for channel x is started when the channel is enabled/loaded with a new active trigger configuration: rising or falling edge on a selected trigger (TRIGPOL[1:0]=01 or respectively TRIGPOL[1:0]=10). The monitoring of this trigger is kept active during the triggered and uncompleted (data or link) transfer; and if a new trigger is detected then, this hit is internally memorized to grant the next transfer, as long as the defined rising or falling edge is not modified, and the TRIGSEL[5:0] is not modified, and the channel is enabled. Transferring a next LLIn+1 that updates the GPDMA_CxTR2 with a new value for any of TRIGSEL[5:0] or TRIGPOL[1:0], resets the monitoring, trashing the memorized hit of the formerly defined LLIn trigger. After a first new trigger hitn+1 is memorized, if another second trigger hitn+2 is detected and if the hitn triggered transfer is still not completed, hitn+2 is lost and not memorized.memorized. A trigger overrun flag is reported (GPDMA_CxSR.TOF=1), and an interrupt is generated if enabled (GPDMA_CxCR.TOIE=1). The channel is not automatically disabled by hardware due to a trigger overrun. Note: When the source block size is not a multiple of the source burst size and is a multiple of the source data width, then the last programmed source burst is not completed and is internally shorten to match the block size. In this case, if TRIGM[1:0]=11 and (SWREQ=1 or (SWREQ=0 and DREQ=0)), the shortened burst transfer (by singles or/and by bursts of lower length) is conditioned once by the trigger. When the programmed destination burst is internally shortened by singles or/and by bursts of lower length (versus FIFO size, versus block size, 1-Kbyte boundary address crossing): if the trigger is conditioning the programmed destination burst (if TRIGM[1:0]=11 and SWREQ=0 and DREQ=1), this shortened destination burst transfer is conditioned once by the trigger.
    typedef bit_field_t<16, 0x3f> GPDMA_C13TR2_TRIGSEL; // trigger event input selection These bits select the trigger event input of the GPDMA transfer (as per ), with an active trigger event if TRIGPOL[1:0]00.
    typedef bit_field_t<24, 0x3> GPDMA_C13TR2_TRIGPOL; // trigger event polarity These bits define the polarity of the selected trigger event input defined by TRIGSEL[5:0].
    typedef bit_field_t<30, 0x3> GPDMA_C13TR2_TCEM; // transfer complete event mode These bits define the transfer granularity for the transfer complete and half transfer complete events generation. Note: If the initial LLI0 data transfer is null/void (directly programmed by the internal register file with GPDMA_CxBR1.BNDT[15:0]=0), then neither the complete transfer event nor the half transfer event is generated. Note: If the initial LLI0 data transfer is null/void (directly programmed by the internal register file with GPDMA_CxBR1.BNDT[15:0]=0), then neither the complete transfer event nor the half transfer event is generated. Note: If the initial LLI0 data transfer is null/void (i.e. directly programmed by the internal register file with GPDMA_CxBR1.BNDT[15:0]=0), then the half transfer event is not generated, and the transfer complete event is generated when is completed the loading of the LLI1.

    static constexpr uint32_t GPDMA_C13BR1_RESET_VALUE = 0x0; // Reset value
    typedef bit_field_t<0, 0xffff> GPDMA_C13BR1_BNDT; // block number of data bytes to transfer from the source Block size transferred from the source. When the channel is enabled, this field becomes read-only and is decremented, indicating the remaining number of data items in the current source block to be transferred. BNDT[15:0] is programmed in number of bytes, maximum source block size is 64Kbytes -1. Once the last data transfer is completed (BNDT[15:0]=0): - if GPDMA_CxLLR.UB1=1, this field is updated by the LLI in the memory. - if GPDMA_CxLLR.UB1=0 and if there is at least one not null Uxx update bit, this field is internally restored to the programmed value. - if all GPDMA_CxLLR.Uxx=0 and if GPDMA_CxLLR.LA[15:0]0, this field is internally restored to the programmed value (infinite/continuous last LLI). - if GPDMA_CxLLR=0, this field is kept as zero following the last LLI data transfer. Note: A non-null source block size must be a multiple of the source data width (BNDT[2:0] versus GPDMA_CxTR1.SDW_LOG2[1:0]). Else a user setting error is reported and no transfer is issued. When configured in packing mode (GPDMA_CxTR1.PAM[1]=1 and destination data width different from source data width), a non-null source block size must be a multiple of the destination data width (BNDT[2:0] versus GPDMA_CxTR1.DDW_LOG2[1:0]). Else a user setting error is reported and no transfer is issued.
    typedef bit_field_t<16, 0x7ff> GPDMA_C13BR1_BRC; // Block repeat counter This field contains the number of repetitions of the current block (0 to 2047). When the channel is enabled, this field becomes read-only. After decrements, this field indicates the remaining number of blocks, excluding the current one. This counter is hardware decremented for each completed block transfer. Once the last block transfer is completed (BRC[10:0]=BNDT[15:0]=0): If GPDMA_CxLLR.UB1=1, all GPDMA_CxBR1 fields are updated by the next LLI in the memory. If GPDMA_CxLLR.UB1=0 and if there is at least one not null Uxx update bit, this field is internally restored to the programmed value. if all GPDMA_CxLLR.Uxx=0 and if GPDMA_CxLLR.LA[15:0]0, this field is internally restored to the programmed value (infinite/continuous last LLI). if GPDMA_CxLLR=0, this field is kept as zero following the last LLI and data transfer.
    static constexpr uint32_t GPDMA_C13BR1_SDEC = 0x10000000; // source address decrement
    static constexpr uint32_t GPDMA_C13BR1_DDEC = 0x20000000; // destination address decrement
    static constexpr uint32_t GPDMA_C13BR1_BRSDEC = 0x40000000; // Block repeat source address decrement Note: On top of this increment/decrement (depending on BRSDEC), GPDMA_CxSAR is in the same time also updated by the increment/decrement (depending on SDEC) of the GPDMA_CxTR3.SAO value, as it is done after any programmed burst transfer.
    static constexpr uint32_t GPDMA_C13BR1_BRDDEC = 0x80000000; // Block repeat destination address decrement Note: On top of this increment/decrement (depending on BRDDEC), GPDMA_CxDAR is in the same time also updated by the increment/decrement (depending on DDEC) of the GPDMA_CxTR3.DAO value, as it is usually done at the end of each programmed burst transfer.

    static constexpr uint32_t GPDMA_C13SAR_RESET_VALUE = 0x0; // Reset value
    typedef bit_field_t<0, 0xffffffff> GPDMA_C13SAR_SA; // source address This field is the pointer to the address from which the next data is read. During the channel activity, depending on the source addressing mode (GPDMA_CxTR1.SINC), this field is kept fixed or incremented by the data width (GPDMA_CxTR1.SDW_LOG2[1:0]) after each single source data, reflecting the next address from which data is read. During the channel activity, this address is updated after each completed source burst, consequently to: the programmed source burst; either in fixed addressing mode or in contiguous-data incremented mode. If contiguously incremented (GPDMA_CxTR1.SINC = 1), then the additional address offset value is the programmed burst size, as defined by GPDMA_CxTR1.SBL_1[5:0] and GPDMA_CxTR1.SDW_LOG2[21:0] the additional source incremented/decremented offset value as programmed by GPDMA_CxBR1.SDEC and GPDMA_CxTR3.SAO[12:0] once/if completed source block transfer, for a channel x with 2D addressing capability (x = 12 to 15). additional block repeat source incremented/decremented offset value as programmed by GPDMA_CxBR1.BRSDEC and GPDMA_CxBR2.BRSAO[15:0] In linked-list mode, after a LLI data transfer is completed, this register is automatically updated by GPDMA from the memory, provided the LLI is set with GPDMA_CxLLR.USA=1. Note: A source address must be aligned with the programmed data width of a source single (SA[2:0] versus GPDMA_CxTR1.SDW_LOG2[1:0]). Else, a user setting error is reported and no transfer is issued. When the source block size is not a multiple of the source burst size and is a multiple of the source data width, the last programmed source burst is not completed and is internally shorten to match the block size. In this case, the additional GPDMA_CxTR3.SAO[12:0] is not applied.

    static constexpr uint32_t GPDMA_C13DAR_RESET_VALUE = 0x0; // Reset value
    typedef bit_field_t<0, 0xffffffff> GPDMA_C13DAR_DA; // destination address This field is the pointer to the address from which the next data is written. During the channel activity, depending on the destination addressing mode (GPDMA_CxTR1.DINC), this field is kept fixed or incremented by the data width (GPDMA_CxTR1.DDW_LOG2[21:0]) after each single destination data, reflecting the next address from which data is written. During the channel activity, this address is updated after each completed destination burst, consequently to: the programmed destination burst; either in fixed addressing mode or in contiguous-data incremented mode. If contiguously incremented (GPDMA_CxTR1.DINC = 1), then the additional address offset value is the programmed burst size, as defined by GPDMA_CxTR1.DBL_1[5:0] and GPDMA_CxTR1.DDW_LOG2[1:0] the additional destination incremented/decremented offset value as programmed by GPDMA_CxBR1.DDEC and GPDMA_CxTR3.DAO[12:0] once/if completed destination block transfer, for a channel x with 2D addressing capability (x=12to15), the additional block repeat destination incremented/decremented offset value as programmed by GPDMA_CxBR1.BRDDEC and GPDMA_CxBR2.BRDAO[15:0] In linked-list mode, after a LLI data transfer is completed, this register is automatically updated by the GPDMA from the memory, provided the LLI is set with GPDMA_CxLLR.UDA=1. Note: A destination address must be aligned with the programmed data width of a destination burst (DA[2:0] versus GPDMA_CxTR1.DDW_LOG2[1:0]). Else, a user setting error is reported and no transfer is issued.

    static constexpr uint32_t GPDMA_C13TR3_RESET_VALUE = 0x0; // Reset value
    typedef bit_field_t<0, 0x1fff> GPDMA_C13TR3_SAO; // source address offset increment The source address, pointed by GPDMA_CxSAR, is incremented or decremented (depending on GPDMA_CxBR1.SDEC) by this offset SAO[12:0] for each programmed source burst. This offset is not including and is added to the programmed burst size when the completed burst is addressed in incremented mode (GPDMA_CxTR1.SINC=1). Note: A source address offset must be aligned with the programmed data width of a source burst (SAO[2:0] versus GPDMA_CxTR1.SDW_LOG2[1:0]). Else a user setting error is reported and none transfer is issued. When the source block size is not a multiple of the destination burst size and is a multiple of the source data width, then the last programmed source burst is not completed and is internally shorten to match the block size. In this case, the additional GPDMA_CxTR3.SAO[12:0] is not applied.
    typedef bit_field_t<16, 0x1fff> GPDMA_C13TR3_DAO; // destination address offset increment The destination address, pointed by GPDMA_CxDAR, is incremented or decremented (depending on GPDMA_CxBR1.DDEC) by this offset DAO[12:0] for each programmed destination burst. This offset is not including and is added to the programmed burst size when the completed burst is addressed in incremented mode (GPDMA_CxTR1.DINC=1). Note: A destination address offset must be aligned with the programmed data width of a destination burst (DAO[2:0] versus GPDMA_CxTR1.DDW_LOG2[1:0]). Else, a user setting error is reported and no transfer is issued.

    static constexpr uint32_t GPDMA_C13BR2_RESET_VALUE = 0x0; // Reset value
    typedef bit_field_t<0, 0xffff> GPDMA_C13BR2_BRSAO; // Block repeated source address offset For a channel with 2D addressing capability, this field is used to update (by addition or subtraction depending on GPDMA_CxBR1.BRSDEC) the current source address (GPDMA_CxSAR) at the end of a block transfer. Note: A block repeated source address offset must be aligned with the programmed data width of a source burst (BRSAO[2:0] versus GPDMA_CxTR1.SDW_LOG2[1:0]). Else a user setting error is reported and no transfer is issued.
    typedef bit_field_t<16, 0xffff> GPDMA_C13BR2_BRDAO; // Block repeated destination address offset For a channel with 2D addressing capability, this field is used to update (by addition or subtraction depending on GPDMA_CxBR1.BRDDEC) the current destination address (GPDMA_CxDAR) at the end of a block transfer. Note: A block repeated destination address offset must be aligned with the programmed data width of a destination burst (BRDAO[2:0] versus GPDMA_CxTR1.DDW_LOG2[1:0]). Else a user setting error is reported and no transfer is issued.


    static constexpr uint32_t GPDMA_C13LLR_RESET_VALUE = 0x0; // Reset value
    typedef bit_field_t<2, 0x3fff> GPDMA_C13LLR_LA; // pointer (16-bit low-significant address) to the next linked-list data structure If UT1=UT2=UB1=USA=UDA=ULL=0 and if LA[15:20]=0, the current LLI is the last one. The channel transfer is completed without any update of the linked-list GPDMA register file. Else, this field is the pointer to the memory address offset from which the next linked-list data structure is automatically fetched from, once the data transfer is completed, in order to conditionally update the linked-list GPDMA internal register file (GPDMA_CxCTR1, GPDMA_CxTR2, GPDMA_CxBR1, GPDMA_CxSAR, GPDMA_CxDAR and GPDMA_CxLLR). Note: The user must program the pointer to be 32-bit aligned. The two low-significant bits are write ignored.
    static constexpr uint32_t GPDMA_C13LLR_ULL = 0x10000; // Update GPDMA_CxLLR register from memory This bit is used to control the update of GPDMA_CxLLR from the memory during the link transfer.
    static constexpr uint32_t GPDMA_C13LLR_UB2 = 0x2000000; // Update GPDMA_CxBR2 from memory This bit controls the update of GPDMA_CxBR2 from the memory during the link transfer.
    static constexpr uint32_t GPDMA_C13LLR_UT3 = 0x4000000; // Update GPDMA_CxTR3 from memory This bit controls the update of GPDMA_CxTR3 from the memory during the link transfer.
    static constexpr uint32_t GPDMA_C13LLR_UDA = 0x8000000; // Update GPDMA_CxDAR register from memory This bit is used to control the update of GPDMA_CxDAR from the memory during the link transfer.
    static constexpr uint32_t GPDMA_C13LLR_USA = 0x10000000; // update GPDMA_CxSAR from memory This bit controls the update of GPDMA_CxSAR from the memory during the link transfer.
    static constexpr uint32_t GPDMA_C13LLR_UB1 = 0x20000000; // Update GPDMA_CxBR1 from memory This bit controls the update of GPDMA_CxBR1 from the memory during the link transfer. If UB1=0 and if GPDMA_CxLLR0, the linked-list is not completed. GPDMA_CxBR1.BNDT[15:0] is then restored to the programmed value after data transfer is completed and before the link transfer.
    static constexpr uint32_t GPDMA_C13LLR_UT2 = 0x40000000; // Update GPDMA_CxTR2 from memory This bit controls the update of GPDMA_CxTR2 from the memory during the link transfer.
    static constexpr uint32_t GPDMA_C13LLR_UT1 = 0x80000000; // Update GPDMA_CxTR1 from memory This bit controls the update of GPDMA_CxTR1 from the memory during the link transfer.

    static constexpr uint32_t GPDMA_C14LBAR_RESET_VALUE = 0x0; // Reset value
    typedef bit_field_t<16, 0xffff> GPDMA_C14LBAR_LBA; // linked-list base address of GPDMA channel x


    static constexpr uint32_t GPDMA_C14FCR_RESET_VALUE = 0x0; // Reset value
    static constexpr uint32_t GPDMA_C14FCR_TCF = 0x100; // transfer complete flag clear
    static constexpr uint32_t GPDMA_C14FCR_HTF = 0x200; // half transfer flag clear
    static constexpr uint32_t GPDMA_C14FCR_DTEF = 0x400; // data transfer error flag clear
    static constexpr uint32_t GPDMA_C14FCR_ULEF = 0x800; // update link transfer error flag clear
    static constexpr uint32_t GPDMA_C14FCR_USEF = 0x1000; // user setting error flag clear
    static constexpr uint32_t GPDMA_C14FCR_SUSPF = 0x2000; // completed suspension flag clear
    static constexpr uint32_t GPDMA_C14FCR_TOF = 0x4000; // trigger overrun flag clear

    static constexpr uint32_t GPDMA_C14SR_RESET_VALUE = 0x1; // Reset value
    static constexpr uint32_t GPDMA_C14SR_IDLEF = 0x1; // idle flag This idle flag is de-asserted by hardware when the channel is enabled (GPDMA_CxCR.EN=1) with a valid channel configuration (no USEF to be immediately reported). This idle flag is asserted after hard reset or by hardware when the channel is back in idle state (in suspended or disabled state).
    static constexpr uint32_t GPDMA_C14SR_TCF = 0x100; // transfer complete flag A transfer complete event is either a block transfer complete, a 2D/repeated block transfer complete, a LLI transfer complete including the upload of the next LLI if any, or the full linked-list completion, depending on the transfer complete event mode (GPDMA_CxTR2.TCEM[1:0]).
    static constexpr uint32_t GPDMA_C14SR_HTF = 0x200; // half transfer flag An half transfer event is either an half block transfer or an half 2D/repeated block transfer, depending on the transfer complete event mode (GPDMA_CxTR2.TCEM[1:0]). An half block transfer occurs when half of the bytes of the source block size (rounded up integer of GPDMA_CxBR1.BNDT[15:0]/2) has been transferred to the destination. An half 2D/repeated block transfer occurs when half of the repeated blocks (rounded up integer of (GPDMA_CxBR1.BRC[10:0]+1)/2)) has been transferred to the destination.
    static constexpr uint32_t GPDMA_C14SR_DTEF = 0x400; // data transfer error flag
    static constexpr uint32_t GPDMA_C14SR_ULEF = 0x800; // update link transfer error flag
    static constexpr uint32_t GPDMA_C14SR_USEF = 0x1000; // user setting error flag
    static constexpr uint32_t GPDMA_C14SR_SUSPF = 0x2000; // completed suspension flag
    static constexpr uint32_t GPDMA_C14SR_TOF = 0x4000; // trigger overrun flag
    typedef bit_field_t<16, 0xff> GPDMA_C14SR_FIFOL; // monitored FIFO level Number of available write beats in the FIFO, in units of the programmed destination data width (see GPDMA_CxTR1.DDW_LOG2[1:0], in units of bytes, half-words, or words). Note: After having suspended an active transfer, the user may need to read FIFOL[7:0], additionally to GPDMA_CxBR1.BDNT[15:0] and GPDMA_CxBR1.BRC[10:0], to know how many data have been transferred to the destination. Before reading, the user may wait for the transfer to be suspended (GPDMA_CxSR.SUSPF=1).

    static constexpr uint32_t GPDMA_C14CR_RESET_VALUE = 0x0; // Reset value
    static constexpr uint32_t GPDMA_C14CR_EN = 0x1; // enable Writing 1 into the field RESET (bit 1) causes the hardware to de-assert this bit, whatever is written into this bit 0. Else: this bit is de-asserted by hardware when there is a transfer error (master bus error or user setting error) or when there is a channel transfer complete (channel ready to be configured, e.g. if LSM=1 at the end of a single execution of the LLI). Else, this bit can be asserted by software. Writing 0 into this EN bit is ignored.
    static constexpr uint32_t GPDMA_C14CR_RESET = 0x2; // reset This bit is write only. Writing 0 has no impact. Writing 1 implies the reset of the following: the FIFO, the channel internal state, SUSP and EN bits (whatever is written receptively in bit 2 and bit 0). The reset is effective when the channel is in steady state, meaning one of the following: - active channel in suspended state (GPDMA_CxSR.SUSPF=1 and GPDMA_CxSR.IDLEF=GPDMA_CxCR.EN=1) - channel in disabled state (GPDMA_CxSR.IDLEF=1 and GPDMA_CxCR.EN=0). After writing a RESET, to continue using this channel, the user must explicitly reconfigure the channel including the hardware-modified configuration registers (GPDMA_CxBR1, GPDMA_CxSAR and GPDMA_CxDAR) before enabling again the channel (see the programming sequence in ).
    static constexpr uint32_t GPDMA_C14CR_SUSP = 0x4; // suspend Writing 1 into the field RESET (bit 1) causes the hardware to de-assert this bit, whatever is written into this bit 2. Else: Software must write 1 in order to suspend an active channel i.e. a channel with an on-going GPDMA transfer over its master ports. The software must write 0 in order to resume a suspended channel, following the programming sequence detailed in .
    static constexpr uint32_t GPDMA_C14CR_TCIE = 0x100; // transfer complete interrupt enable
    static constexpr uint32_t GPDMA_C14CR_HTIE = 0x200; // half transfer complete interrupt enable
    static constexpr uint32_t GPDMA_C14CR_DTEIE = 0x400; // data transfer error interrupt enable
    static constexpr uint32_t GPDMA_C14CR_ULEIE = 0x800; // update link transfer error interrupt enable
    static constexpr uint32_t GPDMA_C14CR_USEIE = 0x1000; // user setting error interrupt enable
    static constexpr uint32_t GPDMA_C14CR_SUSPIE = 0x2000; // completed suspension interrupt enable
    static constexpr uint32_t GPDMA_C14CR_TOIE = 0x4000; // trigger overrun interrupt enable
    static constexpr uint32_t GPDMA_C14CR_LSM = 0x10000; // Link step mode First the (possible 1D/repeated) block transfer is executed as defined by the current internal register file until GPDMA_CxBR1.BNDT[15:0]=0 and GPDMA_CxBR1.BRC[10:0]=0 if present. Secondly the next linked-list data structure is conditionally uploaded from memory as defined by GPDMA_CxLLR. Then channel execution is completed. Note: This bit must be written when EN=0. This bit is read-only when EN=1.
    static constexpr uint32_t GPDMA_C14CR_LAP = 0x20000; // linked-list allocated port This bit is used to allocate the master port for the update of the GPDMA linked-list registers from the memory. Note: This bit must be written when EN=0. This bit is read-only when EN=1.
    typedef bit_field_t<22, 0x3> GPDMA_C14CR_PRIO; // priority level of the channel x GPDMA transfer versus others Note: This bit must be written when EN=0. This bit is read-only when EN=1.


    static constexpr uint32_t GPDMA_C14TR1_RESET_VALUE = 0x0; // Reset value
    typedef bit_field_t<0, 0x3> GPDMA_C14TR1_SDW_LOG2; // binary logarithm of the source data width of a burst in bytes Note: Setting a 8-byte data width causes a user setting error to be reported and no transfer is issued. A source block size must be a multiple of the source data width (GPDMA_CxBR1.BNDT[2:0] versus SDW_LOG2[1:0]). Otherwise, a user setting error is reported and no transfer is issued. A source single transfer must have an aligned address with its data width (start address GPDMA_CxSAR[2:0] versus SDW_LOG2[1:0]). Otherwise, a user setting error is reported and none transfer is issued.
    static constexpr uint32_t GPDMA_C14TR1_SINC = 0x8; // source incrementing burst The source address, pointed by GPDMA_CxSAR, is kept constant after a burst beat/single transfer or is incremented by the offset value corresponding to a contiguous data after a burst beat/single transfer.
    typedef bit_field_t<4, 0x3f> GPDMA_C14TR1_SBL_1; // source burst length minus 1, between 0 and 63 The burst length unit is one data named beat within a burst. If SBL_1[5:0]=0, the burst can be named as single. Each data/beat has a width defined by the destination data width SDW_LOG2[1:0]. Note: If a burst transfer crossed a 1-Kbyte address boundary on a AHB transfer, the GPDMA modifies and shortens the programmed burst into singles or bursts of lower length, to be compliant with the AHB protocol. If a burst transfer is of length greater than the FIFO size of the channel x, the GPDMA modifies and shortens the programmed burst into singles or bursts of lower length, to be compliant with the FIFO size. Transfer performance is lower, with GPDMA re-arbitration between effective and lower bursts/singles, but the data integrity is guaranteed.
    typedef bit_field_t<11, 0x3> GPDMA_C14TR1_PAM; // padding/alignment mode If DDW_LOG2[1:0] = SDW_LOG2[1:0]: if the data width of a burst destination transfer is equal to the data width of a burst source transfer, these bits are ignored. Else: - Case 1: If destination data width &gt; source data width 1x: successive source data are FIFO queued and packed at the destination data width, in a left (LSB) to right (MSB) order (named little endian), before a destination transfer - Case 2: If destination data width &lt; source data width 1x: source data is FIFO queued and unpacked at the destination data width, to be transferred in a left (LSB) to right (MSB) order (named little endian) to the destination Note:
    static constexpr uint32_t GPDMA_C14TR1_SBX = 0x2000; // source byte exchange within the unaligned half-word of each source word If the source data width is shorter than a word, this bit is ignored. If the source data width is a word:
    static constexpr uint32_t GPDMA_C14TR1_SAP = 0x4000; // source allocated port This bit is used to allocate the master port for the source transfer Note: This bit must be written when EN=0. This bit is read-only when EN=1.
    static constexpr uint32_t GPDMA_C14TR1_SSEC = 0x8000; // security attribute of the GPDMA transfer from the source If GPDMA_SECCFGR.SECx=1 and the access is secure: This is a secure register bit. This bit can only be read by a secure software. This bit must be written by a secure software when GPDMA_SECCFGR.SECx=1. A secure write is ignored when GPDMA_SECCFGR.SECx=0. When GPDMA_SECCFGR.SECx is de-asserted, this SSEC bit is also de-asserted by hardware (on a secure reconfiguration of the channel as non-secure), and the GPDMA transfer from the source is non-secure.
    typedef bit_field_t<16, 0x3> GPDMA_C14TR1_DDW_LOG2; // binary logarithm of the destination data width of a burst, in bytes Note: Setting a 8-byte data width causes a user setting error to be reported and none transfer is issued. A destination burst transfer must have an aligned address with its data width (start address GPDMA_CxDAR[2:0] and address offset GPDMA_CxTR3.DAO[2:0], versus DDW_LOG2[1:0]). Otherwise a user setting error is reported and no transfer is issued.
    static constexpr uint32_t GPDMA_C14TR1_DINC = 0x80000; // destination incrementing burst The destination address, pointed by GPDMA_CxDAR, is kept constant after a burst beat/single transfer, or is incremented by the offset value corresponding to a contiguous data after a burst beat/single transfer.
    typedef bit_field_t<20, 0x3f> GPDMA_C14TR1_DBL_1; // destination burst length minus 1, between 0 and 63 The burst length unit is one data named beat within a burst. If DBL_1[5:0]=0, the burst can be named as single. Each data/beat has a width defined by the destination data width DDW_LOG2[1:0]. Note: If a burst transfer crossed a 1-Kbyte address boundary on a AHB transfer, the GPDMA modifies and shortens the programmed burst into singles or bursts of lower length, to be compliant with the AHB protocol. If a burst transfer is of length greater than the FIFO size of the channel x, the GPDMA modifies and shortens the programmed burst into singles or bursts of lower length, to be compliant with the FIFO size. Transfer performance is lower, with GPDMA re-arbitration between effective and lower bursts/singles, but the data integrity is guaranteed.
    static constexpr uint32_t GPDMA_C14TR1_DBX = 0x4000000; // destination byte exchange If the destination data size is a byte, this bit is ignored. If the destination data size is not a byte:
    static constexpr uint32_t GPDMA_C14TR1_DHX = 0x8000000; // destination half-word exchange If the destination data size is shorter than a word, this bit is ignored. If the destination data size is a word:
    static constexpr uint32_t GPDMA_C14TR1_DAP = 0x40000000; // destination allocated port This bit is used to allocate the master port for the destination transfer Note: This bit must be written when EN=0. This bit is read-only when EN=1.
    static constexpr uint32_t GPDMA_C14TR1_DSEC = 0x80000000; // security attribute of the GPDMA transfer to the destination If GPDMA_SECCFGR.SECx=1 and the access is secure: This is a secure register bit. This bit can only be read by a secure software. This bit must be written by a secure software when GPDMA_SECCFGR.SECx=1. A secure write is ignored when GPDMA_SECCFGR.SECx=0. When GPDMA_SECCFGR.SECx is de-asserted, this DSEC bit is also de-asserted by hardware (on a secure reconfiguration of the channel as non-secure), and the GPDMA transfer to the destination is non-secure.

    static constexpr uint32_t GPDMA_C14TR2_RESET_VALUE = 0x0; // Reset value
    typedef bit_field_t<0, 0x7f> GPDMA_C14TR2_REQSEL; // GPDMA hardware request selection These bits are ignored if channel x is activated (GPDMA_CxCR.EN asserted) with SWREQ=1 (software request for a memory-to-memory transfer). Else, the selected hardware request is internally taken into account as per . The user must not assign a same input hardware request (same REQSEL[6:0] value) to different active GPDMA channels (GPDMA_CxCR.EN=1 and GPDMA_CxTR2.SWREQ=0 for these channels). GPDMA is not intended to hardware support the case of simultaneous enabled channels incorrectly configured with a same hardware peripheral request signal, and there is no user setting error reporting.
    static constexpr uint32_t GPDMA_C14TR2_SWREQ = 0x200; // software request This bit is internally taken into account when GPDMA_CxCR.EN is asserted.
    static constexpr uint32_t GPDMA_C14TR2_DREQ = 0x400; // destination hardware request This bit is ignored if channel x is activated (GPDMA_CxCR.EN asserted) with SWREQ=1 (software request for a memory-to-memory transfer). Else: Note:
    static constexpr uint32_t GPDMA_C14TR2_BREQ = 0x800; // Block hardware request If the channel x is activated (GPDMA_CxCR.EN asserted) with SWREQ=1 (software request for a memory-to-memory transfer), this bit is ignored. Else:
    typedef bit_field_t<14, 0x3> GPDMA_C14TR2_TRIGM; // trigger mode These bits define the transfer granularity for its conditioning by the trigger. If the channel x is enabled (GPDMA_CxCR.EN asserted) with TRIGPOL[1:0]=00 or 11, these TRIGM[1:0] bits are ignored. Else, a GPDMA transfer is conditioned by at least one trigger hit: first burst read of a 2D/repeated block transfer is conditioned by one hit trigger. If the peripheral is programmed as a source (DREQ=0) of the LLI data transfer, each programmed burst read is conditioned. If the peripheral is programmed as a destination (DREQ=1) of the LLI data transfer, each programmed burst write is conditioned. The first memory burst read of a (possibly 2D/repeated) block, also named as the first ready FIFO-based source burst, is gated by the occurrence of both the hardware request and the first trigger hit. The GPDMA monitoring of a trigger for channel x is started when the channel is enabled/loaded with a new active trigger configuration: rising or falling edge on a selected trigger (TRIGPOL[1:0]=01 or respectively TRIGPOL[1:0]=10). The monitoring of this trigger is kept active during the triggered and uncompleted (data or link) transfer; and if a new trigger is detected then, this hit is internally memorized to grant the next transfer, as long as the defined rising or falling edge is not modified, and the TRIGSEL[5:0] is not modified, and the channel is enabled. Transferring a next LLIn+1 that updates the GPDMA_CxTR2 with a new value for any of TRIGSEL[5:0] or TRIGPOL[1:0], resets the monitoring, trashing the memorized hit of the formerly defined LLIn trigger. After a first new trigger hitn+1 is memorized, if another second trigger hitn+2 is detected and if the hitn triggered transfer is still not completed, hitn+2 is lost and not memorized.memorized. A trigger overrun flag is reported (GPDMA_CxSR.TOF=1), and an interrupt is generated if enabled (GPDMA_CxCR.TOIE=1). The channel is not automatically disabled by hardware due to a trigger overrun. Note: When the source block size is not a multiple of the source burst size and is a multiple of the source data width, then the last programmed source burst is not completed and is internally shorten to match the block size. In this case, if TRIGM[1:0]=11 and (SWREQ=1 or (SWREQ=0 and DREQ=0)), the shortened burst transfer (by singles or/and by bursts of lower length) is conditioned once by the trigger. When the programmed destination burst is internally shortened by singles or/and by bursts of lower length (versus FIFO size, versus block size, 1-Kbyte boundary address crossing): if the trigger is conditioning the programmed destination burst (if TRIGM[1:0]=11 and SWREQ=0 and DREQ=1), this shortened destination burst transfer is conditioned once by the trigger.
    typedef bit_field_t<16, 0x3f> GPDMA_C14TR2_TRIGSEL; // trigger event input selection These bits select the trigger event input of the GPDMA transfer (as per ), with an active trigger event if TRIGPOL[1:0]00.
    typedef bit_field_t<24, 0x3> GPDMA_C14TR2_TRIGPOL; // trigger event polarity These bits define the polarity of the selected trigger event input defined by TRIGSEL[5:0].
    typedef bit_field_t<30, 0x3> GPDMA_C14TR2_TCEM; // transfer complete event mode These bits define the transfer granularity for the transfer complete and half transfer complete events generation. Note: If the initial LLI0 data transfer is null/void (directly programmed by the internal register file with GPDMA_CxBR1.BNDT[15:0]=0), then neither the complete transfer event nor the half transfer event is generated. Note: If the initial LLI0 data transfer is null/void (directly programmed by the internal register file with GPDMA_CxBR1.BNDT[15:0]=0), then neither the complete transfer event nor the half transfer event is generated. Note: If the initial LLI0 data transfer is null/void (i.e. directly programmed by the internal register file with GPDMA_CxBR1.BNDT[15:0]=0), then the half transfer event is not generated, and the transfer complete event is generated when is completed the loading of the LLI1.

    static constexpr uint32_t GPDMA_C14BR1_RESET_VALUE = 0x0; // Reset value
    typedef bit_field_t<0, 0xffff> GPDMA_C14BR1_BNDT; // block number of data bytes to transfer from the source Block size transferred from the source. When the channel is enabled, this field becomes read-only and is decremented, indicating the remaining number of data items in the current source block to be transferred. BNDT[15:0] is programmed in number of bytes, maximum source block size is 64Kbytes -1. Once the last data transfer is completed (BNDT[15:0]=0): - if GPDMA_CxLLR.UB1=1, this field is updated by the LLI in the memory. - if GPDMA_CxLLR.UB1=0 and if there is at least one not null Uxx update bit, this field is internally restored to the programmed value. - if all GPDMA_CxLLR.Uxx=0 and if GPDMA_CxLLR.LA[15:0]0, this field is internally restored to the programmed value (infinite/continuous last LLI). - if GPDMA_CxLLR=0, this field is kept as zero following the last LLI data transfer. Note: A non-null source block size must be a multiple of the source data width (BNDT[2:0] versus GPDMA_CxTR1.SDW_LOG2[1:0]). Else a user setting error is reported and no transfer is issued. When configured in packing mode (GPDMA_CxTR1.PAM[1]=1 and destination data width different from source data width), a non-null source block size must be a multiple of the destination data width (BNDT[2:0] versus GPDMA_CxTR1.DDW_LOG2[1:0]). Else a user setting error is reported and no transfer is issued.
    typedef bit_field_t<16, 0x7ff> GPDMA_C14BR1_BRC; // Block repeat counter This field contains the number of repetitions of the current block (0 to 2047). When the channel is enabled, this field becomes read-only. After decrements, this field indicates the remaining number of blocks, excluding the current one. This counter is hardware decremented for each completed block transfer. Once the last block transfer is completed (BRC[10:0]=BNDT[15:0]=0): If GPDMA_CxLLR.UB1=1, all GPDMA_CxBR1 fields are updated by the next LLI in the memory. If GPDMA_CxLLR.UB1=0 and if there is at least one not null Uxx update bit, this field is internally restored to the programmed value. if all GPDMA_CxLLR.Uxx=0 and if GPDMA_CxLLR.LA[15:0]0, this field is internally restored to the programmed value (infinite/continuous last LLI). if GPDMA_CxLLR=0, this field is kept as zero following the last LLI and data transfer.
    static constexpr uint32_t GPDMA_C14BR1_SDEC = 0x10000000; // source address decrement
    static constexpr uint32_t GPDMA_C14BR1_DDEC = 0x20000000; // destination address decrement
    static constexpr uint32_t GPDMA_C14BR1_BRSDEC = 0x40000000; // Block repeat source address decrement Note: On top of this increment/decrement (depending on BRSDEC), GPDMA_CxSAR is in the same time also updated by the increment/decrement (depending on SDEC) of the GPDMA_CxTR3.SAO value, as it is done after any programmed burst transfer.
    static constexpr uint32_t GPDMA_C14BR1_BRDDEC = 0x80000000; // Block repeat destination address decrement Note: On top of this increment/decrement (depending on BRDDEC), GPDMA_CxDAR is in the same time also updated by the increment/decrement (depending on DDEC) of the GPDMA_CxTR3.DAO value, as it is usually done at the end of each programmed burst transfer.

    static constexpr uint32_t GPDMA_C14SAR_RESET_VALUE = 0x0; // Reset value
    typedef bit_field_t<0, 0xffffffff> GPDMA_C14SAR_SA; // source address This field is the pointer to the address from which the next data is read. During the channel activity, depending on the source addressing mode (GPDMA_CxTR1.SINC), this field is kept fixed or incremented by the data width (GPDMA_CxTR1.SDW_LOG2[1:0]) after each single source data, reflecting the next address from which data is read. During the channel activity, this address is updated after each completed source burst, consequently to: the programmed source burst; either in fixed addressing mode or in contiguous-data incremented mode. If contiguously incremented (GPDMA_CxTR1.SINC = 1), then the additional address offset value is the programmed burst size, as defined by GPDMA_CxTR1.SBL_1[5:0] and GPDMA_CxTR1.SDW_LOG2[21:0] the additional source incremented/decremented offset value as programmed by GPDMA_CxBR1.SDEC and GPDMA_CxTR3.SAO[12:0] once/if completed source block transfer, for a channel x with 2D addressing capability (x = 12 to 15). additional block repeat source incremented/decremented offset value as programmed by GPDMA_CxBR1.BRSDEC and GPDMA_CxBR2.BRSAO[15:0] In linked-list mode, after a LLI data transfer is completed, this register is automatically updated by GPDMA from the memory, provided the LLI is set with GPDMA_CxLLR.USA=1. Note: A source address must be aligned with the programmed data width of a source single (SA[2:0] versus GPDMA_CxTR1.SDW_LOG2[1:0]). Else, a user setting error is reported and no transfer is issued. When the source block size is not a multiple of the source burst size and is a multiple of the source data width, the last programmed source burst is not completed and is internally shorten to match the block size. In this case, the additional GPDMA_CxTR3.SAO[12:0] is not applied.

    static constexpr uint32_t GPDMA_C14DAR_RESET_VALUE = 0x0; // Reset value
    typedef bit_field_t<0, 0xffffffff> GPDMA_C14DAR_DA; // destination address This field is the pointer to the address from which the next data is written. During the channel activity, depending on the destination addressing mode (GPDMA_CxTR1.DINC), this field is kept fixed or incremented by the data width (GPDMA_CxTR1.DDW_LOG2[21:0]) after each single destination data, reflecting the next address from which data is written. During the channel activity, this address is updated after each completed destination burst, consequently to: the programmed destination burst; either in fixed addressing mode or in contiguous-data incremented mode. If contiguously incremented (GPDMA_CxTR1.DINC = 1), then the additional address offset value is the programmed burst size, as defined by GPDMA_CxTR1.DBL_1[5:0] and GPDMA_CxTR1.DDW_LOG2[1:0] the additional destination incremented/decremented offset value as programmed by GPDMA_CxBR1.DDEC and GPDMA_CxTR3.DAO[12:0] once/if completed destination block transfer, for a channel x with 2D addressing capability (x=12to15), the additional block repeat destination incremented/decremented offset value as programmed by GPDMA_CxBR1.BRDDEC and GPDMA_CxBR2.BRDAO[15:0] In linked-list mode, after a LLI data transfer is completed, this register is automatically updated by the GPDMA from the memory, provided the LLI is set with GPDMA_CxLLR.UDA=1. Note: A destination address must be aligned with the programmed data width of a destination burst (DA[2:0] versus GPDMA_CxTR1.DDW_LOG2[1:0]). Else, a user setting error is reported and no transfer is issued.

    static constexpr uint32_t GPDMA_C14TR3_RESET_VALUE = 0x0; // Reset value
    typedef bit_field_t<0, 0x1fff> GPDMA_C14TR3_SAO; // source address offset increment The source address, pointed by GPDMA_CxSAR, is incremented or decremented (depending on GPDMA_CxBR1.SDEC) by this offset SAO[12:0] for each programmed source burst. This offset is not including and is added to the programmed burst size when the completed burst is addressed in incremented mode (GPDMA_CxTR1.SINC=1). Note: A source address offset must be aligned with the programmed data width of a source burst (SAO[2:0] versus GPDMA_CxTR1.SDW_LOG2[1:0]). Else a user setting error is reported and none transfer is issued. When the source block size is not a multiple of the destination burst size and is a multiple of the source data width, then the last programmed source burst is not completed and is internally shorten to match the block size. In this case, the additional GPDMA_CxTR3.SAO[12:0] is not applied.
    typedef bit_field_t<16, 0x1fff> GPDMA_C14TR3_DAO; // destination address offset increment The destination address, pointed by GPDMA_CxDAR, is incremented or decremented (depending on GPDMA_CxBR1.DDEC) by this offset DAO[12:0] for each programmed destination burst. This offset is not including and is added to the programmed burst size when the completed burst is addressed in incremented mode (GPDMA_CxTR1.DINC=1). Note: A destination address offset must be aligned with the programmed data width of a destination burst (DAO[2:0] versus GPDMA_CxTR1.DDW_LOG2[1:0]). Else, a user setting error is reported and no transfer is issued.

    static constexpr uint32_t GPDMA_C14BR2_RESET_VALUE = 0x0; // Reset value
    typedef bit_field_t<0, 0xffff> GPDMA_C14BR2_BRSAO; // Block repeated source address offset For a channel with 2D addressing capability, this field is used to update (by addition or subtraction depending on GPDMA_CxBR1.BRSDEC) the current source address (GPDMA_CxSAR) at the end of a block transfer. Note: A block repeated source address offset must be aligned with the programmed data width of a source burst (BRSAO[2:0] versus GPDMA_CxTR1.SDW_LOG2[1:0]). Else a user setting error is reported and no transfer is issued.
    typedef bit_field_t<16, 0xffff> GPDMA_C14BR2_BRDAO; // Block repeated destination address offset For a channel with 2D addressing capability, this field is used to update (by addition or subtraction depending on GPDMA_CxBR1.BRDDEC) the current destination address (GPDMA_CxDAR) at the end of a block transfer. Note: A block repeated destination address offset must be aligned with the programmed data width of a destination burst (BRDAO[2:0] versus GPDMA_CxTR1.DDW_LOG2[1:0]). Else a user setting error is reported and no transfer is issued.


    static constexpr uint32_t GPDMA_C14LLR_RESET_VALUE = 0x0; // Reset value
    typedef bit_field_t<2, 0x3fff> GPDMA_C14LLR_LA; // pointer (16-bit low-significant address) to the next linked-list data structure If UT1=UT2=UB1=USA=UDA=ULL=0 and if LA[15:20]=0, the current LLI is the last one. The channel transfer is completed without any update of the linked-list GPDMA register file. Else, this field is the pointer to the memory address offset from which the next linked-list data structure is automatically fetched from, once the data transfer is completed, in order to conditionally update the linked-list GPDMA internal register file (GPDMA_CxCTR1, GPDMA_CxTR2, GPDMA_CxBR1, GPDMA_CxSAR, GPDMA_CxDAR and GPDMA_CxLLR). Note: The user must program the pointer to be 32-bit aligned. The two low-significant bits are write ignored.
    static constexpr uint32_t GPDMA_C14LLR_ULL = 0x10000; // Update GPDMA_CxLLR register from memory This bit is used to control the update of GPDMA_CxLLR from the memory during the link transfer.
    static constexpr uint32_t GPDMA_C14LLR_UB2 = 0x2000000; // Update GPDMA_CxBR2 from memory This bit controls the update of GPDMA_CxBR2 from the memory during the link transfer.
    static constexpr uint32_t GPDMA_C14LLR_UT3 = 0x4000000; // Update GPDMA_CxTR3 from memory This bit controls the update of GPDMA_CxTR3 from the memory during the link transfer.
    static constexpr uint32_t GPDMA_C14LLR_UDA = 0x8000000; // Update GPDMA_CxDAR register from memory This bit is used to control the update of GPDMA_CxDAR from the memory during the link transfer.
    static constexpr uint32_t GPDMA_C14LLR_USA = 0x10000000; // update GPDMA_CxSAR from memory This bit controls the update of GPDMA_CxSAR from the memory during the link transfer.
    static constexpr uint32_t GPDMA_C14LLR_UB1 = 0x20000000; // Update GPDMA_CxBR1 from memory This bit controls the update of GPDMA_CxBR1 from the memory during the link transfer. If UB1=0 and if GPDMA_CxLLR0, the linked-list is not completed. GPDMA_CxBR1.BNDT[15:0] is then restored to the programmed value after data transfer is completed and before the link transfer.
    static constexpr uint32_t GPDMA_C14LLR_UT2 = 0x40000000; // Update GPDMA_CxTR2 from memory This bit controls the update of GPDMA_CxTR2 from the memory during the link transfer.
    static constexpr uint32_t GPDMA_C14LLR_UT1 = 0x80000000; // Update GPDMA_CxTR1 from memory This bit controls the update of GPDMA_CxTR1 from the memory during the link transfer.

    static constexpr uint32_t GPDMA_C15LBAR_RESET_VALUE = 0x0; // Reset value
    typedef bit_field_t<16, 0xffff> GPDMA_C15LBAR_LBA; // linked-list base address of GPDMA channel x


    static constexpr uint32_t GPDMA_C15FCR_RESET_VALUE = 0x0; // Reset value
    static constexpr uint32_t GPDMA_C15FCR_TCF = 0x100; // transfer complete flag clear
    static constexpr uint32_t GPDMA_C15FCR_HTF = 0x200; // half transfer flag clear
    static constexpr uint32_t GPDMA_C15FCR_DTEF = 0x400; // data transfer error flag clear
    static constexpr uint32_t GPDMA_C15FCR_ULEF = 0x800; // update link transfer error flag clear
    static constexpr uint32_t GPDMA_C15FCR_USEF = 0x1000; // user setting error flag clear
    static constexpr uint32_t GPDMA_C15FCR_SUSPF = 0x2000; // completed suspension flag clear
    static constexpr uint32_t GPDMA_C15FCR_TOF = 0x4000; // trigger overrun flag clear

    static constexpr uint32_t GPDMA_C15SR_RESET_VALUE = 0x1; // Reset value
    static constexpr uint32_t GPDMA_C15SR_IDLEF = 0x1; // idle flag This idle flag is de-asserted by hardware when the channel is enabled (GPDMA_CxCR.EN=1) with a valid channel configuration (no USEF to be immediately reported). This idle flag is asserted after hard reset or by hardware when the channel is back in idle state (in suspended or disabled state).
    static constexpr uint32_t GPDMA_C15SR_TCF = 0x100; // transfer complete flag A transfer complete event is either a block transfer complete, a 2D/repeated block transfer complete, a LLI transfer complete including the upload of the next LLI if any, or the full linked-list completion, depending on the transfer complete event mode (GPDMA_CxTR2.TCEM[1:0]).
    static constexpr uint32_t GPDMA_C15SR_HTF = 0x200; // half transfer flag An half transfer event is either an half block transfer or an half 2D/repeated block transfer, depending on the transfer complete event mode (GPDMA_CxTR2.TCEM[1:0]). An half block transfer occurs when half of the bytes of the source block size (rounded up integer of GPDMA_CxBR1.BNDT[15:0]/2) has been transferred to the destination. An half 2D/repeated block transfer occurs when half of the repeated blocks (rounded up integer of (GPDMA_CxBR1.BRC[10:0]+1)/2)) has been transferred to the destination.
    static constexpr uint32_t GPDMA_C15SR_DTEF = 0x400; // data transfer error flag
    static constexpr uint32_t GPDMA_C15SR_ULEF = 0x800; // update link transfer error flag
    static constexpr uint32_t GPDMA_C15SR_USEF = 0x1000; // user setting error flag
    static constexpr uint32_t GPDMA_C15SR_SUSPF = 0x2000; // completed suspension flag
    static constexpr uint32_t GPDMA_C15SR_TOF = 0x4000; // trigger overrun flag
    typedef bit_field_t<16, 0xff> GPDMA_C15SR_FIFOL; // monitored FIFO level Number of available write beats in the FIFO, in units of the programmed destination data width (see GPDMA_CxTR1.DDW_LOG2[1:0], in units of bytes, half-words, or words). Note: After having suspended an active transfer, the user may need to read FIFOL[7:0], additionally to GPDMA_CxBR1.BDNT[15:0] and GPDMA_CxBR1.BRC[10:0], to know how many data have been transferred to the destination. Before reading, the user may wait for the transfer to be suspended (GPDMA_CxSR.SUSPF=1).

    static constexpr uint32_t GPDMA_C15CR_RESET_VALUE = 0x0; // Reset value
    static constexpr uint32_t GPDMA_C15CR_EN = 0x1; // enable Writing 1 into the field RESET (bit 1) causes the hardware to de-assert this bit, whatever is written into this bit 0. Else: this bit is de-asserted by hardware when there is a transfer error (master bus error or user setting error) or when there is a channel transfer complete (channel ready to be configured, e.g. if LSM=1 at the end of a single execution of the LLI). Else, this bit can be asserted by software. Writing 0 into this EN bit is ignored.
    static constexpr uint32_t GPDMA_C15CR_RESET = 0x2; // reset This bit is write only. Writing 0 has no impact. Writing 1 implies the reset of the following: the FIFO, the channel internal state, SUSP and EN bits (whatever is written receptively in bit 2 and bit 0). The reset is effective when the channel is in steady state, meaning one of the following: - active channel in suspended state (GPDMA_CxSR.SUSPF=1 and GPDMA_CxSR.IDLEF=GPDMA_CxCR.EN=1) - channel in disabled state (GPDMA_CxSR.IDLEF=1 and GPDMA_CxCR.EN=0). After writing a RESET, to continue using this channel, the user must explicitly reconfigure the channel including the hardware-modified configuration registers (GPDMA_CxBR1, GPDMA_CxSAR and GPDMA_CxDAR) before enabling again the channel (see the programming sequence in ).
    static constexpr uint32_t GPDMA_C15CR_SUSP = 0x4; // suspend Writing 1 into the field RESET (bit 1) causes the hardware to de-assert this bit, whatever is written into this bit 2. Else: Software must write 1 in order to suspend an active channel i.e. a channel with an on-going GPDMA transfer over its master ports. The software must write 0 in order to resume a suspended channel, following the programming sequence detailed in .
    static constexpr uint32_t GPDMA_C15CR_TCIE = 0x100; // transfer complete interrupt enable
    static constexpr uint32_t GPDMA_C15CR_HTIE = 0x200; // half transfer complete interrupt enable
    static constexpr uint32_t GPDMA_C15CR_DTEIE = 0x400; // data transfer error interrupt enable
    static constexpr uint32_t GPDMA_C15CR_ULEIE = 0x800; // update link transfer error interrupt enable
    static constexpr uint32_t GPDMA_C15CR_USEIE = 0x1000; // user setting error interrupt enable
    static constexpr uint32_t GPDMA_C15CR_SUSPIE = 0x2000; // completed suspension interrupt enable
    static constexpr uint32_t GPDMA_C15CR_TOIE = 0x4000; // trigger overrun interrupt enable
    static constexpr uint32_t GPDMA_C15CR_LSM = 0x10000; // Link step mode First the (possible 1D/repeated) block transfer is executed as defined by the current internal register file until GPDMA_CxBR1.BNDT[15:0]=0 and GPDMA_CxBR1.BRC[10:0]=0 if present. Secondly the next linked-list data structure is conditionally uploaded from memory as defined by GPDMA_CxLLR. Then channel execution is completed. Note: This bit must be written when EN=0. This bit is read-only when EN=1.
    static constexpr uint32_t GPDMA_C15CR_LAP = 0x20000; // linked-list allocated port This bit is used to allocate the master port for the update of the GPDMA linked-list registers from the memory. Note: This bit must be written when EN=0. This bit is read-only when EN=1.
    typedef bit_field_t<22, 0x3> GPDMA_C15CR_PRIO; // priority level of the channel x GPDMA transfer versus others Note: This bit must be written when EN=0. This bit is read-only when EN=1.


    static constexpr uint32_t GPDMA_C15TR1_RESET_VALUE = 0x0; // Reset value
    typedef bit_field_t<0, 0x3> GPDMA_C15TR1_SDW_LOG2; // binary logarithm of the source data width of a burst in bytes Note: Setting a 8-byte data width causes a user setting error to be reported and no transfer is issued. A source block size must be a multiple of the source data width (GPDMA_CxBR1.BNDT[2:0] versus SDW_LOG2[1:0]). Otherwise, a user setting error is reported and no transfer is issued. A source single transfer must have an aligned address with its data width (start address GPDMA_CxSAR[2:0] versus SDW_LOG2[1:0]). Otherwise, a user setting error is reported and none transfer is issued.
    static constexpr uint32_t GPDMA_C15TR1_SINC = 0x8; // source incrementing burst The source address, pointed by GPDMA_CxSAR, is kept constant after a burst beat/single transfer or is incremented by the offset value corresponding to a contiguous data after a burst beat/single transfer.
    typedef bit_field_t<4, 0x3f> GPDMA_C15TR1_SBL_1; // source burst length minus 1, between 0 and 63 The burst length unit is one data named beat within a burst. If SBL_1[5:0]=0, the burst can be named as single. Each data/beat has a width defined by the destination data width SDW_LOG2[1:0]. Note: If a burst transfer crossed a 1-Kbyte address boundary on a AHB transfer, the GPDMA modifies and shortens the programmed burst into singles or bursts of lower length, to be compliant with the AHB protocol. If a burst transfer is of length greater than the FIFO size of the channel x, the GPDMA modifies and shortens the programmed burst into singles or bursts of lower length, to be compliant with the FIFO size. Transfer performance is lower, with GPDMA re-arbitration between effective and lower bursts/singles, but the data integrity is guaranteed.
    typedef bit_field_t<11, 0x3> GPDMA_C15TR1_PAM; // padding/alignment mode If DDW_LOG2[1:0] = SDW_LOG2[1:0]: if the data width of a burst destination transfer is equal to the data width of a burst source transfer, these bits are ignored. Else: - Case 1: If destination data width &gt; source data width 1x: successive source data are FIFO queued and packed at the destination data width, in a left (LSB) to right (MSB) order (named little endian), before a destination transfer - Case 2: If destination data width &lt; source data width 1x: source data is FIFO queued and unpacked at the destination data width, to be transferred in a left (LSB) to right (MSB) order (named little endian) to the destination Note:
    static constexpr uint32_t GPDMA_C15TR1_SBX = 0x2000; // source byte exchange within the unaligned half-word of each source word If the source data width is shorter than a word, this bit is ignored. If the source data width is a word:
    static constexpr uint32_t GPDMA_C15TR1_SAP = 0x4000; // source allocated port This bit is used to allocate the master port for the source transfer Note: This bit must be written when EN=0. This bit is read-only when EN=1.
    static constexpr uint32_t GPDMA_C15TR1_SSEC = 0x8000; // security attribute of the GPDMA transfer from the source If GPDMA_SECCFGR.SECx=1 and the access is secure: This is a secure register bit. This bit can only be read by a secure software. This bit must be written by a secure software when GPDMA_SECCFGR.SECx=1. A secure write is ignored when GPDMA_SECCFGR.SECx=0. When GPDMA_SECCFGR.SECx is de-asserted, this SSEC bit is also de-asserted by hardware (on a secure reconfiguration of the channel as non-secure), and the GPDMA transfer from the source is non-secure.
    typedef bit_field_t<16, 0x3> GPDMA_C15TR1_DDW_LOG2; // binary logarithm of the destination data width of a burst, in bytes Note: Setting a 8-byte data width causes a user setting error to be reported and none transfer is issued. A destination burst transfer must have an aligned address with its data width (start address GPDMA_CxDAR[2:0] and address offset GPDMA_CxTR3.DAO[2:0], versus DDW_LOG2[1:0]). Otherwise a user setting error is reported and no transfer is issued.
    static constexpr uint32_t GPDMA_C15TR1_DINC = 0x80000; // destination incrementing burst The destination address, pointed by GPDMA_CxDAR, is kept constant after a burst beat/single transfer, or is incremented by the offset value corresponding to a contiguous data after a burst beat/single transfer.
    typedef bit_field_t<20, 0x3f> GPDMA_C15TR1_DBL_1; // destination burst length minus 1, between 0 and 63 The burst length unit is one data named beat within a burst. If DBL_1[5:0]=0, the burst can be named as single. Each data/beat has a width defined by the destination data width DDW_LOG2[1:0]. Note: If a burst transfer crossed a 1-Kbyte address boundary on a AHB transfer, the GPDMA modifies and shortens the programmed burst into singles or bursts of lower length, to be compliant with the AHB protocol. If a burst transfer is of length greater than the FIFO size of the channel x, the GPDMA modifies and shortens the programmed burst into singles or bursts of lower length, to be compliant with the FIFO size. Transfer performance is lower, with GPDMA re-arbitration between effective and lower bursts/singles, but the data integrity is guaranteed.
    static constexpr uint32_t GPDMA_C15TR1_DBX = 0x4000000; // destination byte exchange If the destination data size is a byte, this bit is ignored. If the destination data size is not a byte:
    static constexpr uint32_t GPDMA_C15TR1_DHX = 0x8000000; // destination half-word exchange If the destination data size is shorter than a word, this bit is ignored. If the destination data size is a word:
    static constexpr uint32_t GPDMA_C15TR1_DAP = 0x40000000; // destination allocated port This bit is used to allocate the master port for the destination transfer Note: This bit must be written when EN=0. This bit is read-only when EN=1.
    static constexpr uint32_t GPDMA_C15TR1_DSEC = 0x80000000; // security attribute of the GPDMA transfer to the destination If GPDMA_SECCFGR.SECx=1 and the access is secure: This is a secure register bit. This bit can only be read by a secure software. This bit must be written by a secure software when GPDMA_SECCFGR.SECx=1. A secure write is ignored when GPDMA_SECCFGR.SECx=0. When GPDMA_SECCFGR.SECx is de-asserted, this DSEC bit is also de-asserted by hardware (on a secure reconfiguration of the channel as non-secure), and the GPDMA transfer to the destination is non-secure.

    static constexpr uint32_t GPDMA_C15TR2_RESET_VALUE = 0x0; // Reset value
    typedef bit_field_t<0, 0x7f> GPDMA_C15TR2_REQSEL; // GPDMA hardware request selection These bits are ignored if channel x is activated (GPDMA_CxCR.EN asserted) with SWREQ=1 (software request for a memory-to-memory transfer). Else, the selected hardware request is internally taken into account as per . The user must not assign a same input hardware request (same REQSEL[6:0] value) to different active GPDMA channels (GPDMA_CxCR.EN=1 and GPDMA_CxTR2.SWREQ=0 for these channels). GPDMA is not intended to hardware support the case of simultaneous enabled channels incorrectly configured with a same hardware peripheral request signal, and there is no user setting error reporting.
    static constexpr uint32_t GPDMA_C15TR2_SWREQ = 0x200; // software request This bit is internally taken into account when GPDMA_CxCR.EN is asserted.
    static constexpr uint32_t GPDMA_C15TR2_DREQ = 0x400; // destination hardware request This bit is ignored if channel x is activated (GPDMA_CxCR.EN asserted) with SWREQ=1 (software request for a memory-to-memory transfer). Else: Note:
    static constexpr uint32_t GPDMA_C15TR2_BREQ = 0x800; // Block hardware request If the channel x is activated (GPDMA_CxCR.EN asserted) with SWREQ=1 (software request for a memory-to-memory transfer), this bit is ignored. Else:
    typedef bit_field_t<14, 0x3> GPDMA_C15TR2_TRIGM; // trigger mode These bits define the transfer granularity for its conditioning by the trigger. If the channel x is enabled (GPDMA_CxCR.EN asserted) with TRIGPOL[1:0]=00 or 11, these TRIGM[1:0] bits are ignored. Else, a GPDMA transfer is conditioned by at least one trigger hit: first burst read of a 2D/repeated block transfer is conditioned by one hit trigger. If the peripheral is programmed as a source (DREQ=0) of the LLI data transfer, each programmed burst read is conditioned. If the peripheral is programmed as a destination (DREQ=1) of the LLI data transfer, each programmed burst write is conditioned. The first memory burst read of a (possibly 2D/repeated) block, also named as the first ready FIFO-based source burst, is gated by the occurrence of both the hardware request and the first trigger hit. The GPDMA monitoring of a trigger for channel x is started when the channel is enabled/loaded with a new active trigger configuration: rising or falling edge on a selected trigger (TRIGPOL[1:0]=01 or respectively TRIGPOL[1:0]=10). The monitoring of this trigger is kept active during the triggered and uncompleted (data or link) transfer; and if a new trigger is detected then, this hit is internally memorized to grant the next transfer, as long as the defined rising or falling edge is not modified, and the TRIGSEL[5:0] is not modified, and the channel is enabled. Transferring a next LLIn+1 that updates the GPDMA_CxTR2 with a new value for any of TRIGSEL[5:0] or TRIGPOL[1:0], resets the monitoring, trashing the memorized hit of the formerly defined LLIn trigger. After a first new trigger hitn+1 is memorized, if another second trigger hitn+2 is detected and if the hitn triggered transfer is still not completed, hitn+2 is lost and not memorized.memorized. A trigger overrun flag is reported (GPDMA_CxSR.TOF=1), and an interrupt is generated if enabled (GPDMA_CxCR.TOIE=1). The channel is not automatically disabled by hardware due to a trigger overrun. Note: When the source block size is not a multiple of the source burst size and is a multiple of the source data width, then the last programmed source burst is not completed and is internally shorten to match the block size. In this case, if TRIGM[1:0]=11 and (SWREQ=1 or (SWREQ=0 and DREQ=0)), the shortened burst transfer (by singles or/and by bursts of lower length) is conditioned once by the trigger. When the programmed destination burst is internally shortened by singles or/and by bursts of lower length (versus FIFO size, versus block size, 1-Kbyte boundary address crossing): if the trigger is conditioning the programmed destination burst (if TRIGM[1:0]=11 and SWREQ=0 and DREQ=1), this shortened destination burst transfer is conditioned once by the trigger.
    typedef bit_field_t<16, 0x3f> GPDMA_C15TR2_TRIGSEL; // trigger event input selection These bits select the trigger event input of the GPDMA transfer (as per ), with an active trigger event if TRIGPOL[1:0]00.
    typedef bit_field_t<24, 0x3> GPDMA_C15TR2_TRIGPOL; // trigger event polarity These bits define the polarity of the selected trigger event input defined by TRIGSEL[5:0].
    typedef bit_field_t<30, 0x3> GPDMA_C15TR2_TCEM; // transfer complete event mode These bits define the transfer granularity for the transfer complete and half transfer complete events generation. Note: If the initial LLI0 data transfer is null/void (directly programmed by the internal register file with GPDMA_CxBR1.BNDT[15:0]=0), then neither the complete transfer event nor the half transfer event is generated. Note: If the initial LLI0 data transfer is null/void (directly programmed by the internal register file with GPDMA_CxBR1.BNDT[15:0]=0), then neither the complete transfer event nor the half transfer event is generated. Note: If the initial LLI0 data transfer is null/void (i.e. directly programmed by the internal register file with GPDMA_CxBR1.BNDT[15:0]=0), then the half transfer event is not generated, and the transfer complete event is generated when is completed the loading of the LLI1.

    static constexpr uint32_t GPDMA_C15BR1_RESET_VALUE = 0x0; // Reset value
    typedef bit_field_t<0, 0xffff> GPDMA_C15BR1_BNDT; // block number of data bytes to transfer from the source Block size transferred from the source. When the channel is enabled, this field becomes read-only and is decremented, indicating the remaining number of data items in the current source block to be transferred. BNDT[15:0] is programmed in number of bytes, maximum source block size is 64Kbytes -1. Once the last data transfer is completed (BNDT[15:0]=0): - if GPDMA_CxLLR.UB1=1, this field is updated by the LLI in the memory. - if GPDMA_CxLLR.UB1=0 and if there is at least one not null Uxx update bit, this field is internally restored to the programmed value. - if all GPDMA_CxLLR.Uxx=0 and if GPDMA_CxLLR.LA[15:0]0, this field is internally restored to the programmed value (infinite/continuous last LLI). - if GPDMA_CxLLR=0, this field is kept as zero following the last LLI data transfer. Note: A non-null source block size must be a multiple of the source data width (BNDT[2:0] versus GPDMA_CxTR1.SDW_LOG2[1:0]). Else a user setting error is reported and no transfer is issued. When configured in packing mode (GPDMA_CxTR1.PAM[1]=1 and destination data width different from source data width), a non-null source block size must be a multiple of the destination data width (BNDT[2:0] versus GPDMA_CxTR1.DDW_LOG2[1:0]). Else a user setting error is reported and no transfer is issued.
    typedef bit_field_t<16, 0x7ff> GPDMA_C15BR1_BRC; // Block repeat counter This field contains the number of repetitions of the current block (0 to 2047). When the channel is enabled, this field becomes read-only. After decrements, this field indicates the remaining number of blocks, excluding the current one. This counter is hardware decremented for each completed block transfer. Once the last block transfer is completed (BRC[10:0]=BNDT[15:0]=0): If GPDMA_CxLLR.UB1=1, all GPDMA_CxBR1 fields are updated by the next LLI in the memory. If GPDMA_CxLLR.UB1=0 and if there is at least one not null Uxx update bit, this field is internally restored to the programmed value. if all GPDMA_CxLLR.Uxx=0 and if GPDMA_CxLLR.LA[15:0]0, this field is internally restored to the programmed value (infinite/continuous last LLI). if GPDMA_CxLLR=0, this field is kept as zero following the last LLI and data transfer.
    static constexpr uint32_t GPDMA_C15BR1_SDEC = 0x10000000; // source address decrement
    static constexpr uint32_t GPDMA_C15BR1_DDEC = 0x20000000; // destination address decrement
    static constexpr uint32_t GPDMA_C15BR1_BRSDEC = 0x40000000; // Block repeat source address decrement Note: On top of this increment/decrement (depending on BRSDEC), GPDMA_CxSAR is in the same time also updated by the increment/decrement (depending on SDEC) of the GPDMA_CxTR3.SAO value, as it is done after any programmed burst transfer.
    static constexpr uint32_t GPDMA_C15BR1_BRDDEC = 0x80000000; // Block repeat destination address decrement Note: On top of this increment/decrement (depending on BRDDEC), GPDMA_CxDAR is in the same time also updated by the increment/decrement (depending on DDEC) of the GPDMA_CxTR3.DAO value, as it is usually done at the end of each programmed burst transfer.

    static constexpr uint32_t GPDMA_C15SAR_RESET_VALUE = 0x0; // Reset value
    typedef bit_field_t<0, 0xffffffff> GPDMA_C15SAR_SA; // source address This field is the pointer to the address from which the next data is read. During the channel activity, depending on the source addressing mode (GPDMA_CxTR1.SINC), this field is kept fixed or incremented by the data width (GPDMA_CxTR1.SDW_LOG2[1:0]) after each single source data, reflecting the next address from which data is read. During the channel activity, this address is updated after each completed source burst, consequently to: the programmed source burst; either in fixed addressing mode or in contiguous-data incremented mode. If contiguously incremented (GPDMA_CxTR1.SINC = 1), then the additional address offset value is the programmed burst size, as defined by GPDMA_CxTR1.SBL_1[5:0] and GPDMA_CxTR1.SDW_LOG2[21:0] the additional source incremented/decremented offset value as programmed by GPDMA_CxBR1.SDEC and GPDMA_CxTR3.SAO[12:0] once/if completed source block transfer, for a channel x with 2D addressing capability (x = 12 to 15). additional block repeat source incremented/decremented offset value as programmed by GPDMA_CxBR1.BRSDEC and GPDMA_CxBR2.BRSAO[15:0] In linked-list mode, after a LLI data transfer is completed, this register is automatically updated by GPDMA from the memory, provided the LLI is set with GPDMA_CxLLR.USA=1. Note: A source address must be aligned with the programmed data width of a source single (SA[2:0] versus GPDMA_CxTR1.SDW_LOG2[1:0]). Else, a user setting error is reported and no transfer is issued. When the source block size is not a multiple of the source burst size and is a multiple of the source data width, the last programmed source burst is not completed and is internally shorten to match the block size. In this case, the additional GPDMA_CxTR3.SAO[12:0] is not applied.

    static constexpr uint32_t GPDMA_C15DAR_RESET_VALUE = 0x0; // Reset value
    typedef bit_field_t<0, 0xffffffff> GPDMA_C15DAR_DA; // destination address This field is the pointer to the address from which the next data is written. During the channel activity, depending on the destination addressing mode (GPDMA_CxTR1.DINC), this field is kept fixed or incremented by the data width (GPDMA_CxTR1.DDW_LOG2[21:0]) after each single destination data, reflecting the next address from which data is written. During the channel activity, this address is updated after each completed destination burst, consequently to: the programmed destination burst; either in fixed addressing mode or in contiguous-data incremented mode. If contiguously incremented (GPDMA_CxTR1.DINC = 1), then the additional address offset value is the programmed burst size, as defined by GPDMA_CxTR1.DBL_1[5:0] and GPDMA_CxTR1.DDW_LOG2[1:0] the additional destination incremented/decremented offset value as programmed by GPDMA_CxBR1.DDEC and GPDMA_CxTR3.DAO[12:0] once/if completed destination block transfer, for a channel x with 2D addressing capability (x=12to15), the additional block repeat destination incremented/decremented offset value as programmed by GPDMA_CxBR1.BRDDEC and GPDMA_CxBR2.BRDAO[15:0] In linked-list mode, after a LLI data transfer is completed, this register is automatically updated by the GPDMA from the memory, provided the LLI is set with GPDMA_CxLLR.UDA=1. Note: A destination address must be aligned with the programmed data width of a destination burst (DA[2:0] versus GPDMA_CxTR1.DDW_LOG2[1:0]). Else, a user setting error is reported and no transfer is issued.

    static constexpr uint32_t GPDMA_C15TR3_RESET_VALUE = 0x0; // Reset value
    typedef bit_field_t<0, 0x1fff> GPDMA_C15TR3_SAO; // source address offset increment The source address, pointed by GPDMA_CxSAR, is incremented or decremented (depending on GPDMA_CxBR1.SDEC) by this offset SAO[12:0] for each programmed source burst. This offset is not including and is added to the programmed burst size when the completed burst is addressed in incremented mode (GPDMA_CxTR1.SINC=1). Note: A source address offset must be aligned with the programmed data width of a source burst (SAO[2:0] versus GPDMA_CxTR1.SDW_LOG2[1:0]). Else a user setting error is reported and none transfer is issued. When the source block size is not a multiple of the destination burst size and is a multiple of the source data width, then the last programmed source burst is not completed and is internally shorten to match the block size. In this case, the additional GPDMA_CxTR3.SAO[12:0] is not applied.
    typedef bit_field_t<16, 0x1fff> GPDMA_C15TR3_DAO; // destination address offset increment The destination address, pointed by GPDMA_CxDAR, is incremented or decremented (depending on GPDMA_CxBR1.DDEC) by this offset DAO[12:0] for each programmed destination burst. This offset is not including and is added to the programmed burst size when the completed burst is addressed in incremented mode (GPDMA_CxTR1.DINC=1). Note: A destination address offset must be aligned with the programmed data width of a destination burst (DAO[2:0] versus GPDMA_CxTR1.DDW_LOG2[1:0]). Else, a user setting error is reported and no transfer is issued.

    static constexpr uint32_t GPDMA_C15BR2_RESET_VALUE = 0x0; // Reset value
    typedef bit_field_t<0, 0xffff> GPDMA_C15BR2_BRSAO; // Block repeated source address offset For a channel with 2D addressing capability, this field is used to update (by addition or subtraction depending on GPDMA_CxBR1.BRSDEC) the current source address (GPDMA_CxSAR) at the end of a block transfer. Note: A block repeated source address offset must be aligned with the programmed data width of a source burst (BRSAO[2:0] versus GPDMA_CxTR1.SDW_LOG2[1:0]). Else a user setting error is reported and no transfer is issued.
    typedef bit_field_t<16, 0xffff> GPDMA_C15BR2_BRDAO; // Block repeated destination address offset For a channel with 2D addressing capability, this field is used to update (by addition or subtraction depending on GPDMA_CxBR1.BRDDEC) the current destination address (GPDMA_CxDAR) at the end of a block transfer. Note: A block repeated destination address offset must be aligned with the programmed data width of a destination burst (BRDAO[2:0] versus GPDMA_CxTR1.DDW_LOG2[1:0]). Else a user setting error is reported and no transfer is issued.


    static constexpr uint32_t GPDMA_C15LLR_RESET_VALUE = 0x0; // Reset value
    typedef bit_field_t<2, 0x3fff> GPDMA_C15LLR_LA; // pointer (16-bit low-significant address) to the next linked-list data structure If UT1=UT2=UB1=USA=UDA=ULL=0 and if LA[15:20]=0, the current LLI is the last one. The channel transfer is completed without any update of the linked-list GPDMA register file. Else, this field is the pointer to the memory address offset from which the next linked-list data structure is automatically fetched from, once the data transfer is completed, in order to conditionally update the linked-list GPDMA internal register file (GPDMA_CxCTR1, GPDMA_CxTR2, GPDMA_CxBR1, GPDMA_CxSAR, GPDMA_CxDAR and GPDMA_CxLLR). Note: The user must program the pointer to be 32-bit aligned. The two low-significant bits are write ignored.
    static constexpr uint32_t GPDMA_C15LLR_ULL = 0x10000; // Update GPDMA_CxLLR register from memory This bit is used to control the update of GPDMA_CxLLR from the memory during the link transfer.
    static constexpr uint32_t GPDMA_C15LLR_UB2 = 0x2000000; // Update GPDMA_CxBR2 from memory This bit controls the update of GPDMA_CxBR2 from the memory during the link transfer.
    static constexpr uint32_t GPDMA_C15LLR_UT3 = 0x4000000; // Update GPDMA_CxTR3 from memory This bit controls the update of GPDMA_CxTR3 from the memory during the link transfer.
    static constexpr uint32_t GPDMA_C15LLR_UDA = 0x8000000; // Update GPDMA_CxDAR register from memory This bit is used to control the update of GPDMA_CxDAR from the memory during the link transfer.
    static constexpr uint32_t GPDMA_C15LLR_USA = 0x10000000; // update GPDMA_CxSAR from memory This bit controls the update of GPDMA_CxSAR from the memory during the link transfer.
    static constexpr uint32_t GPDMA_C15LLR_UB1 = 0x20000000; // Update GPDMA_CxBR1 from memory This bit controls the update of GPDMA_CxBR1 from the memory during the link transfer. If UB1=0 and if GPDMA_CxLLR0, the linked-list is not completed. GPDMA_CxBR1.BNDT[15:0] is then restored to the programmed value after data transfer is completed and before the link transfer.
    static constexpr uint32_t GPDMA_C15LLR_UT2 = 0x40000000; // Update GPDMA_CxTR2 from memory This bit controls the update of GPDMA_CxTR2 from the memory during the link transfer.
    static constexpr uint32_t GPDMA_C15LLR_UT1 = 0x80000000; // Update GPDMA_CxTR1 from memory This bit controls the update of GPDMA_CxTR1 from the memory during the link transfer.
};

template<>
struct peripheral_t<STM32U5xx, GPDMA1>
{
    static constexpr periph_t P = GPDMA1;
    using T = stm32u5xx_gpdma1_t;
    static T& V;
};

template<>
struct peripheral_t<STM32U5xx, SEC_GPDMA1>
{
    static constexpr periph_t P = SEC_GPDMA1;
    using T = stm32u5xx_gpdma1_t;
    static T& V;
};

using gpdma1_t = peripheral_t<svd, GPDMA1>;
using sec_gpdma1_t = peripheral_t<svd, SEC_GPDMA1>;
